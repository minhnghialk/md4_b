
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  detectRuntime,
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 5.2.0
 * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
 */
Prisma.prismaVersion = {
  client: "5.2.0",
  engine: "2804dc98259d2ea960602aca6b8e7fdc03c1758f"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.NotFoundError = () => {
  throw new Error(`NotFoundError is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  throw new Error(`Extensions.getExtensionContext is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.defineExtension = () => {
  throw new Error(`Extensions.defineExtension is unable to be run ${runtimeDescription}.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}

/**
 * Enums
 */

exports.Prisma.UsersScalarFieldEnum = {
  id: 'id',
  email: 'email',
  emailConfirm: 'emailConfirm',
  userName: 'userName',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  avatar: 'avatar',
  isActive: 'isActive',
  createAt: 'createAt',
  updateAt: 'updateAt',
  isAdmin: 'isAdmin'
};

exports.Prisma.CategoriesScalarFieldEnum = {
  id: 'id',
  title: 'title',
  active: 'active',
  avatar: 'avatar'
};

exports.Prisma.ProductsScalarFieldEnum = {
  id: 'id',
  name: 'name',
  avatar: 'avatar',
  price: 'price',
  des: 'des',
  categoryId: 'categoryId'
};

exports.Prisma.ProductPicturesScalarFieldEnum = {
  id: 'id',
  path: 'path',
  productId: 'productId'
};

exports.Prisma.UserReceiptsScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  state: 'state',
  createAt: 'createAt',
  acceptTime: 'acceptTime',
  shippingTime: 'shippingTime',
  doneTime: 'doneTime',
  total: 'total',
  payMode: 'payMode',
  paid: 'paid'
};

exports.Prisma.GuestReceiptsScalarFieldEnum = {
  id: 'id',
  email: 'email',
  phoneNumber: 'phoneNumber',
  state: 'state',
  createAt: 'createAt',
  acceptTime: 'acceptTime',
  shippingTime: 'shippingTime',
  doneTime: 'doneTime',
  total: 'total',
  payMode: 'payMode',
  paid: 'paid'
};

exports.Prisma.GuestReceiptDetailScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  quantity: 'quantity',
  guestReceiptId: 'guestReceiptId'
};

exports.Prisma.UserReceiptDetailScalarFieldEnum = {
  id: 'id',
  productId: 'productId',
  quantity: 'quantity',
  userReceiptId: 'userReceiptId'
};

exports.Prisma.UserOrderScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  data: 'data'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};
exports.ReceiptState = exports.$Enums.ReceiptState = {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  SHIPPING: 'SHIPPING',
  DONE: 'DONE'
};

exports.ReceiptPayMode = exports.$Enums.ReceiptPayMode = {
  ZALO: 'ZALO',
  CASH: 'CASH'
};

exports.Prisma.ModelName = {
  users: 'users',
  categories: 'categories',
  products: 'products',
  productPictures: 'productPictures',
  userReceipts: 'userReceipts',
  guestReceipts: 'guestReceipts',
  guestReceiptDetail: 'guestReceiptDetail',
  userReceiptDetail: 'userReceiptDetail',
  userOrder: 'userOrder'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        const runtime = detectRuntime()
        const edgeRuntimeName = {
          'workerd': 'Cloudflare Workers',
          'deno': 'Deno and Deno Deploy',
          'netlify': 'Netlify Edge Functions',
          'edge-light': 'Vercel Edge Functions',
        }[runtime]

        let message = 'PrismaClient is unable to run in '
        if (edgeRuntimeName !== undefined) {
          message += edgeRuntimeName + '. As an alternative, try Accelerate: https://pris.ly/d/accelerate.'
        } else {
          message += 'this browser environment, or has been bundled for the browser (running in `' + runtime + '`).'
        }
        
        message += `
If this is unexpected, please open an issue: https://github.com/prisma/prisma/issues`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
