
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Address
 * 
 */
export type Address = $Result.DefaultSelection<Prisma.$AddressPayload>
/**
 * Model users
 * 
 */
export type users = $Result.DefaultSelection<Prisma.$usersPayload>
/**
 * Model categories
 * 
 */
export type categories = $Result.DefaultSelection<Prisma.$categoriesPayload>
/**
 * Model products
 * 
 */
export type products = $Result.DefaultSelection<Prisma.$productsPayload>
/**
 * Model productPictures
 * 
 */
export type productPictures = $Result.DefaultSelection<Prisma.$productPicturesPayload>
/**
 * Model userReceipts
 * 
 */
export type userReceipts = $Result.DefaultSelection<Prisma.$userReceiptsPayload>
/**
 * Model guestReceipts
 * 
 */
export type guestReceipts = $Result.DefaultSelection<Prisma.$guestReceiptsPayload>
/**
 * Model guestReceiptDetail
 * 
 */
export type guestReceiptDetail = $Result.DefaultSelection<Prisma.$guestReceiptDetailPayload>
/**
 * Model userReceiptDetail
 * 
 */
export type userReceiptDetail = $Result.DefaultSelection<Prisma.$userReceiptDetailPayload>
/**
 * Model userOrder
 * 
 */
export type userOrder = $Result.DefaultSelection<Prisma.$userOrderPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const ReceiptState: {
  PENDING: 'PENDING',
  ACCEPTED: 'ACCEPTED',
  SHIPPING: 'SHIPPING',
  DONE: 'DONE'
};

export type ReceiptState = (typeof ReceiptState)[keyof typeof ReceiptState]


export const ReceiptPayMode: {
  ZALO: 'ZALO',
  CASH: 'CASH'
};

export type ReceiptPayMode = (typeof ReceiptPayMode)[keyof typeof ReceiptPayMode]

}

export type ReceiptState = $Enums.ReceiptState

export const ReceiptState: typeof $Enums.ReceiptState

export type ReceiptPayMode = $Enums.ReceiptPayMode

export const ReceiptPayMode: typeof $Enums.ReceiptPayMode

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.users.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.users.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P]): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number }): $Utils.JsPromise<R>

  /**
   * Executes a raw MongoDB command and returns the result of it.
   * @example
   * ```
   * const user = await prisma.$runCommandRaw({
   *   aggregate: 'User',
   *   pipeline: [{ $match: { name: 'Bob' } }, { $project: { email: true, _id: false } }],
   *   explain: false,
   * })
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $runCommandRaw(command: Prisma.InputJsonObject): Prisma.PrismaPromise<Prisma.JsonObject>

  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.users`: Exposes CRUD operations for the **users** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.users.findMany()
    * ```
    */
  get users(): Prisma.usersDelegate<ExtArgs>;

  /**
   * `prisma.categories`: Exposes CRUD operations for the **categories** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.categories.findMany()
    * ```
    */
  get categories(): Prisma.categoriesDelegate<ExtArgs>;

  /**
   * `prisma.products`: Exposes CRUD operations for the **products** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Products
    * const products = await prisma.products.findMany()
    * ```
    */
  get products(): Prisma.productsDelegate<ExtArgs>;

  /**
   * `prisma.productPictures`: Exposes CRUD operations for the **productPictures** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProductPictures
    * const productPictures = await prisma.productPictures.findMany()
    * ```
    */
  get productPictures(): Prisma.productPicturesDelegate<ExtArgs>;

  /**
   * `prisma.userReceipts`: Exposes CRUD operations for the **userReceipts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserReceipts
    * const userReceipts = await prisma.userReceipts.findMany()
    * ```
    */
  get userReceipts(): Prisma.userReceiptsDelegate<ExtArgs>;

  /**
   * `prisma.guestReceipts`: Exposes CRUD operations for the **guestReceipts** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GuestReceipts
    * const guestReceipts = await prisma.guestReceipts.findMany()
    * ```
    */
  get guestReceipts(): Prisma.guestReceiptsDelegate<ExtArgs>;

  /**
   * `prisma.guestReceiptDetail`: Exposes CRUD operations for the **guestReceiptDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more GuestReceiptDetails
    * const guestReceiptDetails = await prisma.guestReceiptDetail.findMany()
    * ```
    */
  get guestReceiptDetail(): Prisma.guestReceiptDetailDelegate<ExtArgs>;

  /**
   * `prisma.userReceiptDetail`: Exposes CRUD operations for the **userReceiptDetail** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserReceiptDetails
    * const userReceiptDetails = await prisma.userReceiptDetail.findMany()
    * ```
    */
  get userReceiptDetail(): Prisma.userReceiptDetailDelegate<ExtArgs>;

  /**
   * `prisma.userOrder`: Exposes CRUD operations for the **userOrder** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserOrders
    * const userOrders = await prisma.userOrder.findMany()
    * ```
    */
  get userOrder(): Prisma.userOrderDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.2.0
   * Query Engine version: 2804dc98259d2ea960602aca6b8e7fdc03c1758f
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    users: 'users',
    categories: 'categories',
    products: 'products',
    productPictures: 'productPictures',
    userReceipts: 'userReceipts',
    guestReceipts: 'guestReceipts',
    guestReceiptDetail: 'guestReceiptDetail',
    userReceiptDetail: 'userReceiptDetail',
    userOrder: 'userOrder'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.Args}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'users' | 'categories' | 'products' | 'productPictures' | 'userReceipts' | 'guestReceipts' | 'guestReceiptDetail' | 'userReceiptDetail' | 'userOrder'
      txIsolationLevel: never
    },
    model: {
      users: {
        payload: Prisma.$usersPayload<ExtArgs>
        fields: Prisma.usersFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usersFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usersFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findFirst: {
            args: Prisma.usersFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usersFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          findMany: {
            args: Prisma.usersFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>[]
          }
          create: {
            args: Prisma.usersCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          createMany: {
            args: Prisma.usersCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.usersDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          update: {
            args: Prisma.usersUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          deleteMany: {
            args: Prisma.usersDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.usersUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.usersUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$usersPayload>
          }
          aggregate: {
            args: Prisma.UsersAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUsers>
          }
          groupBy: {
            args: Prisma.usersGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UsersGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.usersFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.usersAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.usersCountArgs<ExtArgs>,
            result: $Utils.Optional<UsersCountAggregateOutputType> | number
          }
        }
      }
      categories: {
        payload: Prisma.$categoriesPayload<ExtArgs>
        fields: Prisma.categoriesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.categoriesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.categoriesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findFirst: {
            args: Prisma.categoriesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.categoriesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          findMany: {
            args: Prisma.categoriesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>[]
          }
          create: {
            args: Prisma.categoriesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          createMany: {
            args: Prisma.categoriesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.categoriesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          update: {
            args: Prisma.categoriesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          deleteMany: {
            args: Prisma.categoriesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.categoriesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.categoriesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$categoriesPayload>
          }
          aggregate: {
            args: Prisma.CategoriesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategories>
          }
          groupBy: {
            args: Prisma.categoriesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.categoriesFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.categoriesAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.categoriesCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoriesCountAggregateOutputType> | number
          }
        }
      }
      products: {
        payload: Prisma.$productsPayload<ExtArgs>
        fields: Prisma.productsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findFirst: {
            args: Prisma.productsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          findMany: {
            args: Prisma.productsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>[]
          }
          create: {
            args: Prisma.productsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          createMany: {
            args: Prisma.productsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          update: {
            args: Prisma.productsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          deleteMany: {
            args: Prisma.productsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productsPayload>
          }
          aggregate: {
            args: Prisma.ProductsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProducts>
          }
          groupBy: {
            args: Prisma.productsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.productsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.productsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.productsCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductsCountAggregateOutputType> | number
          }
        }
      }
      productPictures: {
        payload: Prisma.$productPicturesPayload<ExtArgs>
        fields: Prisma.productPicturesFieldRefs
        operations: {
          findUnique: {
            args: Prisma.productPicturesFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPicturesPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.productPicturesFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPicturesPayload>
          }
          findFirst: {
            args: Prisma.productPicturesFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPicturesPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.productPicturesFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPicturesPayload>
          }
          findMany: {
            args: Prisma.productPicturesFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPicturesPayload>[]
          }
          create: {
            args: Prisma.productPicturesCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPicturesPayload>
          }
          createMany: {
            args: Prisma.productPicturesCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.productPicturesDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPicturesPayload>
          }
          update: {
            args: Prisma.productPicturesUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPicturesPayload>
          }
          deleteMany: {
            args: Prisma.productPicturesDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.productPicturesUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.productPicturesUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$productPicturesPayload>
          }
          aggregate: {
            args: Prisma.ProductPicturesAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateProductPictures>
          }
          groupBy: {
            args: Prisma.productPicturesGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ProductPicturesGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.productPicturesFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.productPicturesAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.productPicturesCountArgs<ExtArgs>,
            result: $Utils.Optional<ProductPicturesCountAggregateOutputType> | number
          }
        }
      }
      userReceipts: {
        payload: Prisma.$userReceiptsPayload<ExtArgs>
        fields: Prisma.userReceiptsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userReceiptsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userReceiptsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptsPayload>
          }
          findFirst: {
            args: Prisma.userReceiptsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userReceiptsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptsPayload>
          }
          findMany: {
            args: Prisma.userReceiptsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptsPayload>[]
          }
          create: {
            args: Prisma.userReceiptsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptsPayload>
          }
          createMany: {
            args: Prisma.userReceiptsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userReceiptsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptsPayload>
          }
          update: {
            args: Prisma.userReceiptsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptsPayload>
          }
          deleteMany: {
            args: Prisma.userReceiptsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userReceiptsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userReceiptsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptsPayload>
          }
          aggregate: {
            args: Prisma.UserReceiptsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserReceipts>
          }
          groupBy: {
            args: Prisma.userReceiptsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserReceiptsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.userReceiptsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.userReceiptsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.userReceiptsCountArgs<ExtArgs>,
            result: $Utils.Optional<UserReceiptsCountAggregateOutputType> | number
          }
        }
      }
      guestReceipts: {
        payload: Prisma.$guestReceiptsPayload<ExtArgs>
        fields: Prisma.guestReceiptsFieldRefs
        operations: {
          findUnique: {
            args: Prisma.guestReceiptsFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptsPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.guestReceiptsFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptsPayload>
          }
          findFirst: {
            args: Prisma.guestReceiptsFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptsPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.guestReceiptsFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptsPayload>
          }
          findMany: {
            args: Prisma.guestReceiptsFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptsPayload>[]
          }
          create: {
            args: Prisma.guestReceiptsCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptsPayload>
          }
          createMany: {
            args: Prisma.guestReceiptsCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.guestReceiptsDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptsPayload>
          }
          update: {
            args: Prisma.guestReceiptsUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptsPayload>
          }
          deleteMany: {
            args: Prisma.guestReceiptsDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.guestReceiptsUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.guestReceiptsUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptsPayload>
          }
          aggregate: {
            args: Prisma.GuestReceiptsAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGuestReceipts>
          }
          groupBy: {
            args: Prisma.guestReceiptsGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GuestReceiptsGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.guestReceiptsFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.guestReceiptsAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.guestReceiptsCountArgs<ExtArgs>,
            result: $Utils.Optional<GuestReceiptsCountAggregateOutputType> | number
          }
        }
      }
      guestReceiptDetail: {
        payload: Prisma.$guestReceiptDetailPayload<ExtArgs>
        fields: Prisma.guestReceiptDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.guestReceiptDetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.guestReceiptDetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptDetailPayload>
          }
          findFirst: {
            args: Prisma.guestReceiptDetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.guestReceiptDetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptDetailPayload>
          }
          findMany: {
            args: Prisma.guestReceiptDetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptDetailPayload>[]
          }
          create: {
            args: Prisma.guestReceiptDetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptDetailPayload>
          }
          createMany: {
            args: Prisma.guestReceiptDetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.guestReceiptDetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptDetailPayload>
          }
          update: {
            args: Prisma.guestReceiptDetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptDetailPayload>
          }
          deleteMany: {
            args: Prisma.guestReceiptDetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.guestReceiptDetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.guestReceiptDetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$guestReceiptDetailPayload>
          }
          aggregate: {
            args: Prisma.GuestReceiptDetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateGuestReceiptDetail>
          }
          groupBy: {
            args: Prisma.guestReceiptDetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<GuestReceiptDetailGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.guestReceiptDetailFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.guestReceiptDetailAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.guestReceiptDetailCountArgs<ExtArgs>,
            result: $Utils.Optional<GuestReceiptDetailCountAggregateOutputType> | number
          }
        }
      }
      userReceiptDetail: {
        payload: Prisma.$userReceiptDetailPayload<ExtArgs>
        fields: Prisma.userReceiptDetailFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userReceiptDetailFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptDetailPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userReceiptDetailFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptDetailPayload>
          }
          findFirst: {
            args: Prisma.userReceiptDetailFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptDetailPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userReceiptDetailFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptDetailPayload>
          }
          findMany: {
            args: Prisma.userReceiptDetailFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptDetailPayload>[]
          }
          create: {
            args: Prisma.userReceiptDetailCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptDetailPayload>
          }
          createMany: {
            args: Prisma.userReceiptDetailCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userReceiptDetailDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptDetailPayload>
          }
          update: {
            args: Prisma.userReceiptDetailUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptDetailPayload>
          }
          deleteMany: {
            args: Prisma.userReceiptDetailDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userReceiptDetailUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userReceiptDetailUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userReceiptDetailPayload>
          }
          aggregate: {
            args: Prisma.UserReceiptDetailAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserReceiptDetail>
          }
          groupBy: {
            args: Prisma.userReceiptDetailGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserReceiptDetailGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.userReceiptDetailFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.userReceiptDetailAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.userReceiptDetailCountArgs<ExtArgs>,
            result: $Utils.Optional<UserReceiptDetailCountAggregateOutputType> | number
          }
        }
      }
      userOrder: {
        payload: Prisma.$userOrderPayload<ExtArgs>
        fields: Prisma.userOrderFieldRefs
        operations: {
          findUnique: {
            args: Prisma.userOrderFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userOrderPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.userOrderFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userOrderPayload>
          }
          findFirst: {
            args: Prisma.userOrderFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userOrderPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.userOrderFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userOrderPayload>
          }
          findMany: {
            args: Prisma.userOrderFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userOrderPayload>[]
          }
          create: {
            args: Prisma.userOrderCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userOrderPayload>
          }
          createMany: {
            args: Prisma.userOrderCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.userOrderDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userOrderPayload>
          }
          update: {
            args: Prisma.userOrderUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userOrderPayload>
          }
          deleteMany: {
            args: Prisma.userOrderDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.userOrderUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.userOrderUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$userOrderPayload>
          }
          aggregate: {
            args: Prisma.UserOrderAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserOrder>
          }
          groupBy: {
            args: Prisma.userOrderGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserOrderGroupByOutputType>[]
          }
          findRaw: {
            args: Prisma.userOrderFindRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          aggregateRaw: {
            args: Prisma.userOrderAggregateRawArgs<ExtArgs>,
            result: Prisma.JsonObject
          }
          count: {
            args: Prisma.userOrderCountArgs<ExtArgs>,
            result: $Utils.Optional<UserOrderCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $runCommandRaw: {
          args: Prisma.InputJsonObject,
          result: Prisma.JsonObject
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'

  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources

    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string

    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat

    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: Array<LogLevel | LogDefinition>
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UsersCountOutputType
   */

  export type UsersCountOutputType = {
    userReceipts: number
  }

  export type UsersCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    userReceipts?: boolean | UsersCountOutputTypeCountUserReceiptsArgs
  }

  // Custom InputTypes

  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UsersCountOutputType
     */
    select?: UsersCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UsersCountOutputType without action
   */
  export type UsersCountOutputTypeCountUserReceiptsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userReceiptsWhereInput
  }



  /**
   * Count Type CategoriesCountOutputType
   */

  export type CategoriesCountOutputType = {
    products: number
  }

  export type CategoriesCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | CategoriesCountOutputTypeCountProductsArgs
  }

  // Custom InputTypes

  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoriesCountOutputType
     */
    select?: CategoriesCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * CategoriesCountOutputType without action
   */
  export type CategoriesCountOutputTypeCountProductsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
  }



  /**
   * Count Type ProductsCountOutputType
   */

  export type ProductsCountOutputType = {
    productPictures: number
    guestReceiptDetail: number
    userReceiptDetail: number
  }

  export type ProductsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    productPictures?: boolean | ProductsCountOutputTypeCountProductPicturesArgs
    guestReceiptDetail?: boolean | ProductsCountOutputTypeCountGuestReceiptDetailArgs
    userReceiptDetail?: boolean | ProductsCountOutputTypeCountUserReceiptDetailArgs
  }

  // Custom InputTypes

  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProductsCountOutputType
     */
    select?: ProductsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountProductPicturesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productPicturesWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountGuestReceiptDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: guestReceiptDetailWhereInput
  }


  /**
   * ProductsCountOutputType without action
   */
  export type ProductsCountOutputTypeCountUserReceiptDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userReceiptDetailWhereInput
  }



  /**
   * Count Type UserReceiptsCountOutputType
   */

  export type UserReceiptsCountOutputType = {
    userReceiptDetail: number
  }

  export type UserReceiptsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    userReceiptDetail?: boolean | UserReceiptsCountOutputTypeCountUserReceiptDetailArgs
  }

  // Custom InputTypes

  /**
   * UserReceiptsCountOutputType without action
   */
  export type UserReceiptsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserReceiptsCountOutputType
     */
    select?: UserReceiptsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserReceiptsCountOutputType without action
   */
  export type UserReceiptsCountOutputTypeCountUserReceiptDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userReceiptDetailWhereInput
  }



  /**
   * Count Type GuestReceiptsCountOutputType
   */

  export type GuestReceiptsCountOutputType = {
    guestReceiptDetail: number
  }

  export type GuestReceiptsCountOutputTypeSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    guestReceiptDetail?: boolean | GuestReceiptsCountOutputTypeCountGuestReceiptDetailArgs
  }

  // Custom InputTypes

  /**
   * GuestReceiptsCountOutputType without action
   */
  export type GuestReceiptsCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the GuestReceiptsCountOutputType
     */
    select?: GuestReceiptsCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * GuestReceiptsCountOutputType without action
   */
  export type GuestReceiptsCountOutputTypeCountGuestReceiptDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: guestReceiptDetailWhereInput
  }



  /**
   * Models
   */

  /**
   * Model Address
   */





  export type AddressSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    provinceId?: boolean
    provinceName?: boolean
    districtId?: boolean
    districtName?: boolean
    wardCode?: boolean
    wardName?: boolean
    title?: boolean
    id?: boolean
  }, ExtArgs["result"]["address"]>

  export type AddressSelectScalar = {
    provinceId?: boolean
    provinceName?: boolean
    districtId?: boolean
    districtName?: boolean
    wardCode?: boolean
    wardName?: boolean
    title?: boolean
    id?: boolean
  }


  export type $AddressPayload = {
    name: "Address"
    objects: {}
    scalars: {
      provinceId: number
      provinceName: string
      districtId: number
      districtName: string
      wardCode: string
      wardName: string
      title: string
      id: string
    }
    composites: {}
  }


  type AddressGetPayload<S extends boolean | null | undefined | AddressDefaultArgs> = $Result.GetResult<Prisma.$AddressPayload, S>





  /**
   * Fields of the Address model
   */ 
  interface AddressFieldRefs {
    readonly provinceId: FieldRef<"Address", 'Int'>
    readonly provinceName: FieldRef<"Address", 'String'>
    readonly districtId: FieldRef<"Address", 'Int'>
    readonly districtName: FieldRef<"Address", 'String'>
    readonly wardCode: FieldRef<"Address", 'String'>
    readonly wardName: FieldRef<"Address", 'String'>
    readonly title: FieldRef<"Address", 'String'>
    readonly id: FieldRef<"Address", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Address without action
   */
  export type AddressDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Address
     */
    select?: AddressSelect<ExtArgs> | null
  }



  /**
   * Model users
   */

  export type AggregateUsers = {
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  export type UsersMinAggregateOutputType = {
    id: string | null
    email: string | null
    emailConfirm: boolean | null
    userName: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    isActive: boolean | null
    createAt: Date | null
    updateAt: Date | null
    isAdmin: boolean | null
  }

  export type UsersMaxAggregateOutputType = {
    id: string | null
    email: string | null
    emailConfirm: boolean | null
    userName: string | null
    password: string | null
    firstName: string | null
    lastName: string | null
    avatar: string | null
    isActive: boolean | null
    createAt: Date | null
    updateAt: Date | null
    isAdmin: boolean | null
  }

  export type UsersCountAggregateOutputType = {
    id: number
    email: number
    emailConfirm: number
    userName: number
    password: number
    firstName: number
    lastName: number
    avatar: number
    isActive: number
    createAt: number
    updateAt: number
    isAdmin: number
    _all: number
  }


  export type UsersMinAggregateInputType = {
    id?: true
    email?: true
    emailConfirm?: true
    userName?: true
    password?: true
    firstName?: true
    lastName?: true
    avatar?: true
    isActive?: true
    createAt?: true
    updateAt?: true
    isAdmin?: true
  }

  export type UsersMaxAggregateInputType = {
    id?: true
    email?: true
    emailConfirm?: true
    userName?: true
    password?: true
    firstName?: true
    lastName?: true
    avatar?: true
    isActive?: true
    createAt?: true
    updateAt?: true
    isAdmin?: true
  }

  export type UsersCountAggregateInputType = {
    id?: true
    email?: true
    emailConfirm?: true
    userName?: true
    password?: true
    firstName?: true
    lastName?: true
    avatar?: true
    isActive?: true
    createAt?: true
    updateAt?: true
    isAdmin?: true
    _all?: true
  }

  export type UsersAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to aggregate.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned users
    **/
    _count?: true | UsersCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsersMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsersMaxAggregateInputType
  }

  export type GetUsersAggregateType<T extends UsersAggregateArgs> = {
        [P in keyof T & keyof AggregateUsers]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsers[P]>
      : GetScalarType<T[P], AggregateUsers[P]>
  }




  export type usersGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: usersWhereInput
    orderBy?: usersOrderByWithAggregationInput | usersOrderByWithAggregationInput[]
    by: UsersScalarFieldEnum[] | UsersScalarFieldEnum
    having?: usersScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsersCountAggregateInputType | true
    _min?: UsersMinAggregateInputType
    _max?: UsersMaxAggregateInputType
  }

  export type UsersGroupByOutputType = {
    id: string
    email: string
    emailConfirm: boolean
    userName: string
    password: string
    firstName: string
    lastName: string
    avatar: string
    isActive: boolean
    createAt: Date
    updateAt: Date
    isAdmin: boolean
    _count: UsersCountAggregateOutputType | null
    _min: UsersMinAggregateOutputType | null
    _max: UsersMaxAggregateOutputType | null
  }

  type GetUsersGroupByPayload<T extends usersGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsersGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsersGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsersGroupByOutputType[P]>
            : GetScalarType<T[P], UsersGroupByOutputType[P]>
        }
      >
    >


  export type usersSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    emailConfirm?: boolean
    userName?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    isActive?: boolean
    createAt?: boolean
    updateAt?: boolean
    address?: boolean | AddressDefaultArgs<ExtArgs>
    isAdmin?: boolean
    userReceipts?: boolean | users$userReceiptsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["users"]>

  export type usersSelectScalar = {
    id?: boolean
    email?: boolean
    emailConfirm?: boolean
    userName?: boolean
    password?: boolean
    firstName?: boolean
    lastName?: boolean
    avatar?: boolean
    isActive?: boolean
    createAt?: boolean
    updateAt?: boolean
    isAdmin?: boolean
  }

  export type usersInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    userReceipts?: boolean | users$userReceiptsArgs<ExtArgs>
    _count?: boolean | UsersCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $usersPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "users"
    objects: {
      userReceipts: Prisma.$userReceiptsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      email: string
      emailConfirm: boolean
      userName: string
      password: string
      firstName: string
      lastName: string
      avatar: string
      isActive: boolean
      createAt: Date
      updateAt: Date
      isAdmin: boolean
    }, ExtArgs["result"]["users"]>
    composites: {
      address: Prisma.$AddressPayload[]
    }
  }


  type usersGetPayload<S extends boolean | null | undefined | usersDefaultArgs> = $Result.GetResult<Prisma.$usersPayload, S>

  type usersCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<usersFindManyArgs, 'select' | 'include'> & {
      select?: UsersCountAggregateInputType | true
    }

  export interface usersDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['users'], meta: { name: 'users' } }
    /**
     * Find zero or one Users that matches the filter.
     * @param {usersFindUniqueArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends usersFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, usersFindUniqueArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Users that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {usersFindUniqueOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends usersFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends usersFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Users that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindFirstOrThrowArgs} args - Arguments to find a Users
     * @example
     * // Get one Users
     * const users = await prisma.users.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends usersFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.users.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.users.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usersWithIdOnly = await prisma.users.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends usersFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Users.
     * @param {usersCreateArgs} args - Arguments to create a Users.
     * @example
     * // Create one Users
     * const Users = await prisma.users.create({
     *   data: {
     *     // ... data to create a Users
     *   }
     * })
     * 
    **/
    create<T extends usersCreateArgs<ExtArgs>>(
      args: SelectSubset<T, usersCreateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {usersCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const users = await prisma.users.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends usersCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Users.
     * @param {usersDeleteArgs} args - Arguments to delete one Users.
     * @example
     * // Delete one Users
     * const Users = await prisma.users.delete({
     *   where: {
     *     // ... filter to delete one Users
     *   }
     * })
     * 
    **/
    delete<T extends usersDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, usersDeleteArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Users.
     * @param {usersUpdateArgs} args - Arguments to update one Users.
     * @example
     * // Update one Users
     * const users = await prisma.users.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends usersUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {usersDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.users.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends usersDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, usersDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const users = await prisma.users.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends usersUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Users.
     * @param {usersUpsertArgs} args - Arguments to update or create a Users.
     * @example
     * // Update or create a Users
     * const users = await prisma.users.upsert({
     *   create: {
     *     // ... data to create a Users
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Users we want to update
     *   }
     * })
    **/
    upsert<T extends usersUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, usersUpsertArgs<ExtArgs>>
    ): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * @param {usersFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const users = await prisma.users.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: usersFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Users.
     * @param {usersAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const users = await prisma.users.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: usersAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.users.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends usersCountArgs>(
      args?: Subset<T, usersCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsersCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsersAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsersAggregateArgs>(args: Subset<T, UsersAggregateArgs>): Prisma.PrismaPromise<GetUsersAggregateType<T>>

    /**
     * Group by Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usersGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usersGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usersGroupByArgs['orderBy'] }
        : { orderBy?: usersGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usersGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsersGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the users model
   */
  readonly fields: usersFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for users.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usersClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    userReceipts<T extends users$userReceiptsArgs<ExtArgs> = {}>(args?: Subset<T, users$userReceiptsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userReceiptsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the users model
   */ 
  interface usersFieldRefs {
    readonly id: FieldRef<"users", 'String'>
    readonly email: FieldRef<"users", 'String'>
    readonly emailConfirm: FieldRef<"users", 'Boolean'>
    readonly userName: FieldRef<"users", 'String'>
    readonly password: FieldRef<"users", 'String'>
    readonly firstName: FieldRef<"users", 'String'>
    readonly lastName: FieldRef<"users", 'String'>
    readonly avatar: FieldRef<"users", 'String'>
    readonly isActive: FieldRef<"users", 'Boolean'>
    readonly createAt: FieldRef<"users", 'DateTime'>
    readonly updateAt: FieldRef<"users", 'DateTime'>
    readonly isAdmin: FieldRef<"users", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * users findUnique
   */
  export type usersFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findUniqueOrThrow
   */
  export type usersFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users findFirst
   */
  export type usersFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findFirstOrThrow
   */
  export type usersFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of users.
     */
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users findMany
   */
  export type usersFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter, which users to fetch.
     */
    where?: usersWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of users to fetch.
     */
    orderBy?: usersOrderByWithRelationInput | usersOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing users.
     */
    cursor?: usersWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` users.
     */
    skip?: number
    distinct?: UsersScalarFieldEnum | UsersScalarFieldEnum[]
  }


  /**
   * users create
   */
  export type usersCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to create a users.
     */
    data: XOR<usersCreateInput, usersUncheckedCreateInput>
  }


  /**
   * users createMany
   */
  export type usersCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many users.
     */
    data: usersCreateManyInput | usersCreateManyInput[]
  }


  /**
   * users update
   */
  export type usersUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The data needed to update a users.
     */
    data: XOR<usersUpdateInput, usersUncheckedUpdateInput>
    /**
     * Choose, which users to update.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users updateMany
   */
  export type usersUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update users.
     */
    data: XOR<usersUpdateManyMutationInput, usersUncheckedUpdateManyInput>
    /**
     * Filter which users to update
     */
    where?: usersWhereInput
  }


  /**
   * users upsert
   */
  export type usersUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * The filter to search for the users to update in case it exists.
     */
    where: usersWhereUniqueInput
    /**
     * In case the users found by the `where` argument doesn't exist, create a new users with this data.
     */
    create: XOR<usersCreateInput, usersUncheckedCreateInput>
    /**
     * In case the users was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usersUpdateInput, usersUncheckedUpdateInput>
  }


  /**
   * users delete
   */
  export type usersDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
    /**
     * Filter which users to delete.
     */
    where: usersWhereUniqueInput
  }


  /**
   * users deleteMany
   */
  export type usersDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which users to delete
     */
    where?: usersWhereInput
  }


  /**
   * users findRaw
   */
  export type usersFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * users aggregateRaw
   */
  export type usersAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * users.userReceipts
   */
  export type users$userReceiptsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceipts
     */
    select?: userReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptsInclude<ExtArgs> | null
    where?: userReceiptsWhereInput
    orderBy?: userReceiptsOrderByWithRelationInput | userReceiptsOrderByWithRelationInput[]
    cursor?: userReceiptsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserReceiptsScalarFieldEnum | UserReceiptsScalarFieldEnum[]
  }


  /**
   * users without action
   */
  export type usersDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the users
     */
    select?: usersSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: usersInclude<ExtArgs> | null
  }



  /**
   * Model categories
   */

  export type AggregateCategories = {
    _count: CategoriesCountAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  export type CategoriesMinAggregateOutputType = {
    id: string | null
    title: string | null
    active: boolean | null
    avatar: string | null
  }

  export type CategoriesMaxAggregateOutputType = {
    id: string | null
    title: string | null
    active: boolean | null
    avatar: string | null
  }

  export type CategoriesCountAggregateOutputType = {
    id: number
    title: number
    active: number
    avatar: number
    _all: number
  }


  export type CategoriesMinAggregateInputType = {
    id?: true
    title?: true
    active?: true
    avatar?: true
  }

  export type CategoriesMaxAggregateInputType = {
    id?: true
    title?: true
    active?: true
    avatar?: true
  }

  export type CategoriesCountAggregateInputType = {
    id?: true
    title?: true
    active?: true
    avatar?: true
    _all?: true
  }

  export type CategoriesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to aggregate.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned categories
    **/
    _count?: true | CategoriesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriesMaxAggregateInputType
  }

  export type GetCategoriesAggregateType<T extends CategoriesAggregateArgs> = {
        [P in keyof T & keyof AggregateCategories]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategories[P]>
      : GetScalarType<T[P], AggregateCategories[P]>
  }




  export type categoriesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: categoriesWhereInput
    orderBy?: categoriesOrderByWithAggregationInput | categoriesOrderByWithAggregationInput[]
    by: CategoriesScalarFieldEnum[] | CategoriesScalarFieldEnum
    having?: categoriesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriesCountAggregateInputType | true
    _min?: CategoriesMinAggregateInputType
    _max?: CategoriesMaxAggregateInputType
  }

  export type CategoriesGroupByOutputType = {
    id: string
    title: string
    active: boolean
    avatar: string
    _count: CategoriesCountAggregateOutputType | null
    _min: CategoriesMinAggregateOutputType | null
    _max: CategoriesMaxAggregateOutputType | null
  }

  type GetCategoriesGroupByPayload<T extends categoriesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriesGroupByOutputType[P]>
        }
      >
    >


  export type categoriesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    title?: boolean
    active?: boolean
    avatar?: boolean
    products?: boolean | categories$productsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categories"]>

  export type categoriesSelectScalar = {
    id?: boolean
    title?: boolean
    active?: boolean
    avatar?: boolean
  }

  export type categoriesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    products?: boolean | categories$productsArgs<ExtArgs>
    _count?: boolean | CategoriesCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $categoriesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "categories"
    objects: {
      products: Prisma.$productsPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      title: string
      active: boolean
      avatar: string
    }, ExtArgs["result"]["categories"]>
    composites: {}
  }


  type categoriesGetPayload<S extends boolean | null | undefined | categoriesDefaultArgs> = $Result.GetResult<Prisma.$categoriesPayload, S>

  type categoriesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<categoriesFindManyArgs, 'select' | 'include'> & {
      select?: CategoriesCountAggregateInputType | true
    }

  export interface categoriesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['categories'], meta: { name: 'categories' } }
    /**
     * Find zero or one Categories that matches the filter.
     * @param {categoriesFindUniqueArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends categoriesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesFindUniqueArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Categories that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {categoriesFindUniqueOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends categoriesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends categoriesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindFirstArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Categories that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindFirstOrThrowArgs} args - Arguments to find a Categories
     * @example
     * // Get one Categories
     * const categories = await prisma.categories.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends categoriesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.categories.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.categories.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriesWithIdOnly = await prisma.categories.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends categoriesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Categories.
     * @param {categoriesCreateArgs} args - Arguments to create a Categories.
     * @example
     * // Create one Categories
     * const Categories = await prisma.categories.create({
     *   data: {
     *     // ... data to create a Categories
     *   }
     * })
     * 
    **/
    create<T extends categoriesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesCreateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {categoriesCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const categories = await prisma.categories.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends categoriesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categories.
     * @param {categoriesDeleteArgs} args - Arguments to delete one Categories.
     * @example
     * // Delete one Categories
     * const Categories = await prisma.categories.delete({
     *   where: {
     *     // ... filter to delete one Categories
     *   }
     * })
     * 
    **/
    delete<T extends categoriesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesDeleteArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Categories.
     * @param {categoriesUpdateArgs} args - Arguments to update one Categories.
     * @example
     * // Update one Categories
     * const categories = await prisma.categories.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends categoriesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {categoriesDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.categories.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends categoriesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, categoriesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const categories = await prisma.categories.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends categoriesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categories.
     * @param {categoriesUpsertArgs} args - Arguments to update or create a Categories.
     * @example
     * // Update or create a Categories
     * const categories = await prisma.categories.upsert({
     *   create: {
     *     // ... data to create a Categories
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categories we want to update
     *   }
     * })
    **/
    upsert<T extends categoriesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, categoriesUpsertArgs<ExtArgs>>
    ): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * @param {categoriesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const categories = await prisma.categories.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: categoriesFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Categories.
     * @param {categoriesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const categories = await prisma.categories.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: categoriesAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.categories.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends categoriesCountArgs>(
      args?: Subset<T, categoriesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriesAggregateArgs>(args: Subset<T, CategoriesAggregateArgs>): Prisma.PrismaPromise<GetCategoriesAggregateType<T>>

    /**
     * Group by Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {categoriesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends categoriesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: categoriesGroupByArgs['orderBy'] }
        : { orderBy?: categoriesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, categoriesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the categories model
   */
  readonly fields: categoriesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for categories.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__categoriesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    products<T extends categories$productsArgs<ExtArgs> = {}>(args?: Subset<T, categories$productsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the categories model
   */ 
  interface categoriesFieldRefs {
    readonly id: FieldRef<"categories", 'String'>
    readonly title: FieldRef<"categories", 'String'>
    readonly active: FieldRef<"categories", 'Boolean'>
    readonly avatar: FieldRef<"categories", 'String'>
  }
    

  // Custom InputTypes

  /**
   * categories findUnique
   */
  export type categoriesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories findUniqueOrThrow
   */
  export type categoriesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories findFirst
   */
  export type categoriesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * categories findFirstOrThrow
   */
  export type categoriesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of categories.
     */
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * categories findMany
   */
  export type categoriesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter, which categories to fetch.
     */
    where?: categoriesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of categories to fetch.
     */
    orderBy?: categoriesOrderByWithRelationInput | categoriesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing categories.
     */
    cursor?: categoriesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` categories.
     */
    skip?: number
    distinct?: CategoriesScalarFieldEnum | CategoriesScalarFieldEnum[]
  }


  /**
   * categories create
   */
  export type categoriesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to create a categories.
     */
    data: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
  }


  /**
   * categories createMany
   */
  export type categoriesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many categories.
     */
    data: categoriesCreateManyInput | categoriesCreateManyInput[]
  }


  /**
   * categories update
   */
  export type categoriesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The data needed to update a categories.
     */
    data: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
    /**
     * Choose, which categories to update.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories updateMany
   */
  export type categoriesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update categories.
     */
    data: XOR<categoriesUpdateManyMutationInput, categoriesUncheckedUpdateManyInput>
    /**
     * Filter which categories to update
     */
    where?: categoriesWhereInput
  }


  /**
   * categories upsert
   */
  export type categoriesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * The filter to search for the categories to update in case it exists.
     */
    where: categoriesWhereUniqueInput
    /**
     * In case the categories found by the `where` argument doesn't exist, create a new categories with this data.
     */
    create: XOR<categoriesCreateInput, categoriesUncheckedCreateInput>
    /**
     * In case the categories was found with the provided `where` argument, update it with this data.
     */
    update: XOR<categoriesUpdateInput, categoriesUncheckedUpdateInput>
  }


  /**
   * categories delete
   */
  export type categoriesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
    /**
     * Filter which categories to delete.
     */
    where: categoriesWhereUniqueInput
  }


  /**
   * categories deleteMany
   */
  export type categoriesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which categories to delete
     */
    where?: categoriesWhereInput
  }


  /**
   * categories findRaw
   */
  export type categoriesFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * categories aggregateRaw
   */
  export type categoriesAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * categories.products
   */
  export type categories$productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    where?: productsWhereInput
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    cursor?: productsWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * categories without action
   */
  export type categoriesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the categories
     */
    select?: categoriesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: categoriesInclude<ExtArgs> | null
  }



  /**
   * Model products
   */

  export type AggregateProducts = {
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  export type ProductsAvgAggregateOutputType = {
    price: number | null
  }

  export type ProductsSumAggregateOutputType = {
    price: number | null
  }

  export type ProductsMinAggregateOutputType = {
    id: string | null
    name: string | null
    avatar: string | null
    price: number | null
    des: string | null
    categoryId: string | null
  }

  export type ProductsMaxAggregateOutputType = {
    id: string | null
    name: string | null
    avatar: string | null
    price: number | null
    des: string | null
    categoryId: string | null
  }

  export type ProductsCountAggregateOutputType = {
    id: number
    name: number
    avatar: number
    price: number
    des: number
    categoryId: number
    _all: number
  }


  export type ProductsAvgAggregateInputType = {
    price?: true
  }

  export type ProductsSumAggregateInputType = {
    price?: true
  }

  export type ProductsMinAggregateInputType = {
    id?: true
    name?: true
    avatar?: true
    price?: true
    des?: true
    categoryId?: true
  }

  export type ProductsMaxAggregateInputType = {
    id?: true
    name?: true
    avatar?: true
    price?: true
    des?: true
    categoryId?: true
  }

  export type ProductsCountAggregateInputType = {
    id?: true
    name?: true
    avatar?: true
    price?: true
    des?: true
    categoryId?: true
    _all?: true
  }

  export type ProductsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to aggregate.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned products
    **/
    _count?: true | ProductsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProductsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProductsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductsMaxAggregateInputType
  }

  export type GetProductsAggregateType<T extends ProductsAggregateArgs> = {
        [P in keyof T & keyof AggregateProducts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProducts[P]>
      : GetScalarType<T[P], AggregateProducts[P]>
  }




  export type productsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productsWhereInput
    orderBy?: productsOrderByWithAggregationInput | productsOrderByWithAggregationInput[]
    by: ProductsScalarFieldEnum[] | ProductsScalarFieldEnum
    having?: productsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductsCountAggregateInputType | true
    _avg?: ProductsAvgAggregateInputType
    _sum?: ProductsSumAggregateInputType
    _min?: ProductsMinAggregateInputType
    _max?: ProductsMaxAggregateInputType
  }

  export type ProductsGroupByOutputType = {
    id: string
    name: string
    avatar: string
    price: number
    des: string
    categoryId: string
    _count: ProductsCountAggregateOutputType | null
    _avg: ProductsAvgAggregateOutputType | null
    _sum: ProductsSumAggregateOutputType | null
    _min: ProductsMinAggregateOutputType | null
    _max: ProductsMaxAggregateOutputType | null
  }

  type GetProductsGroupByPayload<T extends productsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductsGroupByOutputType[P]>
            : GetScalarType<T[P], ProductsGroupByOutputType[P]>
        }
      >
    >


  export type productsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    avatar?: boolean
    price?: boolean
    des?: boolean
    categoryId?: boolean
    category?: boolean | categoriesDefaultArgs<ExtArgs>
    productPictures?: boolean | products$productPicturesArgs<ExtArgs>
    guestReceiptDetail?: boolean | products$guestReceiptDetailArgs<ExtArgs>
    userReceiptDetail?: boolean | products$userReceiptDetailArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["products"]>

  export type productsSelectScalar = {
    id?: boolean
    name?: boolean
    avatar?: boolean
    price?: boolean
    des?: boolean
    categoryId?: boolean
  }

  export type productsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    category?: boolean | categoriesDefaultArgs<ExtArgs>
    productPictures?: boolean | products$productPicturesArgs<ExtArgs>
    guestReceiptDetail?: boolean | products$guestReceiptDetailArgs<ExtArgs>
    userReceiptDetail?: boolean | products$userReceiptDetailArgs<ExtArgs>
    _count?: boolean | ProductsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $productsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "products"
    objects: {
      category: Prisma.$categoriesPayload<ExtArgs>
      productPictures: Prisma.$productPicturesPayload<ExtArgs>[]
      guestReceiptDetail: Prisma.$guestReceiptDetailPayload<ExtArgs>[]
      userReceiptDetail: Prisma.$userReceiptDetailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      name: string
      avatar: string
      price: number
      des: string
      categoryId: string
    }, ExtArgs["result"]["products"]>
    composites: {}
  }


  type productsGetPayload<S extends boolean | null | undefined | productsDefaultArgs> = $Result.GetResult<Prisma.$productsPayload, S>

  type productsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<productsFindManyArgs, 'select' | 'include'> & {
      select?: ProductsCountAggregateInputType | true
    }

  export interface productsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['products'], meta: { name: 'products' } }
    /**
     * Find zero or one Products that matches the filter.
     * @param {productsFindUniqueArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productsFindUniqueArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Products that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productsFindUniqueOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Products that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindFirstOrThrowArgs} args - Arguments to find a Products
     * @example
     * // Get one Products
     * const products = await prisma.products.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Products
     * const products = await prisma.products.findMany()
     * 
     * // Get first 10 Products
     * const products = await prisma.products.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productsWithIdOnly = await prisma.products.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Products.
     * @param {productsCreateArgs} args - Arguments to create a Products.
     * @example
     * // Create one Products
     * const Products = await prisma.products.create({
     *   data: {
     *     // ... data to create a Products
     *   }
     * })
     * 
    **/
    create<T extends productsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productsCreateArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Products.
     *     @param {productsCreateManyArgs} args - Arguments to create many Products.
     *     @example
     *     // Create many Products
     *     const products = await prisma.products.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Products.
     * @param {productsDeleteArgs} args - Arguments to delete one Products.
     * @example
     * // Delete one Products
     * const Products = await prisma.products.delete({
     *   where: {
     *     // ... filter to delete one Products
     *   }
     * })
     * 
    **/
    delete<T extends productsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productsDeleteArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Products.
     * @param {productsUpdateArgs} args - Arguments to update one Products.
     * @example
     * // Update one Products
     * const products = await prisma.products.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Products.
     * @param {productsDeleteManyArgs} args - Arguments to filter Products to delete.
     * @example
     * // Delete a few Products
     * const { count } = await prisma.products.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Products
     * const products = await prisma.products.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Products.
     * @param {productsUpsertArgs} args - Arguments to update or create a Products.
     * @example
     * // Update or create a Products
     * const products = await prisma.products.upsert({
     *   create: {
     *     // ... data to create a Products
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Products we want to update
     *   }
     * })
    **/
    upsert<T extends productsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productsUpsertArgs<ExtArgs>>
    ): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more Products that matches the filter.
     * @param {productsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const products = await prisma.products.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: productsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a Products.
     * @param {productsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const products = await prisma.products.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: productsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsCountArgs} args - Arguments to filter Products to count.
     * @example
     * // Count the number of Products
     * const count = await prisma.products.count({
     *   where: {
     *     // ... the filter for the Products we want to count
     *   }
     * })
    **/
    count<T extends productsCountArgs>(
      args?: Subset<T, productsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductsAggregateArgs>(args: Subset<T, ProductsAggregateArgs>): Prisma.PrismaPromise<GetProductsAggregateType<T>>

    /**
     * Group by Products.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productsGroupByArgs['orderBy'] }
        : { orderBy?: productsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the products model
   */
  readonly fields: productsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for products.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    category<T extends categoriesDefaultArgs<ExtArgs> = {}>(args?: Subset<T, categoriesDefaultArgs<ExtArgs>>): Prisma__categoriesClient<$Result.GetResult<Prisma.$categoriesPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    productPictures<T extends products$productPicturesArgs<ExtArgs> = {}>(args?: Subset<T, products$productPicturesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPicturesPayload<ExtArgs>, T, 'findMany'> | Null>;

    guestReceiptDetail<T extends products$guestReceiptDetailArgs<ExtArgs> = {}>(args?: Subset<T, products$guestReceiptDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$guestReceiptDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    userReceiptDetail<T extends products$userReceiptDetailArgs<ExtArgs> = {}>(args?: Subset<T, products$userReceiptDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userReceiptDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the products model
   */ 
  interface productsFieldRefs {
    readonly id: FieldRef<"products", 'String'>
    readonly name: FieldRef<"products", 'String'>
    readonly avatar: FieldRef<"products", 'String'>
    readonly price: FieldRef<"products", 'Float'>
    readonly des: FieldRef<"products", 'String'>
    readonly categoryId: FieldRef<"products", 'String'>
  }
    

  // Custom InputTypes

  /**
   * products findUnique
   */
  export type productsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products findUniqueOrThrow
   */
  export type productsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products findFirst
   */
  export type productsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * products findFirstOrThrow
   */
  export type productsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of products.
     */
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * products findMany
   */
  export type productsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter, which products to fetch.
     */
    where?: productsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of products to fetch.
     */
    orderBy?: productsOrderByWithRelationInput | productsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing products.
     */
    cursor?: productsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` products from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` products.
     */
    skip?: number
    distinct?: ProductsScalarFieldEnum | ProductsScalarFieldEnum[]
  }


  /**
   * products create
   */
  export type productsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to create a products.
     */
    data: XOR<productsCreateInput, productsUncheckedCreateInput>
  }


  /**
   * products createMany
   */
  export type productsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many products.
     */
    data: productsCreateManyInput | productsCreateManyInput[]
  }


  /**
   * products update
   */
  export type productsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The data needed to update a products.
     */
    data: XOR<productsUpdateInput, productsUncheckedUpdateInput>
    /**
     * Choose, which products to update.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products updateMany
   */
  export type productsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update products.
     */
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyInput>
    /**
     * Filter which products to update
     */
    where?: productsWhereInput
  }


  /**
   * products upsert
   */
  export type productsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * The filter to search for the products to update in case it exists.
     */
    where: productsWhereUniqueInput
    /**
     * In case the products found by the `where` argument doesn't exist, create a new products with this data.
     */
    create: XOR<productsCreateInput, productsUncheckedCreateInput>
    /**
     * In case the products was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productsUpdateInput, productsUncheckedUpdateInput>
  }


  /**
   * products delete
   */
  export type productsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
    /**
     * Filter which products to delete.
     */
    where: productsWhereUniqueInput
  }


  /**
   * products deleteMany
   */
  export type productsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which products to delete
     */
    where?: productsWhereInput
  }


  /**
   * products findRaw
   */
  export type productsFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * products aggregateRaw
   */
  export type productsAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * products.productPictures
   */
  export type products$productPicturesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productPictures
     */
    select?: productPicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productPicturesInclude<ExtArgs> | null
    where?: productPicturesWhereInput
    orderBy?: productPicturesOrderByWithRelationInput | productPicturesOrderByWithRelationInput[]
    cursor?: productPicturesWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProductPicturesScalarFieldEnum | ProductPicturesScalarFieldEnum[]
  }


  /**
   * products.guestReceiptDetail
   */
  export type products$guestReceiptDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
    where?: guestReceiptDetailWhereInput
    orderBy?: guestReceiptDetailOrderByWithRelationInput | guestReceiptDetailOrderByWithRelationInput[]
    cursor?: guestReceiptDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuestReceiptDetailScalarFieldEnum | GuestReceiptDetailScalarFieldEnum[]
  }


  /**
   * products.userReceiptDetail
   */
  export type products$userReceiptDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
    where?: userReceiptDetailWhereInput
    orderBy?: userReceiptDetailOrderByWithRelationInput | userReceiptDetailOrderByWithRelationInput[]
    cursor?: userReceiptDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserReceiptDetailScalarFieldEnum | UserReceiptDetailScalarFieldEnum[]
  }


  /**
   * products without action
   */
  export type productsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the products
     */
    select?: productsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productsInclude<ExtArgs> | null
  }



  /**
   * Model productPictures
   */

  export type AggregateProductPictures = {
    _count: ProductPicturesCountAggregateOutputType | null
    _min: ProductPicturesMinAggregateOutputType | null
    _max: ProductPicturesMaxAggregateOutputType | null
  }

  export type ProductPicturesMinAggregateOutputType = {
    id: string | null
    path: string | null
    productId: string | null
  }

  export type ProductPicturesMaxAggregateOutputType = {
    id: string | null
    path: string | null
    productId: string | null
  }

  export type ProductPicturesCountAggregateOutputType = {
    id: number
    path: number
    productId: number
    _all: number
  }


  export type ProductPicturesMinAggregateInputType = {
    id?: true
    path?: true
    productId?: true
  }

  export type ProductPicturesMaxAggregateInputType = {
    id?: true
    path?: true
    productId?: true
  }

  export type ProductPicturesCountAggregateInputType = {
    id?: true
    path?: true
    productId?: true
    _all?: true
  }

  export type ProductPicturesAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which productPictures to aggregate.
     */
    where?: productPicturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productPictures to fetch.
     */
    orderBy?: productPicturesOrderByWithRelationInput | productPicturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: productPicturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productPictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productPictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned productPictures
    **/
    _count?: true | ProductPicturesCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProductPicturesMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProductPicturesMaxAggregateInputType
  }

  export type GetProductPicturesAggregateType<T extends ProductPicturesAggregateArgs> = {
        [P in keyof T & keyof AggregateProductPictures]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProductPictures[P]>
      : GetScalarType<T[P], AggregateProductPictures[P]>
  }




  export type productPicturesGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: productPicturesWhereInput
    orderBy?: productPicturesOrderByWithAggregationInput | productPicturesOrderByWithAggregationInput[]
    by: ProductPicturesScalarFieldEnum[] | ProductPicturesScalarFieldEnum
    having?: productPicturesScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProductPicturesCountAggregateInputType | true
    _min?: ProductPicturesMinAggregateInputType
    _max?: ProductPicturesMaxAggregateInputType
  }

  export type ProductPicturesGroupByOutputType = {
    id: string
    path: string
    productId: string
    _count: ProductPicturesCountAggregateOutputType | null
    _min: ProductPicturesMinAggregateOutputType | null
    _max: ProductPicturesMaxAggregateOutputType | null
  }

  type GetProductPicturesGroupByPayload<T extends productPicturesGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProductPicturesGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProductPicturesGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProductPicturesGroupByOutputType[P]>
            : GetScalarType<T[P], ProductPicturesGroupByOutputType[P]>
        }
      >
    >


  export type productPicturesSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    path?: boolean
    productId?: boolean
    product?: boolean | productsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["productPictures"]>

  export type productPicturesSelectScalar = {
    id?: boolean
    path?: boolean
    productId?: boolean
  }

  export type productPicturesInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | productsDefaultArgs<ExtArgs>
  }


  export type $productPicturesPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "productPictures"
    objects: {
      product: Prisma.$productsPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      path: string
      productId: string
    }, ExtArgs["result"]["productPictures"]>
    composites: {}
  }


  type productPicturesGetPayload<S extends boolean | null | undefined | productPicturesDefaultArgs> = $Result.GetResult<Prisma.$productPicturesPayload, S>

  type productPicturesCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<productPicturesFindManyArgs, 'select' | 'include'> & {
      select?: ProductPicturesCountAggregateInputType | true
    }

  export interface productPicturesDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['productPictures'], meta: { name: 'productPictures' } }
    /**
     * Find zero or one ProductPictures that matches the filter.
     * @param {productPicturesFindUniqueArgs} args - Arguments to find a ProductPictures
     * @example
     * // Get one ProductPictures
     * const productPictures = await prisma.productPictures.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends productPicturesFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, productPicturesFindUniqueArgs<ExtArgs>>
    ): Prisma__productPicturesClient<$Result.GetResult<Prisma.$productPicturesPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one ProductPictures that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {productPicturesFindUniqueOrThrowArgs} args - Arguments to find a ProductPictures
     * @example
     * // Get one ProductPictures
     * const productPictures = await prisma.productPictures.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends productPicturesFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productPicturesFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__productPicturesClient<$Result.GetResult<Prisma.$productPicturesPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first ProductPictures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productPicturesFindFirstArgs} args - Arguments to find a ProductPictures
     * @example
     * // Get one ProductPictures
     * const productPictures = await prisma.productPictures.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends productPicturesFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, productPicturesFindFirstArgs<ExtArgs>>
    ): Prisma__productPicturesClient<$Result.GetResult<Prisma.$productPicturesPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first ProductPictures that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productPicturesFindFirstOrThrowArgs} args - Arguments to find a ProductPictures
     * @example
     * // Get one ProductPictures
     * const productPictures = await prisma.productPictures.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends productPicturesFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, productPicturesFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__productPicturesClient<$Result.GetResult<Prisma.$productPicturesPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more ProductPictures that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productPicturesFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProductPictures
     * const productPictures = await prisma.productPictures.findMany()
     * 
     * // Get first 10 ProductPictures
     * const productPictures = await prisma.productPictures.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const productPicturesWithIdOnly = await prisma.productPictures.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends productPicturesFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productPicturesFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$productPicturesPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a ProductPictures.
     * @param {productPicturesCreateArgs} args - Arguments to create a ProductPictures.
     * @example
     * // Create one ProductPictures
     * const ProductPictures = await prisma.productPictures.create({
     *   data: {
     *     // ... data to create a ProductPictures
     *   }
     * })
     * 
    **/
    create<T extends productPicturesCreateArgs<ExtArgs>>(
      args: SelectSubset<T, productPicturesCreateArgs<ExtArgs>>
    ): Prisma__productPicturesClient<$Result.GetResult<Prisma.$productPicturesPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many ProductPictures.
     *     @param {productPicturesCreateManyArgs} args - Arguments to create many ProductPictures.
     *     @example
     *     // Create many ProductPictures
     *     const productPictures = await prisma.productPictures.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends productPicturesCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productPicturesCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProductPictures.
     * @param {productPicturesDeleteArgs} args - Arguments to delete one ProductPictures.
     * @example
     * // Delete one ProductPictures
     * const ProductPictures = await prisma.productPictures.delete({
     *   where: {
     *     // ... filter to delete one ProductPictures
     *   }
     * })
     * 
    **/
    delete<T extends productPicturesDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, productPicturesDeleteArgs<ExtArgs>>
    ): Prisma__productPicturesClient<$Result.GetResult<Prisma.$productPicturesPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one ProductPictures.
     * @param {productPicturesUpdateArgs} args - Arguments to update one ProductPictures.
     * @example
     * // Update one ProductPictures
     * const productPictures = await prisma.productPictures.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends productPicturesUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, productPicturesUpdateArgs<ExtArgs>>
    ): Prisma__productPicturesClient<$Result.GetResult<Prisma.$productPicturesPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more ProductPictures.
     * @param {productPicturesDeleteManyArgs} args - Arguments to filter ProductPictures to delete.
     * @example
     * // Delete a few ProductPictures
     * const { count } = await prisma.productPictures.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends productPicturesDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, productPicturesDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProductPictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productPicturesUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProductPictures
     * const productPictures = await prisma.productPictures.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends productPicturesUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, productPicturesUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProductPictures.
     * @param {productPicturesUpsertArgs} args - Arguments to update or create a ProductPictures.
     * @example
     * // Update or create a ProductPictures
     * const productPictures = await prisma.productPictures.upsert({
     *   create: {
     *     // ... data to create a ProductPictures
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProductPictures we want to update
     *   }
     * })
    **/
    upsert<T extends productPicturesUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, productPicturesUpsertArgs<ExtArgs>>
    ): Prisma__productPicturesClient<$Result.GetResult<Prisma.$productPicturesPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more ProductPictures that matches the filter.
     * @param {productPicturesFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const productPictures = await prisma.productPictures.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: productPicturesFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a ProductPictures.
     * @param {productPicturesAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const productPictures = await prisma.productPictures.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: productPicturesAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of ProductPictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productPicturesCountArgs} args - Arguments to filter ProductPictures to count.
     * @example
     * // Count the number of ProductPictures
     * const count = await prisma.productPictures.count({
     *   where: {
     *     // ... the filter for the ProductPictures we want to count
     *   }
     * })
    **/
    count<T extends productPicturesCountArgs>(
      args?: Subset<T, productPicturesCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProductPicturesCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProductPictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProductPicturesAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProductPicturesAggregateArgs>(args: Subset<T, ProductPicturesAggregateArgs>): Prisma.PrismaPromise<GetProductPicturesAggregateType<T>>

    /**
     * Group by ProductPictures.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {productPicturesGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends productPicturesGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: productPicturesGroupByArgs['orderBy'] }
        : { orderBy?: productPicturesGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, productPicturesGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProductPicturesGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the productPictures model
   */
  readonly fields: productPicturesFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for productPictures.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__productPicturesClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the productPictures model
   */ 
  interface productPicturesFieldRefs {
    readonly id: FieldRef<"productPictures", 'String'>
    readonly path: FieldRef<"productPictures", 'String'>
    readonly productId: FieldRef<"productPictures", 'String'>
  }
    

  // Custom InputTypes

  /**
   * productPictures findUnique
   */
  export type productPicturesFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productPictures
     */
    select?: productPicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productPicturesInclude<ExtArgs> | null
    /**
     * Filter, which productPictures to fetch.
     */
    where: productPicturesWhereUniqueInput
  }


  /**
   * productPictures findUniqueOrThrow
   */
  export type productPicturesFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productPictures
     */
    select?: productPicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productPicturesInclude<ExtArgs> | null
    /**
     * Filter, which productPictures to fetch.
     */
    where: productPicturesWhereUniqueInput
  }


  /**
   * productPictures findFirst
   */
  export type productPicturesFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productPictures
     */
    select?: productPicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productPicturesInclude<ExtArgs> | null
    /**
     * Filter, which productPictures to fetch.
     */
    where?: productPicturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productPictures to fetch.
     */
    orderBy?: productPicturesOrderByWithRelationInput | productPicturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productPictures.
     */
    cursor?: productPicturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productPictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productPictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productPictures.
     */
    distinct?: ProductPicturesScalarFieldEnum | ProductPicturesScalarFieldEnum[]
  }


  /**
   * productPictures findFirstOrThrow
   */
  export type productPicturesFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productPictures
     */
    select?: productPicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productPicturesInclude<ExtArgs> | null
    /**
     * Filter, which productPictures to fetch.
     */
    where?: productPicturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productPictures to fetch.
     */
    orderBy?: productPicturesOrderByWithRelationInput | productPicturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for productPictures.
     */
    cursor?: productPicturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productPictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productPictures.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of productPictures.
     */
    distinct?: ProductPicturesScalarFieldEnum | ProductPicturesScalarFieldEnum[]
  }


  /**
   * productPictures findMany
   */
  export type productPicturesFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productPictures
     */
    select?: productPicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productPicturesInclude<ExtArgs> | null
    /**
     * Filter, which productPictures to fetch.
     */
    where?: productPicturesWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of productPictures to fetch.
     */
    orderBy?: productPicturesOrderByWithRelationInput | productPicturesOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing productPictures.
     */
    cursor?: productPicturesWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` productPictures from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` productPictures.
     */
    skip?: number
    distinct?: ProductPicturesScalarFieldEnum | ProductPicturesScalarFieldEnum[]
  }


  /**
   * productPictures create
   */
  export type productPicturesCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productPictures
     */
    select?: productPicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productPicturesInclude<ExtArgs> | null
    /**
     * The data needed to create a productPictures.
     */
    data: XOR<productPicturesCreateInput, productPicturesUncheckedCreateInput>
  }


  /**
   * productPictures createMany
   */
  export type productPicturesCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many productPictures.
     */
    data: productPicturesCreateManyInput | productPicturesCreateManyInput[]
  }


  /**
   * productPictures update
   */
  export type productPicturesUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productPictures
     */
    select?: productPicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productPicturesInclude<ExtArgs> | null
    /**
     * The data needed to update a productPictures.
     */
    data: XOR<productPicturesUpdateInput, productPicturesUncheckedUpdateInput>
    /**
     * Choose, which productPictures to update.
     */
    where: productPicturesWhereUniqueInput
  }


  /**
   * productPictures updateMany
   */
  export type productPicturesUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update productPictures.
     */
    data: XOR<productPicturesUpdateManyMutationInput, productPicturesUncheckedUpdateManyInput>
    /**
     * Filter which productPictures to update
     */
    where?: productPicturesWhereInput
  }


  /**
   * productPictures upsert
   */
  export type productPicturesUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productPictures
     */
    select?: productPicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productPicturesInclude<ExtArgs> | null
    /**
     * The filter to search for the productPictures to update in case it exists.
     */
    where: productPicturesWhereUniqueInput
    /**
     * In case the productPictures found by the `where` argument doesn't exist, create a new productPictures with this data.
     */
    create: XOR<productPicturesCreateInput, productPicturesUncheckedCreateInput>
    /**
     * In case the productPictures was found with the provided `where` argument, update it with this data.
     */
    update: XOR<productPicturesUpdateInput, productPicturesUncheckedUpdateInput>
  }


  /**
   * productPictures delete
   */
  export type productPicturesDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productPictures
     */
    select?: productPicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productPicturesInclude<ExtArgs> | null
    /**
     * Filter which productPictures to delete.
     */
    where: productPicturesWhereUniqueInput
  }


  /**
   * productPictures deleteMany
   */
  export type productPicturesDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which productPictures to delete
     */
    where?: productPicturesWhereInput
  }


  /**
   * productPictures findRaw
   */
  export type productPicturesFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * productPictures aggregateRaw
   */
  export type productPicturesAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * productPictures without action
   */
  export type productPicturesDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the productPictures
     */
    select?: productPicturesSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: productPicturesInclude<ExtArgs> | null
  }



  /**
   * Model userReceipts
   */

  export type AggregateUserReceipts = {
    _count: UserReceiptsCountAggregateOutputType | null
    _avg: UserReceiptsAvgAggregateOutputType | null
    _sum: UserReceiptsSumAggregateOutputType | null
    _min: UserReceiptsMinAggregateOutputType | null
    _max: UserReceiptsMaxAggregateOutputType | null
  }

  export type UserReceiptsAvgAggregateOutputType = {
    total: number | null
  }

  export type UserReceiptsSumAggregateOutputType = {
    total: number | null
  }

  export type UserReceiptsMinAggregateOutputType = {
    id: string | null
    userId: string | null
    state: $Enums.ReceiptState | null
    createAt: Date | null
    acceptTime: Date | null
    shippingTime: Date | null
    doneTime: Date | null
    total: number | null
    payMode: $Enums.ReceiptPayMode | null
    paid: boolean | null
  }

  export type UserReceiptsMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    state: $Enums.ReceiptState | null
    createAt: Date | null
    acceptTime: Date | null
    shippingTime: Date | null
    doneTime: Date | null
    total: number | null
    payMode: $Enums.ReceiptPayMode | null
    paid: boolean | null
  }

  export type UserReceiptsCountAggregateOutputType = {
    id: number
    userId: number
    state: number
    createAt: number
    acceptTime: number
    shippingTime: number
    doneTime: number
    total: number
    payMode: number
    paid: number
    _all: number
  }


  export type UserReceiptsAvgAggregateInputType = {
    total?: true
  }

  export type UserReceiptsSumAggregateInputType = {
    total?: true
  }

  export type UserReceiptsMinAggregateInputType = {
    id?: true
    userId?: true
    state?: true
    createAt?: true
    acceptTime?: true
    shippingTime?: true
    doneTime?: true
    total?: true
    payMode?: true
    paid?: true
  }

  export type UserReceiptsMaxAggregateInputType = {
    id?: true
    userId?: true
    state?: true
    createAt?: true
    acceptTime?: true
    shippingTime?: true
    doneTime?: true
    total?: true
    payMode?: true
    paid?: true
  }

  export type UserReceiptsCountAggregateInputType = {
    id?: true
    userId?: true
    state?: true
    createAt?: true
    acceptTime?: true
    shippingTime?: true
    doneTime?: true
    total?: true
    payMode?: true
    paid?: true
    _all?: true
  }

  export type UserReceiptsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which userReceipts to aggregate.
     */
    where?: userReceiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userReceipts to fetch.
     */
    orderBy?: userReceiptsOrderByWithRelationInput | userReceiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userReceiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userReceipts
    **/
    _count?: true | UserReceiptsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserReceiptsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserReceiptsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserReceiptsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserReceiptsMaxAggregateInputType
  }

  export type GetUserReceiptsAggregateType<T extends UserReceiptsAggregateArgs> = {
        [P in keyof T & keyof AggregateUserReceipts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserReceipts[P]>
      : GetScalarType<T[P], AggregateUserReceipts[P]>
  }




  export type userReceiptsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userReceiptsWhereInput
    orderBy?: userReceiptsOrderByWithAggregationInput | userReceiptsOrderByWithAggregationInput[]
    by: UserReceiptsScalarFieldEnum[] | UserReceiptsScalarFieldEnum
    having?: userReceiptsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserReceiptsCountAggregateInputType | true
    _avg?: UserReceiptsAvgAggregateInputType
    _sum?: UserReceiptsSumAggregateInputType
    _min?: UserReceiptsMinAggregateInputType
    _max?: UserReceiptsMaxAggregateInputType
  }

  export type UserReceiptsGroupByOutputType = {
    id: string
    userId: string
    state: $Enums.ReceiptState
    createAt: Date
    acceptTime: Date | null
    shippingTime: Date | null
    doneTime: Date | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid: boolean
    _count: UserReceiptsCountAggregateOutputType | null
    _avg: UserReceiptsAvgAggregateOutputType | null
    _sum: UserReceiptsSumAggregateOutputType | null
    _min: UserReceiptsMinAggregateOutputType | null
    _max: UserReceiptsMaxAggregateOutputType | null
  }

  type GetUserReceiptsGroupByPayload<T extends userReceiptsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserReceiptsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserReceiptsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserReceiptsGroupByOutputType[P]>
            : GetScalarType<T[P], UserReceiptsGroupByOutputType[P]>
        }
      >
    >


  export type userReceiptsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    state?: boolean
    createAt?: boolean
    acceptTime?: boolean
    shippingTime?: boolean
    doneTime?: boolean
    total?: boolean
    payMode?: boolean
    paid?: boolean
    user?: boolean | usersDefaultArgs<ExtArgs>
    userReceiptDetail?: boolean | userReceipts$userReceiptDetailArgs<ExtArgs>
    _count?: boolean | UserReceiptsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReceipts"]>

  export type userReceiptsSelectScalar = {
    id?: boolean
    userId?: boolean
    state?: boolean
    createAt?: boolean
    acceptTime?: boolean
    shippingTime?: boolean
    doneTime?: boolean
    total?: boolean
    payMode?: boolean
    paid?: boolean
  }

  export type userReceiptsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    user?: boolean | usersDefaultArgs<ExtArgs>
    userReceiptDetail?: boolean | userReceipts$userReceiptDetailArgs<ExtArgs>
    _count?: boolean | UserReceiptsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $userReceiptsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "userReceipts"
    objects: {
      user: Prisma.$usersPayload<ExtArgs>
      userReceiptDetail: Prisma.$userReceiptDetailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      userId: string
      state: $Enums.ReceiptState
      createAt: Date
      acceptTime: Date | null
      shippingTime: Date | null
      doneTime: Date | null
      total: number
      payMode: $Enums.ReceiptPayMode
      paid: boolean
    }, ExtArgs["result"]["userReceipts"]>
    composites: {}
  }


  type userReceiptsGetPayload<S extends boolean | null | undefined | userReceiptsDefaultArgs> = $Result.GetResult<Prisma.$userReceiptsPayload, S>

  type userReceiptsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<userReceiptsFindManyArgs, 'select' | 'include'> & {
      select?: UserReceiptsCountAggregateInputType | true
    }

  export interface userReceiptsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userReceipts'], meta: { name: 'userReceipts' } }
    /**
     * Find zero or one UserReceipts that matches the filter.
     * @param {userReceiptsFindUniqueArgs} args - Arguments to find a UserReceipts
     * @example
     * // Get one UserReceipts
     * const userReceipts = await prisma.userReceipts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userReceiptsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptsFindUniqueArgs<ExtArgs>>
    ): Prisma__userReceiptsClient<$Result.GetResult<Prisma.$userReceiptsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserReceipts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userReceiptsFindUniqueOrThrowArgs} args - Arguments to find a UserReceipts
     * @example
     * // Get one UserReceipts
     * const userReceipts = await prisma.userReceipts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userReceiptsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userReceiptsClient<$Result.GetResult<Prisma.$userReceiptsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserReceipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptsFindFirstArgs} args - Arguments to find a UserReceipts
     * @example
     * // Get one UserReceipts
     * const userReceipts = await prisma.userReceipts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userReceiptsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptsFindFirstArgs<ExtArgs>>
    ): Prisma__userReceiptsClient<$Result.GetResult<Prisma.$userReceiptsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserReceipts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptsFindFirstOrThrowArgs} args - Arguments to find a UserReceipts
     * @example
     * // Get one UserReceipts
     * const userReceipts = await prisma.userReceipts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userReceiptsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userReceiptsClient<$Result.GetResult<Prisma.$userReceiptsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserReceipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserReceipts
     * const userReceipts = await prisma.userReceipts.findMany()
     * 
     * // Get first 10 UserReceipts
     * const userReceipts = await prisma.userReceipts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userReceiptsWithIdOnly = await prisma.userReceipts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userReceiptsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userReceiptsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserReceipts.
     * @param {userReceiptsCreateArgs} args - Arguments to create a UserReceipts.
     * @example
     * // Create one UserReceipts
     * const UserReceipts = await prisma.userReceipts.create({
     *   data: {
     *     // ... data to create a UserReceipts
     *   }
     * })
     * 
    **/
    create<T extends userReceiptsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptsCreateArgs<ExtArgs>>
    ): Prisma__userReceiptsClient<$Result.GetResult<Prisma.$userReceiptsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserReceipts.
     *     @param {userReceiptsCreateManyArgs} args - Arguments to create many UserReceipts.
     *     @example
     *     // Create many UserReceipts
     *     const userReceipts = await prisma.userReceipts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userReceiptsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserReceipts.
     * @param {userReceiptsDeleteArgs} args - Arguments to delete one UserReceipts.
     * @example
     * // Delete one UserReceipts
     * const UserReceipts = await prisma.userReceipts.delete({
     *   where: {
     *     // ... filter to delete one UserReceipts
     *   }
     * })
     * 
    **/
    delete<T extends userReceiptsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptsDeleteArgs<ExtArgs>>
    ): Prisma__userReceiptsClient<$Result.GetResult<Prisma.$userReceiptsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserReceipts.
     * @param {userReceiptsUpdateArgs} args - Arguments to update one UserReceipts.
     * @example
     * // Update one UserReceipts
     * const userReceipts = await prisma.userReceipts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userReceiptsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptsUpdateArgs<ExtArgs>>
    ): Prisma__userReceiptsClient<$Result.GetResult<Prisma.$userReceiptsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserReceipts.
     * @param {userReceiptsDeleteManyArgs} args - Arguments to filter UserReceipts to delete.
     * @example
     * // Delete a few UserReceipts
     * const { count } = await prisma.userReceipts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userReceiptsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserReceipts
     * const userReceipts = await prisma.userReceipts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userReceiptsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserReceipts.
     * @param {userReceiptsUpsertArgs} args - Arguments to update or create a UserReceipts.
     * @example
     * // Update or create a UserReceipts
     * const userReceipts = await prisma.userReceipts.upsert({
     *   create: {
     *     // ... data to create a UserReceipts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserReceipts we want to update
     *   }
     * })
    **/
    upsert<T extends userReceiptsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptsUpsertArgs<ExtArgs>>
    ): Prisma__userReceiptsClient<$Result.GetResult<Prisma.$userReceiptsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more UserReceipts that matches the filter.
     * @param {userReceiptsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const userReceipts = await prisma.userReceipts.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: userReceiptsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UserReceipts.
     * @param {userReceiptsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const userReceipts = await prisma.userReceipts.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: userReceiptsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of UserReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptsCountArgs} args - Arguments to filter UserReceipts to count.
     * @example
     * // Count the number of UserReceipts
     * const count = await prisma.userReceipts.count({
     *   where: {
     *     // ... the filter for the UserReceipts we want to count
     *   }
     * })
    **/
    count<T extends userReceiptsCountArgs>(
      args?: Subset<T, userReceiptsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserReceiptsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReceiptsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserReceiptsAggregateArgs>(args: Subset<T, UserReceiptsAggregateArgs>): Prisma.PrismaPromise<GetUserReceiptsAggregateType<T>>

    /**
     * Group by UserReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userReceiptsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userReceiptsGroupByArgs['orderBy'] }
        : { orderBy?: userReceiptsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userReceiptsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserReceiptsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userReceipts model
   */
  readonly fields: userReceiptsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userReceipts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userReceiptsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends usersDefaultArgs<ExtArgs> = {}>(args?: Subset<T, usersDefaultArgs<ExtArgs>>): Prisma__usersClient<$Result.GetResult<Prisma.$usersPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    userReceiptDetail<T extends userReceipts$userReceiptDetailArgs<ExtArgs> = {}>(args?: Subset<T, userReceipts$userReceiptDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userReceiptDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the userReceipts model
   */ 
  interface userReceiptsFieldRefs {
    readonly id: FieldRef<"userReceipts", 'String'>
    readonly userId: FieldRef<"userReceipts", 'String'>
    readonly state: FieldRef<"userReceipts", 'ReceiptState'>
    readonly createAt: FieldRef<"userReceipts", 'DateTime'>
    readonly acceptTime: FieldRef<"userReceipts", 'DateTime'>
    readonly shippingTime: FieldRef<"userReceipts", 'DateTime'>
    readonly doneTime: FieldRef<"userReceipts", 'DateTime'>
    readonly total: FieldRef<"userReceipts", 'Float'>
    readonly payMode: FieldRef<"userReceipts", 'ReceiptPayMode'>
    readonly paid: FieldRef<"userReceipts", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * userReceipts findUnique
   */
  export type userReceiptsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceipts
     */
    select?: userReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptsInclude<ExtArgs> | null
    /**
     * Filter, which userReceipts to fetch.
     */
    where: userReceiptsWhereUniqueInput
  }


  /**
   * userReceipts findUniqueOrThrow
   */
  export type userReceiptsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceipts
     */
    select?: userReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptsInclude<ExtArgs> | null
    /**
     * Filter, which userReceipts to fetch.
     */
    where: userReceiptsWhereUniqueInput
  }


  /**
   * userReceipts findFirst
   */
  export type userReceiptsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceipts
     */
    select?: userReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptsInclude<ExtArgs> | null
    /**
     * Filter, which userReceipts to fetch.
     */
    where?: userReceiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userReceipts to fetch.
     */
    orderBy?: userReceiptsOrderByWithRelationInput | userReceiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userReceipts.
     */
    cursor?: userReceiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userReceipts.
     */
    distinct?: UserReceiptsScalarFieldEnum | UserReceiptsScalarFieldEnum[]
  }


  /**
   * userReceipts findFirstOrThrow
   */
  export type userReceiptsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceipts
     */
    select?: userReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptsInclude<ExtArgs> | null
    /**
     * Filter, which userReceipts to fetch.
     */
    where?: userReceiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userReceipts to fetch.
     */
    orderBy?: userReceiptsOrderByWithRelationInput | userReceiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userReceipts.
     */
    cursor?: userReceiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userReceipts.
     */
    distinct?: UserReceiptsScalarFieldEnum | UserReceiptsScalarFieldEnum[]
  }


  /**
   * userReceipts findMany
   */
  export type userReceiptsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceipts
     */
    select?: userReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptsInclude<ExtArgs> | null
    /**
     * Filter, which userReceipts to fetch.
     */
    where?: userReceiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userReceipts to fetch.
     */
    orderBy?: userReceiptsOrderByWithRelationInput | userReceiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userReceipts.
     */
    cursor?: userReceiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userReceipts.
     */
    skip?: number
    distinct?: UserReceiptsScalarFieldEnum | UserReceiptsScalarFieldEnum[]
  }


  /**
   * userReceipts create
   */
  export type userReceiptsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceipts
     */
    select?: userReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptsInclude<ExtArgs> | null
    /**
     * The data needed to create a userReceipts.
     */
    data: XOR<userReceiptsCreateInput, userReceiptsUncheckedCreateInput>
  }


  /**
   * userReceipts createMany
   */
  export type userReceiptsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userReceipts.
     */
    data: userReceiptsCreateManyInput | userReceiptsCreateManyInput[]
  }


  /**
   * userReceipts update
   */
  export type userReceiptsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceipts
     */
    select?: userReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptsInclude<ExtArgs> | null
    /**
     * The data needed to update a userReceipts.
     */
    data: XOR<userReceiptsUpdateInput, userReceiptsUncheckedUpdateInput>
    /**
     * Choose, which userReceipts to update.
     */
    where: userReceiptsWhereUniqueInput
  }


  /**
   * userReceipts updateMany
   */
  export type userReceiptsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userReceipts.
     */
    data: XOR<userReceiptsUpdateManyMutationInput, userReceiptsUncheckedUpdateManyInput>
    /**
     * Filter which userReceipts to update
     */
    where?: userReceiptsWhereInput
  }


  /**
   * userReceipts upsert
   */
  export type userReceiptsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceipts
     */
    select?: userReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptsInclude<ExtArgs> | null
    /**
     * The filter to search for the userReceipts to update in case it exists.
     */
    where: userReceiptsWhereUniqueInput
    /**
     * In case the userReceipts found by the `where` argument doesn't exist, create a new userReceipts with this data.
     */
    create: XOR<userReceiptsCreateInput, userReceiptsUncheckedCreateInput>
    /**
     * In case the userReceipts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userReceiptsUpdateInput, userReceiptsUncheckedUpdateInput>
  }


  /**
   * userReceipts delete
   */
  export type userReceiptsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceipts
     */
    select?: userReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptsInclude<ExtArgs> | null
    /**
     * Filter which userReceipts to delete.
     */
    where: userReceiptsWhereUniqueInput
  }


  /**
   * userReceipts deleteMany
   */
  export type userReceiptsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which userReceipts to delete
     */
    where?: userReceiptsWhereInput
  }


  /**
   * userReceipts findRaw
   */
  export type userReceiptsFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * userReceipts aggregateRaw
   */
  export type userReceiptsAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * userReceipts.userReceiptDetail
   */
  export type userReceipts$userReceiptDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
    where?: userReceiptDetailWhereInput
    orderBy?: userReceiptDetailOrderByWithRelationInput | userReceiptDetailOrderByWithRelationInput[]
    cursor?: userReceiptDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserReceiptDetailScalarFieldEnum | UserReceiptDetailScalarFieldEnum[]
  }


  /**
   * userReceipts without action
   */
  export type userReceiptsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceipts
     */
    select?: userReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptsInclude<ExtArgs> | null
  }



  /**
   * Model guestReceipts
   */

  export type AggregateGuestReceipts = {
    _count: GuestReceiptsCountAggregateOutputType | null
    _avg: GuestReceiptsAvgAggregateOutputType | null
    _sum: GuestReceiptsSumAggregateOutputType | null
    _min: GuestReceiptsMinAggregateOutputType | null
    _max: GuestReceiptsMaxAggregateOutputType | null
  }

  export type GuestReceiptsAvgAggregateOutputType = {
    total: number | null
  }

  export type GuestReceiptsSumAggregateOutputType = {
    total: number | null
  }

  export type GuestReceiptsMinAggregateOutputType = {
    id: string | null
    email: string | null
    phoneNumber: string | null
    state: $Enums.ReceiptState | null
    createAt: Date | null
    acceptTime: Date | null
    shippingTime: Date | null
    doneTime: Date | null
    total: number | null
    payMode: $Enums.ReceiptPayMode | null
    paid: boolean | null
  }

  export type GuestReceiptsMaxAggregateOutputType = {
    id: string | null
    email: string | null
    phoneNumber: string | null
    state: $Enums.ReceiptState | null
    createAt: Date | null
    acceptTime: Date | null
    shippingTime: Date | null
    doneTime: Date | null
    total: number | null
    payMode: $Enums.ReceiptPayMode | null
    paid: boolean | null
  }

  export type GuestReceiptsCountAggregateOutputType = {
    id: number
    email: number
    phoneNumber: number
    state: number
    createAt: number
    acceptTime: number
    shippingTime: number
    doneTime: number
    total: number
    payMode: number
    paid: number
    _all: number
  }


  export type GuestReceiptsAvgAggregateInputType = {
    total?: true
  }

  export type GuestReceiptsSumAggregateInputType = {
    total?: true
  }

  export type GuestReceiptsMinAggregateInputType = {
    id?: true
    email?: true
    phoneNumber?: true
    state?: true
    createAt?: true
    acceptTime?: true
    shippingTime?: true
    doneTime?: true
    total?: true
    payMode?: true
    paid?: true
  }

  export type GuestReceiptsMaxAggregateInputType = {
    id?: true
    email?: true
    phoneNumber?: true
    state?: true
    createAt?: true
    acceptTime?: true
    shippingTime?: true
    doneTime?: true
    total?: true
    payMode?: true
    paid?: true
  }

  export type GuestReceiptsCountAggregateInputType = {
    id?: true
    email?: true
    phoneNumber?: true
    state?: true
    createAt?: true
    acceptTime?: true
    shippingTime?: true
    doneTime?: true
    total?: true
    payMode?: true
    paid?: true
    _all?: true
  }

  export type GuestReceiptsAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which guestReceipts to aggregate.
     */
    where?: guestReceiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guestReceipts to fetch.
     */
    orderBy?: guestReceiptsOrderByWithRelationInput | guestReceiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: guestReceiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guestReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guestReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned guestReceipts
    **/
    _count?: true | GuestReceiptsCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GuestReceiptsAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GuestReceiptsSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuestReceiptsMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuestReceiptsMaxAggregateInputType
  }

  export type GetGuestReceiptsAggregateType<T extends GuestReceiptsAggregateArgs> = {
        [P in keyof T & keyof AggregateGuestReceipts]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuestReceipts[P]>
      : GetScalarType<T[P], AggregateGuestReceipts[P]>
  }




  export type guestReceiptsGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: guestReceiptsWhereInput
    orderBy?: guestReceiptsOrderByWithAggregationInput | guestReceiptsOrderByWithAggregationInput[]
    by: GuestReceiptsScalarFieldEnum[] | GuestReceiptsScalarFieldEnum
    having?: guestReceiptsScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuestReceiptsCountAggregateInputType | true
    _avg?: GuestReceiptsAvgAggregateInputType
    _sum?: GuestReceiptsSumAggregateInputType
    _min?: GuestReceiptsMinAggregateInputType
    _max?: GuestReceiptsMaxAggregateInputType
  }

  export type GuestReceiptsGroupByOutputType = {
    id: string
    email: string
    phoneNumber: string
    state: $Enums.ReceiptState
    createAt: Date
    acceptTime: Date | null
    shippingTime: Date | null
    doneTime: Date | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid: boolean
    _count: GuestReceiptsCountAggregateOutputType | null
    _avg: GuestReceiptsAvgAggregateOutputType | null
    _sum: GuestReceiptsSumAggregateOutputType | null
    _min: GuestReceiptsMinAggregateOutputType | null
    _max: GuestReceiptsMaxAggregateOutputType | null
  }

  type GetGuestReceiptsGroupByPayload<T extends guestReceiptsGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuestReceiptsGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuestReceiptsGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuestReceiptsGroupByOutputType[P]>
            : GetScalarType<T[P], GuestReceiptsGroupByOutputType[P]>
        }
      >
    >


  export type guestReceiptsSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    email?: boolean
    phoneNumber?: boolean
    state?: boolean
    createAt?: boolean
    acceptTime?: boolean
    shippingTime?: boolean
    doneTime?: boolean
    total?: boolean
    payMode?: boolean
    paid?: boolean
    guestReceiptDetail?: boolean | guestReceipts$guestReceiptDetailArgs<ExtArgs>
    _count?: boolean | GuestReceiptsCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["guestReceipts"]>

  export type guestReceiptsSelectScalar = {
    id?: boolean
    email?: boolean
    phoneNumber?: boolean
    state?: boolean
    createAt?: boolean
    acceptTime?: boolean
    shippingTime?: boolean
    doneTime?: boolean
    total?: boolean
    payMode?: boolean
    paid?: boolean
  }

  export type guestReceiptsInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    guestReceiptDetail?: boolean | guestReceipts$guestReceiptDetailArgs<ExtArgs>
    _count?: boolean | GuestReceiptsCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $guestReceiptsPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "guestReceipts"
    objects: {
      guestReceiptDetail: Prisma.$guestReceiptDetailPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetResult<{
      id: string
      email: string
      phoneNumber: string
      state: $Enums.ReceiptState
      createAt: Date
      acceptTime: Date | null
      shippingTime: Date | null
      doneTime: Date | null
      total: number
      payMode: $Enums.ReceiptPayMode
      paid: boolean
    }, ExtArgs["result"]["guestReceipts"]>
    composites: {}
  }


  type guestReceiptsGetPayload<S extends boolean | null | undefined | guestReceiptsDefaultArgs> = $Result.GetResult<Prisma.$guestReceiptsPayload, S>

  type guestReceiptsCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<guestReceiptsFindManyArgs, 'select' | 'include'> & {
      select?: GuestReceiptsCountAggregateInputType | true
    }

  export interface guestReceiptsDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['guestReceipts'], meta: { name: 'guestReceipts' } }
    /**
     * Find zero or one GuestReceipts that matches the filter.
     * @param {guestReceiptsFindUniqueArgs} args - Arguments to find a GuestReceipts
     * @example
     * // Get one GuestReceipts
     * const guestReceipts = await prisma.guestReceipts.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends guestReceiptsFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptsFindUniqueArgs<ExtArgs>>
    ): Prisma__guestReceiptsClient<$Result.GetResult<Prisma.$guestReceiptsPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GuestReceipts that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {guestReceiptsFindUniqueOrThrowArgs} args - Arguments to find a GuestReceipts
     * @example
     * // Get one GuestReceipts
     * const guestReceipts = await prisma.guestReceipts.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends guestReceiptsFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptsFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__guestReceiptsClient<$Result.GetResult<Prisma.$guestReceiptsPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GuestReceipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptsFindFirstArgs} args - Arguments to find a GuestReceipts
     * @example
     * // Get one GuestReceipts
     * const guestReceipts = await prisma.guestReceipts.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends guestReceiptsFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptsFindFirstArgs<ExtArgs>>
    ): Prisma__guestReceiptsClient<$Result.GetResult<Prisma.$guestReceiptsPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GuestReceipts that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptsFindFirstOrThrowArgs} args - Arguments to find a GuestReceipts
     * @example
     * // Get one GuestReceipts
     * const guestReceipts = await prisma.guestReceipts.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends guestReceiptsFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptsFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__guestReceiptsClient<$Result.GetResult<Prisma.$guestReceiptsPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GuestReceipts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptsFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GuestReceipts
     * const guestReceipts = await prisma.guestReceipts.findMany()
     * 
     * // Get first 10 GuestReceipts
     * const guestReceipts = await prisma.guestReceipts.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guestReceiptsWithIdOnly = await prisma.guestReceipts.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends guestReceiptsFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptsFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$guestReceiptsPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GuestReceipts.
     * @param {guestReceiptsCreateArgs} args - Arguments to create a GuestReceipts.
     * @example
     * // Create one GuestReceipts
     * const GuestReceipts = await prisma.guestReceipts.create({
     *   data: {
     *     // ... data to create a GuestReceipts
     *   }
     * })
     * 
    **/
    create<T extends guestReceiptsCreateArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptsCreateArgs<ExtArgs>>
    ): Prisma__guestReceiptsClient<$Result.GetResult<Prisma.$guestReceiptsPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GuestReceipts.
     *     @param {guestReceiptsCreateManyArgs} args - Arguments to create many GuestReceipts.
     *     @example
     *     // Create many GuestReceipts
     *     const guestReceipts = await prisma.guestReceipts.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends guestReceiptsCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptsCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GuestReceipts.
     * @param {guestReceiptsDeleteArgs} args - Arguments to delete one GuestReceipts.
     * @example
     * // Delete one GuestReceipts
     * const GuestReceipts = await prisma.guestReceipts.delete({
     *   where: {
     *     // ... filter to delete one GuestReceipts
     *   }
     * })
     * 
    **/
    delete<T extends guestReceiptsDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptsDeleteArgs<ExtArgs>>
    ): Prisma__guestReceiptsClient<$Result.GetResult<Prisma.$guestReceiptsPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GuestReceipts.
     * @param {guestReceiptsUpdateArgs} args - Arguments to update one GuestReceipts.
     * @example
     * // Update one GuestReceipts
     * const guestReceipts = await prisma.guestReceipts.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends guestReceiptsUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptsUpdateArgs<ExtArgs>>
    ): Prisma__guestReceiptsClient<$Result.GetResult<Prisma.$guestReceiptsPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GuestReceipts.
     * @param {guestReceiptsDeleteManyArgs} args - Arguments to filter GuestReceipts to delete.
     * @example
     * // Delete a few GuestReceipts
     * const { count } = await prisma.guestReceipts.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends guestReceiptsDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptsDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GuestReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptsUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GuestReceipts
     * const guestReceipts = await prisma.guestReceipts.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends guestReceiptsUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptsUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GuestReceipts.
     * @param {guestReceiptsUpsertArgs} args - Arguments to update or create a GuestReceipts.
     * @example
     * // Update or create a GuestReceipts
     * const guestReceipts = await prisma.guestReceipts.upsert({
     *   create: {
     *     // ... data to create a GuestReceipts
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GuestReceipts we want to update
     *   }
     * })
    **/
    upsert<T extends guestReceiptsUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptsUpsertArgs<ExtArgs>>
    ): Prisma__guestReceiptsClient<$Result.GetResult<Prisma.$guestReceiptsPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more GuestReceipts that matches the filter.
     * @param {guestReceiptsFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const guestReceipts = await prisma.guestReceipts.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: guestReceiptsFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a GuestReceipts.
     * @param {guestReceiptsAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const guestReceipts = await prisma.guestReceipts.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: guestReceiptsAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of GuestReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptsCountArgs} args - Arguments to filter GuestReceipts to count.
     * @example
     * // Count the number of GuestReceipts
     * const count = await prisma.guestReceipts.count({
     *   where: {
     *     // ... the filter for the GuestReceipts we want to count
     *   }
     * })
    **/
    count<T extends guestReceiptsCountArgs>(
      args?: Subset<T, guestReceiptsCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuestReceiptsCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GuestReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestReceiptsAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuestReceiptsAggregateArgs>(args: Subset<T, GuestReceiptsAggregateArgs>): Prisma.PrismaPromise<GetGuestReceiptsAggregateType<T>>

    /**
     * Group by GuestReceipts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptsGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends guestReceiptsGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: guestReceiptsGroupByArgs['orderBy'] }
        : { orderBy?: guestReceiptsGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, guestReceiptsGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuestReceiptsGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the guestReceipts model
   */
  readonly fields: guestReceiptsFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for guestReceipts.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__guestReceiptsClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    guestReceiptDetail<T extends guestReceipts$guestReceiptDetailArgs<ExtArgs> = {}>(args?: Subset<T, guestReceipts$guestReceiptDetailArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$guestReceiptDetailPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the guestReceipts model
   */ 
  interface guestReceiptsFieldRefs {
    readonly id: FieldRef<"guestReceipts", 'String'>
    readonly email: FieldRef<"guestReceipts", 'String'>
    readonly phoneNumber: FieldRef<"guestReceipts", 'String'>
    readonly state: FieldRef<"guestReceipts", 'ReceiptState'>
    readonly createAt: FieldRef<"guestReceipts", 'DateTime'>
    readonly acceptTime: FieldRef<"guestReceipts", 'DateTime'>
    readonly shippingTime: FieldRef<"guestReceipts", 'DateTime'>
    readonly doneTime: FieldRef<"guestReceipts", 'DateTime'>
    readonly total: FieldRef<"guestReceipts", 'Float'>
    readonly payMode: FieldRef<"guestReceipts", 'ReceiptPayMode'>
    readonly paid: FieldRef<"guestReceipts", 'Boolean'>
  }
    

  // Custom InputTypes

  /**
   * guestReceipts findUnique
   */
  export type guestReceiptsFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceipts
     */
    select?: guestReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptsInclude<ExtArgs> | null
    /**
     * Filter, which guestReceipts to fetch.
     */
    where: guestReceiptsWhereUniqueInput
  }


  /**
   * guestReceipts findUniqueOrThrow
   */
  export type guestReceiptsFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceipts
     */
    select?: guestReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptsInclude<ExtArgs> | null
    /**
     * Filter, which guestReceipts to fetch.
     */
    where: guestReceiptsWhereUniqueInput
  }


  /**
   * guestReceipts findFirst
   */
  export type guestReceiptsFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceipts
     */
    select?: guestReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptsInclude<ExtArgs> | null
    /**
     * Filter, which guestReceipts to fetch.
     */
    where?: guestReceiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guestReceipts to fetch.
     */
    orderBy?: guestReceiptsOrderByWithRelationInput | guestReceiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for guestReceipts.
     */
    cursor?: guestReceiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guestReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guestReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of guestReceipts.
     */
    distinct?: GuestReceiptsScalarFieldEnum | GuestReceiptsScalarFieldEnum[]
  }


  /**
   * guestReceipts findFirstOrThrow
   */
  export type guestReceiptsFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceipts
     */
    select?: guestReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptsInclude<ExtArgs> | null
    /**
     * Filter, which guestReceipts to fetch.
     */
    where?: guestReceiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guestReceipts to fetch.
     */
    orderBy?: guestReceiptsOrderByWithRelationInput | guestReceiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for guestReceipts.
     */
    cursor?: guestReceiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guestReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guestReceipts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of guestReceipts.
     */
    distinct?: GuestReceiptsScalarFieldEnum | GuestReceiptsScalarFieldEnum[]
  }


  /**
   * guestReceipts findMany
   */
  export type guestReceiptsFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceipts
     */
    select?: guestReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptsInclude<ExtArgs> | null
    /**
     * Filter, which guestReceipts to fetch.
     */
    where?: guestReceiptsWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guestReceipts to fetch.
     */
    orderBy?: guestReceiptsOrderByWithRelationInput | guestReceiptsOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing guestReceipts.
     */
    cursor?: guestReceiptsWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guestReceipts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guestReceipts.
     */
    skip?: number
    distinct?: GuestReceiptsScalarFieldEnum | GuestReceiptsScalarFieldEnum[]
  }


  /**
   * guestReceipts create
   */
  export type guestReceiptsCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceipts
     */
    select?: guestReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptsInclude<ExtArgs> | null
    /**
     * The data needed to create a guestReceipts.
     */
    data: XOR<guestReceiptsCreateInput, guestReceiptsUncheckedCreateInput>
  }


  /**
   * guestReceipts createMany
   */
  export type guestReceiptsCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many guestReceipts.
     */
    data: guestReceiptsCreateManyInput | guestReceiptsCreateManyInput[]
  }


  /**
   * guestReceipts update
   */
  export type guestReceiptsUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceipts
     */
    select?: guestReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptsInclude<ExtArgs> | null
    /**
     * The data needed to update a guestReceipts.
     */
    data: XOR<guestReceiptsUpdateInput, guestReceiptsUncheckedUpdateInput>
    /**
     * Choose, which guestReceipts to update.
     */
    where: guestReceiptsWhereUniqueInput
  }


  /**
   * guestReceipts updateMany
   */
  export type guestReceiptsUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update guestReceipts.
     */
    data: XOR<guestReceiptsUpdateManyMutationInput, guestReceiptsUncheckedUpdateManyInput>
    /**
     * Filter which guestReceipts to update
     */
    where?: guestReceiptsWhereInput
  }


  /**
   * guestReceipts upsert
   */
  export type guestReceiptsUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceipts
     */
    select?: guestReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptsInclude<ExtArgs> | null
    /**
     * The filter to search for the guestReceipts to update in case it exists.
     */
    where: guestReceiptsWhereUniqueInput
    /**
     * In case the guestReceipts found by the `where` argument doesn't exist, create a new guestReceipts with this data.
     */
    create: XOR<guestReceiptsCreateInput, guestReceiptsUncheckedCreateInput>
    /**
     * In case the guestReceipts was found with the provided `where` argument, update it with this data.
     */
    update: XOR<guestReceiptsUpdateInput, guestReceiptsUncheckedUpdateInput>
  }


  /**
   * guestReceipts delete
   */
  export type guestReceiptsDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceipts
     */
    select?: guestReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptsInclude<ExtArgs> | null
    /**
     * Filter which guestReceipts to delete.
     */
    where: guestReceiptsWhereUniqueInput
  }


  /**
   * guestReceipts deleteMany
   */
  export type guestReceiptsDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which guestReceipts to delete
     */
    where?: guestReceiptsWhereInput
  }


  /**
   * guestReceipts findRaw
   */
  export type guestReceiptsFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * guestReceipts aggregateRaw
   */
  export type guestReceiptsAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * guestReceipts.guestReceiptDetail
   */
  export type guestReceipts$guestReceiptDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
    where?: guestReceiptDetailWhereInput
    orderBy?: guestReceiptDetailOrderByWithRelationInput | guestReceiptDetailOrderByWithRelationInput[]
    cursor?: guestReceiptDetailWhereUniqueInput
    take?: number
    skip?: number
    distinct?: GuestReceiptDetailScalarFieldEnum | GuestReceiptDetailScalarFieldEnum[]
  }


  /**
   * guestReceipts without action
   */
  export type guestReceiptsDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceipts
     */
    select?: guestReceiptsSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptsInclude<ExtArgs> | null
  }



  /**
   * Model guestReceiptDetail
   */

  export type AggregateGuestReceiptDetail = {
    _count: GuestReceiptDetailCountAggregateOutputType | null
    _avg: GuestReceiptDetailAvgAggregateOutputType | null
    _sum: GuestReceiptDetailSumAggregateOutputType | null
    _min: GuestReceiptDetailMinAggregateOutputType | null
    _max: GuestReceiptDetailMaxAggregateOutputType | null
  }

  export type GuestReceiptDetailAvgAggregateOutputType = {
    quantity: number | null
  }

  export type GuestReceiptDetailSumAggregateOutputType = {
    quantity: number | null
  }

  export type GuestReceiptDetailMinAggregateOutputType = {
    id: string | null
    productId: string | null
    quantity: number | null
    guestReceiptId: string | null
  }

  export type GuestReceiptDetailMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    quantity: number | null
    guestReceiptId: string | null
  }

  export type GuestReceiptDetailCountAggregateOutputType = {
    id: number
    productId: number
    quantity: number
    guestReceiptId: number
    _all: number
  }


  export type GuestReceiptDetailAvgAggregateInputType = {
    quantity?: true
  }

  export type GuestReceiptDetailSumAggregateInputType = {
    quantity?: true
  }

  export type GuestReceiptDetailMinAggregateInputType = {
    id?: true
    productId?: true
    quantity?: true
    guestReceiptId?: true
  }

  export type GuestReceiptDetailMaxAggregateInputType = {
    id?: true
    productId?: true
    quantity?: true
    guestReceiptId?: true
  }

  export type GuestReceiptDetailCountAggregateInputType = {
    id?: true
    productId?: true
    quantity?: true
    guestReceiptId?: true
    _all?: true
  }

  export type GuestReceiptDetailAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which guestReceiptDetail to aggregate.
     */
    where?: guestReceiptDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guestReceiptDetails to fetch.
     */
    orderBy?: guestReceiptDetailOrderByWithRelationInput | guestReceiptDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: guestReceiptDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guestReceiptDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guestReceiptDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned guestReceiptDetails
    **/
    _count?: true | GuestReceiptDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: GuestReceiptDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: GuestReceiptDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: GuestReceiptDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: GuestReceiptDetailMaxAggregateInputType
  }

  export type GetGuestReceiptDetailAggregateType<T extends GuestReceiptDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateGuestReceiptDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateGuestReceiptDetail[P]>
      : GetScalarType<T[P], AggregateGuestReceiptDetail[P]>
  }




  export type guestReceiptDetailGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: guestReceiptDetailWhereInput
    orderBy?: guestReceiptDetailOrderByWithAggregationInput | guestReceiptDetailOrderByWithAggregationInput[]
    by: GuestReceiptDetailScalarFieldEnum[] | GuestReceiptDetailScalarFieldEnum
    having?: guestReceiptDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: GuestReceiptDetailCountAggregateInputType | true
    _avg?: GuestReceiptDetailAvgAggregateInputType
    _sum?: GuestReceiptDetailSumAggregateInputType
    _min?: GuestReceiptDetailMinAggregateInputType
    _max?: GuestReceiptDetailMaxAggregateInputType
  }

  export type GuestReceiptDetailGroupByOutputType = {
    id: string
    productId: string
    quantity: number
    guestReceiptId: string
    _count: GuestReceiptDetailCountAggregateOutputType | null
    _avg: GuestReceiptDetailAvgAggregateOutputType | null
    _sum: GuestReceiptDetailSumAggregateOutputType | null
    _min: GuestReceiptDetailMinAggregateOutputType | null
    _max: GuestReceiptDetailMaxAggregateOutputType | null
  }

  type GetGuestReceiptDetailGroupByPayload<T extends guestReceiptDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<GuestReceiptDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof GuestReceiptDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], GuestReceiptDetailGroupByOutputType[P]>
            : GetScalarType<T[P], GuestReceiptDetailGroupByOutputType[P]>
        }
      >
    >


  export type guestReceiptDetailSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    quantity?: boolean
    guestReceiptId?: boolean
    product?: boolean | productsDefaultArgs<ExtArgs>
    guestReceipt?: boolean | guestReceiptsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["guestReceiptDetail"]>

  export type guestReceiptDetailSelectScalar = {
    id?: boolean
    productId?: boolean
    quantity?: boolean
    guestReceiptId?: boolean
  }

  export type guestReceiptDetailInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | productsDefaultArgs<ExtArgs>
    guestReceipt?: boolean | guestReceiptsDefaultArgs<ExtArgs>
  }


  export type $guestReceiptDetailPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "guestReceiptDetail"
    objects: {
      product: Prisma.$productsPayload<ExtArgs>
      guestReceipt: Prisma.$guestReceiptsPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      productId: string
      quantity: number
      guestReceiptId: string
    }, ExtArgs["result"]["guestReceiptDetail"]>
    composites: {}
  }


  type guestReceiptDetailGetPayload<S extends boolean | null | undefined | guestReceiptDetailDefaultArgs> = $Result.GetResult<Prisma.$guestReceiptDetailPayload, S>

  type guestReceiptDetailCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<guestReceiptDetailFindManyArgs, 'select' | 'include'> & {
      select?: GuestReceiptDetailCountAggregateInputType | true
    }

  export interface guestReceiptDetailDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['guestReceiptDetail'], meta: { name: 'guestReceiptDetail' } }
    /**
     * Find zero or one GuestReceiptDetail that matches the filter.
     * @param {guestReceiptDetailFindUniqueArgs} args - Arguments to find a GuestReceiptDetail
     * @example
     * // Get one GuestReceiptDetail
     * const guestReceiptDetail = await prisma.guestReceiptDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends guestReceiptDetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptDetailFindUniqueArgs<ExtArgs>>
    ): Prisma__guestReceiptDetailClient<$Result.GetResult<Prisma.$guestReceiptDetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one GuestReceiptDetail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {guestReceiptDetailFindUniqueOrThrowArgs} args - Arguments to find a GuestReceiptDetail
     * @example
     * // Get one GuestReceiptDetail
     * const guestReceiptDetail = await prisma.guestReceiptDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends guestReceiptDetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptDetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__guestReceiptDetailClient<$Result.GetResult<Prisma.$guestReceiptDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first GuestReceiptDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptDetailFindFirstArgs} args - Arguments to find a GuestReceiptDetail
     * @example
     * // Get one GuestReceiptDetail
     * const guestReceiptDetail = await prisma.guestReceiptDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends guestReceiptDetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptDetailFindFirstArgs<ExtArgs>>
    ): Prisma__guestReceiptDetailClient<$Result.GetResult<Prisma.$guestReceiptDetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first GuestReceiptDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptDetailFindFirstOrThrowArgs} args - Arguments to find a GuestReceiptDetail
     * @example
     * // Get one GuestReceiptDetail
     * const guestReceiptDetail = await prisma.guestReceiptDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends guestReceiptDetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptDetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__guestReceiptDetailClient<$Result.GetResult<Prisma.$guestReceiptDetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more GuestReceiptDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptDetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all GuestReceiptDetails
     * const guestReceiptDetails = await prisma.guestReceiptDetail.findMany()
     * 
     * // Get first 10 GuestReceiptDetails
     * const guestReceiptDetails = await prisma.guestReceiptDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const guestReceiptDetailWithIdOnly = await prisma.guestReceiptDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends guestReceiptDetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptDetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$guestReceiptDetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a GuestReceiptDetail.
     * @param {guestReceiptDetailCreateArgs} args - Arguments to create a GuestReceiptDetail.
     * @example
     * // Create one GuestReceiptDetail
     * const GuestReceiptDetail = await prisma.guestReceiptDetail.create({
     *   data: {
     *     // ... data to create a GuestReceiptDetail
     *   }
     * })
     * 
    **/
    create<T extends guestReceiptDetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptDetailCreateArgs<ExtArgs>>
    ): Prisma__guestReceiptDetailClient<$Result.GetResult<Prisma.$guestReceiptDetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many GuestReceiptDetails.
     *     @param {guestReceiptDetailCreateManyArgs} args - Arguments to create many GuestReceiptDetails.
     *     @example
     *     // Create many GuestReceiptDetails
     *     const guestReceiptDetail = await prisma.guestReceiptDetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends guestReceiptDetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptDetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a GuestReceiptDetail.
     * @param {guestReceiptDetailDeleteArgs} args - Arguments to delete one GuestReceiptDetail.
     * @example
     * // Delete one GuestReceiptDetail
     * const GuestReceiptDetail = await prisma.guestReceiptDetail.delete({
     *   where: {
     *     // ... filter to delete one GuestReceiptDetail
     *   }
     * })
     * 
    **/
    delete<T extends guestReceiptDetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptDetailDeleteArgs<ExtArgs>>
    ): Prisma__guestReceiptDetailClient<$Result.GetResult<Prisma.$guestReceiptDetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one GuestReceiptDetail.
     * @param {guestReceiptDetailUpdateArgs} args - Arguments to update one GuestReceiptDetail.
     * @example
     * // Update one GuestReceiptDetail
     * const guestReceiptDetail = await prisma.guestReceiptDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends guestReceiptDetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptDetailUpdateArgs<ExtArgs>>
    ): Prisma__guestReceiptDetailClient<$Result.GetResult<Prisma.$guestReceiptDetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more GuestReceiptDetails.
     * @param {guestReceiptDetailDeleteManyArgs} args - Arguments to filter GuestReceiptDetails to delete.
     * @example
     * // Delete a few GuestReceiptDetails
     * const { count } = await prisma.guestReceiptDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends guestReceiptDetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, guestReceiptDetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more GuestReceiptDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many GuestReceiptDetails
     * const guestReceiptDetail = await prisma.guestReceiptDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends guestReceiptDetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptDetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one GuestReceiptDetail.
     * @param {guestReceiptDetailUpsertArgs} args - Arguments to update or create a GuestReceiptDetail.
     * @example
     * // Update or create a GuestReceiptDetail
     * const guestReceiptDetail = await prisma.guestReceiptDetail.upsert({
     *   create: {
     *     // ... data to create a GuestReceiptDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the GuestReceiptDetail we want to update
     *   }
     * })
    **/
    upsert<T extends guestReceiptDetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, guestReceiptDetailUpsertArgs<ExtArgs>>
    ): Prisma__guestReceiptDetailClient<$Result.GetResult<Prisma.$guestReceiptDetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more GuestReceiptDetails that matches the filter.
     * @param {guestReceiptDetailFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const guestReceiptDetail = await prisma.guestReceiptDetail.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: guestReceiptDetailFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a GuestReceiptDetail.
     * @param {guestReceiptDetailAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const guestReceiptDetail = await prisma.guestReceiptDetail.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: guestReceiptDetailAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of GuestReceiptDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptDetailCountArgs} args - Arguments to filter GuestReceiptDetails to count.
     * @example
     * // Count the number of GuestReceiptDetails
     * const count = await prisma.guestReceiptDetail.count({
     *   where: {
     *     // ... the filter for the GuestReceiptDetails we want to count
     *   }
     * })
    **/
    count<T extends guestReceiptDetailCountArgs>(
      args?: Subset<T, guestReceiptDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], GuestReceiptDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a GuestReceiptDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {GuestReceiptDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends GuestReceiptDetailAggregateArgs>(args: Subset<T, GuestReceiptDetailAggregateArgs>): Prisma.PrismaPromise<GetGuestReceiptDetailAggregateType<T>>

    /**
     * Group by GuestReceiptDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {guestReceiptDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends guestReceiptDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: guestReceiptDetailGroupByArgs['orderBy'] }
        : { orderBy?: guestReceiptDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, guestReceiptDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGuestReceiptDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the guestReceiptDetail model
   */
  readonly fields: guestReceiptDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for guestReceiptDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__guestReceiptDetailClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    guestReceipt<T extends guestReceiptsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, guestReceiptsDefaultArgs<ExtArgs>>): Prisma__guestReceiptsClient<$Result.GetResult<Prisma.$guestReceiptsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the guestReceiptDetail model
   */ 
  interface guestReceiptDetailFieldRefs {
    readonly id: FieldRef<"guestReceiptDetail", 'String'>
    readonly productId: FieldRef<"guestReceiptDetail", 'String'>
    readonly quantity: FieldRef<"guestReceiptDetail", 'Int'>
    readonly guestReceiptId: FieldRef<"guestReceiptDetail", 'String'>
  }
    

  // Custom InputTypes

  /**
   * guestReceiptDetail findUnique
   */
  export type guestReceiptDetailFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter, which guestReceiptDetail to fetch.
     */
    where: guestReceiptDetailWhereUniqueInput
  }


  /**
   * guestReceiptDetail findUniqueOrThrow
   */
  export type guestReceiptDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter, which guestReceiptDetail to fetch.
     */
    where: guestReceiptDetailWhereUniqueInput
  }


  /**
   * guestReceiptDetail findFirst
   */
  export type guestReceiptDetailFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter, which guestReceiptDetail to fetch.
     */
    where?: guestReceiptDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guestReceiptDetails to fetch.
     */
    orderBy?: guestReceiptDetailOrderByWithRelationInput | guestReceiptDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for guestReceiptDetails.
     */
    cursor?: guestReceiptDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guestReceiptDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guestReceiptDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of guestReceiptDetails.
     */
    distinct?: GuestReceiptDetailScalarFieldEnum | GuestReceiptDetailScalarFieldEnum[]
  }


  /**
   * guestReceiptDetail findFirstOrThrow
   */
  export type guestReceiptDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter, which guestReceiptDetail to fetch.
     */
    where?: guestReceiptDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guestReceiptDetails to fetch.
     */
    orderBy?: guestReceiptDetailOrderByWithRelationInput | guestReceiptDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for guestReceiptDetails.
     */
    cursor?: guestReceiptDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guestReceiptDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guestReceiptDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of guestReceiptDetails.
     */
    distinct?: GuestReceiptDetailScalarFieldEnum | GuestReceiptDetailScalarFieldEnum[]
  }


  /**
   * guestReceiptDetail findMany
   */
  export type guestReceiptDetailFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter, which guestReceiptDetails to fetch.
     */
    where?: guestReceiptDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of guestReceiptDetails to fetch.
     */
    orderBy?: guestReceiptDetailOrderByWithRelationInput | guestReceiptDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing guestReceiptDetails.
     */
    cursor?: guestReceiptDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` guestReceiptDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` guestReceiptDetails.
     */
    skip?: number
    distinct?: GuestReceiptDetailScalarFieldEnum | GuestReceiptDetailScalarFieldEnum[]
  }


  /**
   * guestReceiptDetail create
   */
  export type guestReceiptDetailCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a guestReceiptDetail.
     */
    data: XOR<guestReceiptDetailCreateInput, guestReceiptDetailUncheckedCreateInput>
  }


  /**
   * guestReceiptDetail createMany
   */
  export type guestReceiptDetailCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many guestReceiptDetails.
     */
    data: guestReceiptDetailCreateManyInput | guestReceiptDetailCreateManyInput[]
  }


  /**
   * guestReceiptDetail update
   */
  export type guestReceiptDetailUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a guestReceiptDetail.
     */
    data: XOR<guestReceiptDetailUpdateInput, guestReceiptDetailUncheckedUpdateInput>
    /**
     * Choose, which guestReceiptDetail to update.
     */
    where: guestReceiptDetailWhereUniqueInput
  }


  /**
   * guestReceiptDetail updateMany
   */
  export type guestReceiptDetailUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update guestReceiptDetails.
     */
    data: XOR<guestReceiptDetailUpdateManyMutationInput, guestReceiptDetailUncheckedUpdateManyInput>
    /**
     * Filter which guestReceiptDetails to update
     */
    where?: guestReceiptDetailWhereInput
  }


  /**
   * guestReceiptDetail upsert
   */
  export type guestReceiptDetailUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the guestReceiptDetail to update in case it exists.
     */
    where: guestReceiptDetailWhereUniqueInput
    /**
     * In case the guestReceiptDetail found by the `where` argument doesn't exist, create a new guestReceiptDetail with this data.
     */
    create: XOR<guestReceiptDetailCreateInput, guestReceiptDetailUncheckedCreateInput>
    /**
     * In case the guestReceiptDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<guestReceiptDetailUpdateInput, guestReceiptDetailUncheckedUpdateInput>
  }


  /**
   * guestReceiptDetail delete
   */
  export type guestReceiptDetailDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter which guestReceiptDetail to delete.
     */
    where: guestReceiptDetailWhereUniqueInput
  }


  /**
   * guestReceiptDetail deleteMany
   */
  export type guestReceiptDetailDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which guestReceiptDetails to delete
     */
    where?: guestReceiptDetailWhereInput
  }


  /**
   * guestReceiptDetail findRaw
   */
  export type guestReceiptDetailFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * guestReceiptDetail aggregateRaw
   */
  export type guestReceiptDetailAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * guestReceiptDetail without action
   */
  export type guestReceiptDetailDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the guestReceiptDetail
     */
    select?: guestReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: guestReceiptDetailInclude<ExtArgs> | null
  }



  /**
   * Model userReceiptDetail
   */

  export type AggregateUserReceiptDetail = {
    _count: UserReceiptDetailCountAggregateOutputType | null
    _avg: UserReceiptDetailAvgAggregateOutputType | null
    _sum: UserReceiptDetailSumAggregateOutputType | null
    _min: UserReceiptDetailMinAggregateOutputType | null
    _max: UserReceiptDetailMaxAggregateOutputType | null
  }

  export type UserReceiptDetailAvgAggregateOutputType = {
    quantity: number | null
  }

  export type UserReceiptDetailSumAggregateOutputType = {
    quantity: number | null
  }

  export type UserReceiptDetailMinAggregateOutputType = {
    id: string | null
    productId: string | null
    quantity: number | null
    userReceiptId: string | null
  }

  export type UserReceiptDetailMaxAggregateOutputType = {
    id: string | null
    productId: string | null
    quantity: number | null
    userReceiptId: string | null
  }

  export type UserReceiptDetailCountAggregateOutputType = {
    id: number
    productId: number
    quantity: number
    userReceiptId: number
    _all: number
  }


  export type UserReceiptDetailAvgAggregateInputType = {
    quantity?: true
  }

  export type UserReceiptDetailSumAggregateInputType = {
    quantity?: true
  }

  export type UserReceiptDetailMinAggregateInputType = {
    id?: true
    productId?: true
    quantity?: true
    userReceiptId?: true
  }

  export type UserReceiptDetailMaxAggregateInputType = {
    id?: true
    productId?: true
    quantity?: true
    userReceiptId?: true
  }

  export type UserReceiptDetailCountAggregateInputType = {
    id?: true
    productId?: true
    quantity?: true
    userReceiptId?: true
    _all?: true
  }

  export type UserReceiptDetailAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which userReceiptDetail to aggregate.
     */
    where?: userReceiptDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userReceiptDetails to fetch.
     */
    orderBy?: userReceiptDetailOrderByWithRelationInput | userReceiptDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userReceiptDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userReceiptDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userReceiptDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userReceiptDetails
    **/
    _count?: true | UserReceiptDetailCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserReceiptDetailAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserReceiptDetailSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserReceiptDetailMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserReceiptDetailMaxAggregateInputType
  }

  export type GetUserReceiptDetailAggregateType<T extends UserReceiptDetailAggregateArgs> = {
        [P in keyof T & keyof AggregateUserReceiptDetail]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserReceiptDetail[P]>
      : GetScalarType<T[P], AggregateUserReceiptDetail[P]>
  }




  export type userReceiptDetailGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userReceiptDetailWhereInput
    orderBy?: userReceiptDetailOrderByWithAggregationInput | userReceiptDetailOrderByWithAggregationInput[]
    by: UserReceiptDetailScalarFieldEnum[] | UserReceiptDetailScalarFieldEnum
    having?: userReceiptDetailScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserReceiptDetailCountAggregateInputType | true
    _avg?: UserReceiptDetailAvgAggregateInputType
    _sum?: UserReceiptDetailSumAggregateInputType
    _min?: UserReceiptDetailMinAggregateInputType
    _max?: UserReceiptDetailMaxAggregateInputType
  }

  export type UserReceiptDetailGroupByOutputType = {
    id: string
    productId: string
    quantity: number
    userReceiptId: string
    _count: UserReceiptDetailCountAggregateOutputType | null
    _avg: UserReceiptDetailAvgAggregateOutputType | null
    _sum: UserReceiptDetailSumAggregateOutputType | null
    _min: UserReceiptDetailMinAggregateOutputType | null
    _max: UserReceiptDetailMaxAggregateOutputType | null
  }

  type GetUserReceiptDetailGroupByPayload<T extends userReceiptDetailGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserReceiptDetailGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserReceiptDetailGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserReceiptDetailGroupByOutputType[P]>
            : GetScalarType<T[P], UserReceiptDetailGroupByOutputType[P]>
        }
      >
    >


  export type userReceiptDetailSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    productId?: boolean
    quantity?: boolean
    userReceiptId?: boolean
    product?: boolean | productsDefaultArgs<ExtArgs>
    userReceipt?: boolean | userReceiptsDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userReceiptDetail"]>

  export type userReceiptDetailSelectScalar = {
    id?: boolean
    productId?: boolean
    quantity?: boolean
    userReceiptId?: boolean
  }

  export type userReceiptDetailInclude<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    product?: boolean | productsDefaultArgs<ExtArgs>
    userReceipt?: boolean | userReceiptsDefaultArgs<ExtArgs>
  }


  export type $userReceiptDetailPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "userReceiptDetail"
    objects: {
      product: Prisma.$productsPayload<ExtArgs>
      userReceipt: Prisma.$userReceiptsPayload<ExtArgs>
    }
    scalars: $Extensions.GetResult<{
      id: string
      productId: string
      quantity: number
      userReceiptId: string
    }, ExtArgs["result"]["userReceiptDetail"]>
    composites: {}
  }


  type userReceiptDetailGetPayload<S extends boolean | null | undefined | userReceiptDetailDefaultArgs> = $Result.GetResult<Prisma.$userReceiptDetailPayload, S>

  type userReceiptDetailCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<userReceiptDetailFindManyArgs, 'select' | 'include'> & {
      select?: UserReceiptDetailCountAggregateInputType | true
    }

  export interface userReceiptDetailDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userReceiptDetail'], meta: { name: 'userReceiptDetail' } }
    /**
     * Find zero or one UserReceiptDetail that matches the filter.
     * @param {userReceiptDetailFindUniqueArgs} args - Arguments to find a UserReceiptDetail
     * @example
     * // Get one UserReceiptDetail
     * const userReceiptDetail = await prisma.userReceiptDetail.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userReceiptDetailFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptDetailFindUniqueArgs<ExtArgs>>
    ): Prisma__userReceiptDetailClient<$Result.GetResult<Prisma.$userReceiptDetailPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserReceiptDetail that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userReceiptDetailFindUniqueOrThrowArgs} args - Arguments to find a UserReceiptDetail
     * @example
     * // Get one UserReceiptDetail
     * const userReceiptDetail = await prisma.userReceiptDetail.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userReceiptDetailFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptDetailFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userReceiptDetailClient<$Result.GetResult<Prisma.$userReceiptDetailPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserReceiptDetail that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptDetailFindFirstArgs} args - Arguments to find a UserReceiptDetail
     * @example
     * // Get one UserReceiptDetail
     * const userReceiptDetail = await prisma.userReceiptDetail.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userReceiptDetailFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptDetailFindFirstArgs<ExtArgs>>
    ): Prisma__userReceiptDetailClient<$Result.GetResult<Prisma.$userReceiptDetailPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserReceiptDetail that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptDetailFindFirstOrThrowArgs} args - Arguments to find a UserReceiptDetail
     * @example
     * // Get one UserReceiptDetail
     * const userReceiptDetail = await prisma.userReceiptDetail.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userReceiptDetailFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptDetailFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userReceiptDetailClient<$Result.GetResult<Prisma.$userReceiptDetailPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserReceiptDetails that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptDetailFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserReceiptDetails
     * const userReceiptDetails = await prisma.userReceiptDetail.findMany()
     * 
     * // Get first 10 UserReceiptDetails
     * const userReceiptDetails = await prisma.userReceiptDetail.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userReceiptDetailWithIdOnly = await prisma.userReceiptDetail.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userReceiptDetailFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptDetailFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userReceiptDetailPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserReceiptDetail.
     * @param {userReceiptDetailCreateArgs} args - Arguments to create a UserReceiptDetail.
     * @example
     * // Create one UserReceiptDetail
     * const UserReceiptDetail = await prisma.userReceiptDetail.create({
     *   data: {
     *     // ... data to create a UserReceiptDetail
     *   }
     * })
     * 
    **/
    create<T extends userReceiptDetailCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptDetailCreateArgs<ExtArgs>>
    ): Prisma__userReceiptDetailClient<$Result.GetResult<Prisma.$userReceiptDetailPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserReceiptDetails.
     *     @param {userReceiptDetailCreateManyArgs} args - Arguments to create many UserReceiptDetails.
     *     @example
     *     // Create many UserReceiptDetails
     *     const userReceiptDetail = await prisma.userReceiptDetail.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userReceiptDetailCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptDetailCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserReceiptDetail.
     * @param {userReceiptDetailDeleteArgs} args - Arguments to delete one UserReceiptDetail.
     * @example
     * // Delete one UserReceiptDetail
     * const UserReceiptDetail = await prisma.userReceiptDetail.delete({
     *   where: {
     *     // ... filter to delete one UserReceiptDetail
     *   }
     * })
     * 
    **/
    delete<T extends userReceiptDetailDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptDetailDeleteArgs<ExtArgs>>
    ): Prisma__userReceiptDetailClient<$Result.GetResult<Prisma.$userReceiptDetailPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserReceiptDetail.
     * @param {userReceiptDetailUpdateArgs} args - Arguments to update one UserReceiptDetail.
     * @example
     * // Update one UserReceiptDetail
     * const userReceiptDetail = await prisma.userReceiptDetail.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userReceiptDetailUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptDetailUpdateArgs<ExtArgs>>
    ): Prisma__userReceiptDetailClient<$Result.GetResult<Prisma.$userReceiptDetailPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserReceiptDetails.
     * @param {userReceiptDetailDeleteManyArgs} args - Arguments to filter UserReceiptDetails to delete.
     * @example
     * // Delete a few UserReceiptDetails
     * const { count } = await prisma.userReceiptDetail.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userReceiptDetailDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userReceiptDetailDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserReceiptDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptDetailUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserReceiptDetails
     * const userReceiptDetail = await prisma.userReceiptDetail.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userReceiptDetailUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptDetailUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserReceiptDetail.
     * @param {userReceiptDetailUpsertArgs} args - Arguments to update or create a UserReceiptDetail.
     * @example
     * // Update or create a UserReceiptDetail
     * const userReceiptDetail = await prisma.userReceiptDetail.upsert({
     *   create: {
     *     // ... data to create a UserReceiptDetail
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserReceiptDetail we want to update
     *   }
     * })
    **/
    upsert<T extends userReceiptDetailUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userReceiptDetailUpsertArgs<ExtArgs>>
    ): Prisma__userReceiptDetailClient<$Result.GetResult<Prisma.$userReceiptDetailPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more UserReceiptDetails that matches the filter.
     * @param {userReceiptDetailFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const userReceiptDetail = await prisma.userReceiptDetail.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: userReceiptDetailFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UserReceiptDetail.
     * @param {userReceiptDetailAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const userReceiptDetail = await prisma.userReceiptDetail.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: userReceiptDetailAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of UserReceiptDetails.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptDetailCountArgs} args - Arguments to filter UserReceiptDetails to count.
     * @example
     * // Count the number of UserReceiptDetails
     * const count = await prisma.userReceiptDetail.count({
     *   where: {
     *     // ... the filter for the UserReceiptDetails we want to count
     *   }
     * })
    **/
    count<T extends userReceiptDetailCountArgs>(
      args?: Subset<T, userReceiptDetailCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserReceiptDetailCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserReceiptDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserReceiptDetailAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserReceiptDetailAggregateArgs>(args: Subset<T, UserReceiptDetailAggregateArgs>): Prisma.PrismaPromise<GetUserReceiptDetailAggregateType<T>>

    /**
     * Group by UserReceiptDetail.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userReceiptDetailGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userReceiptDetailGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userReceiptDetailGroupByArgs['orderBy'] }
        : { orderBy?: userReceiptDetailGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userReceiptDetailGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserReceiptDetailGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userReceiptDetail model
   */
  readonly fields: userReceiptDetailFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userReceiptDetail.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userReceiptDetailClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    product<T extends productsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, productsDefaultArgs<ExtArgs>>): Prisma__productsClient<$Result.GetResult<Prisma.$productsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    userReceipt<T extends userReceiptsDefaultArgs<ExtArgs> = {}>(args?: Subset<T, userReceiptsDefaultArgs<ExtArgs>>): Prisma__userReceiptsClient<$Result.GetResult<Prisma.$userReceiptsPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the userReceiptDetail model
   */ 
  interface userReceiptDetailFieldRefs {
    readonly id: FieldRef<"userReceiptDetail", 'String'>
    readonly productId: FieldRef<"userReceiptDetail", 'String'>
    readonly quantity: FieldRef<"userReceiptDetail", 'Int'>
    readonly userReceiptId: FieldRef<"userReceiptDetail", 'String'>
  }
    

  // Custom InputTypes

  /**
   * userReceiptDetail findUnique
   */
  export type userReceiptDetailFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter, which userReceiptDetail to fetch.
     */
    where: userReceiptDetailWhereUniqueInput
  }


  /**
   * userReceiptDetail findUniqueOrThrow
   */
  export type userReceiptDetailFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter, which userReceiptDetail to fetch.
     */
    where: userReceiptDetailWhereUniqueInput
  }


  /**
   * userReceiptDetail findFirst
   */
  export type userReceiptDetailFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter, which userReceiptDetail to fetch.
     */
    where?: userReceiptDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userReceiptDetails to fetch.
     */
    orderBy?: userReceiptDetailOrderByWithRelationInput | userReceiptDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userReceiptDetails.
     */
    cursor?: userReceiptDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userReceiptDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userReceiptDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userReceiptDetails.
     */
    distinct?: UserReceiptDetailScalarFieldEnum | UserReceiptDetailScalarFieldEnum[]
  }


  /**
   * userReceiptDetail findFirstOrThrow
   */
  export type userReceiptDetailFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter, which userReceiptDetail to fetch.
     */
    where?: userReceiptDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userReceiptDetails to fetch.
     */
    orderBy?: userReceiptDetailOrderByWithRelationInput | userReceiptDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userReceiptDetails.
     */
    cursor?: userReceiptDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userReceiptDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userReceiptDetails.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userReceiptDetails.
     */
    distinct?: UserReceiptDetailScalarFieldEnum | UserReceiptDetailScalarFieldEnum[]
  }


  /**
   * userReceiptDetail findMany
   */
  export type userReceiptDetailFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter, which userReceiptDetails to fetch.
     */
    where?: userReceiptDetailWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userReceiptDetails to fetch.
     */
    orderBy?: userReceiptDetailOrderByWithRelationInput | userReceiptDetailOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userReceiptDetails.
     */
    cursor?: userReceiptDetailWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userReceiptDetails from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userReceiptDetails.
     */
    skip?: number
    distinct?: UserReceiptDetailScalarFieldEnum | UserReceiptDetailScalarFieldEnum[]
  }


  /**
   * userReceiptDetail create
   */
  export type userReceiptDetailCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
    /**
     * The data needed to create a userReceiptDetail.
     */
    data: XOR<userReceiptDetailCreateInput, userReceiptDetailUncheckedCreateInput>
  }


  /**
   * userReceiptDetail createMany
   */
  export type userReceiptDetailCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userReceiptDetails.
     */
    data: userReceiptDetailCreateManyInput | userReceiptDetailCreateManyInput[]
  }


  /**
   * userReceiptDetail update
   */
  export type userReceiptDetailUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
    /**
     * The data needed to update a userReceiptDetail.
     */
    data: XOR<userReceiptDetailUpdateInput, userReceiptDetailUncheckedUpdateInput>
    /**
     * Choose, which userReceiptDetail to update.
     */
    where: userReceiptDetailWhereUniqueInput
  }


  /**
   * userReceiptDetail updateMany
   */
  export type userReceiptDetailUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userReceiptDetails.
     */
    data: XOR<userReceiptDetailUpdateManyMutationInput, userReceiptDetailUncheckedUpdateManyInput>
    /**
     * Filter which userReceiptDetails to update
     */
    where?: userReceiptDetailWhereInput
  }


  /**
   * userReceiptDetail upsert
   */
  export type userReceiptDetailUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
    /**
     * The filter to search for the userReceiptDetail to update in case it exists.
     */
    where: userReceiptDetailWhereUniqueInput
    /**
     * In case the userReceiptDetail found by the `where` argument doesn't exist, create a new userReceiptDetail with this data.
     */
    create: XOR<userReceiptDetailCreateInput, userReceiptDetailUncheckedCreateInput>
    /**
     * In case the userReceiptDetail was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userReceiptDetailUpdateInput, userReceiptDetailUncheckedUpdateInput>
  }


  /**
   * userReceiptDetail delete
   */
  export type userReceiptDetailDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
    /**
     * Filter which userReceiptDetail to delete.
     */
    where: userReceiptDetailWhereUniqueInput
  }


  /**
   * userReceiptDetail deleteMany
   */
  export type userReceiptDetailDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which userReceiptDetails to delete
     */
    where?: userReceiptDetailWhereInput
  }


  /**
   * userReceiptDetail findRaw
   */
  export type userReceiptDetailFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * userReceiptDetail aggregateRaw
   */
  export type userReceiptDetailAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * userReceiptDetail without action
   */
  export type userReceiptDetailDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userReceiptDetail
     */
    select?: userReceiptDetailSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: userReceiptDetailInclude<ExtArgs> | null
  }



  /**
   * Model userOrder
   */

  export type AggregateUserOrder = {
    _count: UserOrderCountAggregateOutputType | null
    _min: UserOrderMinAggregateOutputType | null
    _max: UserOrderMaxAggregateOutputType | null
  }

  export type UserOrderMinAggregateOutputType = {
    id: string | null
    userId: string | null
    data: string | null
  }

  export type UserOrderMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    data: string | null
  }

  export type UserOrderCountAggregateOutputType = {
    id: number
    userId: number
    data: number
    _all: number
  }


  export type UserOrderMinAggregateInputType = {
    id?: true
    userId?: true
    data?: true
  }

  export type UserOrderMaxAggregateInputType = {
    id?: true
    userId?: true
    data?: true
  }

  export type UserOrderCountAggregateInputType = {
    id?: true
    userId?: true
    data?: true
    _all?: true
  }

  export type UserOrderAggregateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which userOrder to aggregate.
     */
    where?: userOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userOrders to fetch.
     */
    orderBy?: userOrderOrderByWithRelationInput | userOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: userOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned userOrders
    **/
    _count?: true | UserOrderCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserOrderMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserOrderMaxAggregateInputType
  }

  export type GetUserOrderAggregateType<T extends UserOrderAggregateArgs> = {
        [P in keyof T & keyof AggregateUserOrder]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserOrder[P]>
      : GetScalarType<T[P], AggregateUserOrder[P]>
  }




  export type userOrderGroupByArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    where?: userOrderWhereInput
    orderBy?: userOrderOrderByWithAggregationInput | userOrderOrderByWithAggregationInput[]
    by: UserOrderScalarFieldEnum[] | UserOrderScalarFieldEnum
    having?: userOrderScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserOrderCountAggregateInputType | true
    _min?: UserOrderMinAggregateInputType
    _max?: UserOrderMaxAggregateInputType
  }

  export type UserOrderGroupByOutputType = {
    id: string
    userId: string
    data: string
    _count: UserOrderCountAggregateOutputType | null
    _min: UserOrderMinAggregateOutputType | null
    _max: UserOrderMaxAggregateOutputType | null
  }

  type GetUserOrderGroupByPayload<T extends userOrderGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserOrderGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserOrderGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserOrderGroupByOutputType[P]>
            : GetScalarType<T[P], UserOrderGroupByOutputType[P]>
        }
      >
    >


  export type userOrderSelect<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    data?: boolean
  }, ExtArgs["result"]["userOrder"]>

  export type userOrderSelectScalar = {
    id?: boolean
    userId?: boolean
    data?: boolean
  }


  export type $userOrderPayload<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    name: "userOrder"
    objects: {}
    scalars: $Extensions.GetResult<{
      id: string
      userId: string
      data: string
    }, ExtArgs["result"]["userOrder"]>
    composites: {}
  }


  type userOrderGetPayload<S extends boolean | null | undefined | userOrderDefaultArgs> = $Result.GetResult<Prisma.$userOrderPayload, S>

  type userOrderCountArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = 
    Omit<userOrderFindManyArgs, 'select' | 'include'> & {
      select?: UserOrderCountAggregateInputType | true
    }

  export interface userOrderDelegate<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['userOrder'], meta: { name: 'userOrder' } }
    /**
     * Find zero or one UserOrder that matches the filter.
     * @param {userOrderFindUniqueArgs} args - Arguments to find a UserOrder
     * @example
     * // Get one UserOrder
     * const userOrder = await prisma.userOrder.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends userOrderFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, userOrderFindUniqueArgs<ExtArgs>>
    ): Prisma__userOrderClient<$Result.GetResult<Prisma.$userOrderPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserOrder that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {userOrderFindUniqueOrThrowArgs} args - Arguments to find a UserOrder
     * @example
     * // Get one UserOrder
     * const userOrder = await prisma.userOrder.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends userOrderFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userOrderFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__userOrderClient<$Result.GetResult<Prisma.$userOrderPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserOrder that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userOrderFindFirstArgs} args - Arguments to find a UserOrder
     * @example
     * // Get one UserOrder
     * const userOrder = await prisma.userOrder.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends userOrderFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, userOrderFindFirstArgs<ExtArgs>>
    ): Prisma__userOrderClient<$Result.GetResult<Prisma.$userOrderPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserOrder that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userOrderFindFirstOrThrowArgs} args - Arguments to find a UserOrder
     * @example
     * // Get one UserOrder
     * const userOrder = await prisma.userOrder.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends userOrderFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, userOrderFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__userOrderClient<$Result.GetResult<Prisma.$userOrderPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserOrders that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userOrderFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserOrders
     * const userOrders = await prisma.userOrder.findMany()
     * 
     * // Get first 10 UserOrders
     * const userOrders = await prisma.userOrder.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userOrderWithIdOnly = await prisma.userOrder.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends userOrderFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userOrderFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$userOrderPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserOrder.
     * @param {userOrderCreateArgs} args - Arguments to create a UserOrder.
     * @example
     * // Create one UserOrder
     * const UserOrder = await prisma.userOrder.create({
     *   data: {
     *     // ... data to create a UserOrder
     *   }
     * })
     * 
    **/
    create<T extends userOrderCreateArgs<ExtArgs>>(
      args: SelectSubset<T, userOrderCreateArgs<ExtArgs>>
    ): Prisma__userOrderClient<$Result.GetResult<Prisma.$userOrderPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserOrders.
     *     @param {userOrderCreateManyArgs} args - Arguments to create many UserOrders.
     *     @example
     *     // Create many UserOrders
     *     const userOrder = await prisma.userOrder.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends userOrderCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userOrderCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserOrder.
     * @param {userOrderDeleteArgs} args - Arguments to delete one UserOrder.
     * @example
     * // Delete one UserOrder
     * const UserOrder = await prisma.userOrder.delete({
     *   where: {
     *     // ... filter to delete one UserOrder
     *   }
     * })
     * 
    **/
    delete<T extends userOrderDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, userOrderDeleteArgs<ExtArgs>>
    ): Prisma__userOrderClient<$Result.GetResult<Prisma.$userOrderPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserOrder.
     * @param {userOrderUpdateArgs} args - Arguments to update one UserOrder.
     * @example
     * // Update one UserOrder
     * const userOrder = await prisma.userOrder.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends userOrderUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, userOrderUpdateArgs<ExtArgs>>
    ): Prisma__userOrderClient<$Result.GetResult<Prisma.$userOrderPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserOrders.
     * @param {userOrderDeleteManyArgs} args - Arguments to filter UserOrders to delete.
     * @example
     * // Delete a few UserOrders
     * const { count } = await prisma.userOrder.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends userOrderDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, userOrderDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userOrderUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserOrders
     * const userOrder = await prisma.userOrder.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends userOrderUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, userOrderUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserOrder.
     * @param {userOrderUpsertArgs} args - Arguments to update or create a UserOrder.
     * @example
     * // Update or create a UserOrder
     * const userOrder = await prisma.userOrder.upsert({
     *   create: {
     *     // ... data to create a UserOrder
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserOrder we want to update
     *   }
     * })
    **/
    upsert<T extends userOrderUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, userOrderUpsertArgs<ExtArgs>>
    ): Prisma__userOrderClient<$Result.GetResult<Prisma.$userOrderPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Find zero or more UserOrders that matches the filter.
     * @param {userOrderFindRawArgs} args - Select which filters you would like to apply.
     * @example
     * const userOrder = await prisma.userOrder.findRaw({
     *   filter: { age: { $gt: 25 } } 
     * })
    **/
    findRaw(
      args?: userOrderFindRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Perform aggregation operations on a UserOrder.
     * @param {userOrderAggregateRawArgs} args - Select which aggregations you would like to apply.
     * @example
     * const userOrder = await prisma.userOrder.aggregateRaw({
     *   pipeline: [
     *     { $match: { status: "registered" } },
     *     { $group: { _id: "$country", total: { $sum: 1 } } }
     *   ]
     * })
    **/
    aggregateRaw(
      args?: userOrderAggregateRawArgs
    ): Prisma.PrismaPromise<JsonObject>

    /**
     * Count the number of UserOrders.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userOrderCountArgs} args - Arguments to filter UserOrders to count.
     * @example
     * // Count the number of UserOrders
     * const count = await prisma.userOrder.count({
     *   where: {
     *     // ... the filter for the UserOrders we want to count
     *   }
     * })
    **/
    count<T extends userOrderCountArgs>(
      args?: Subset<T, userOrderCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserOrderCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserOrderAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserOrderAggregateArgs>(args: Subset<T, UserOrderAggregateArgs>): Prisma.PrismaPromise<GetUserOrderAggregateType<T>>

    /**
     * Group by UserOrder.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {userOrderGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends userOrderGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: userOrderGroupByArgs['orderBy'] }
        : { orderBy?: userOrderGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, userOrderGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserOrderGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the userOrder model
   */
  readonly fields: userOrderFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for userOrder.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__userOrderClient<T, Null = never, ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the userOrder model
   */ 
  interface userOrderFieldRefs {
    readonly id: FieldRef<"userOrder", 'String'>
    readonly userId: FieldRef<"userOrder", 'String'>
    readonly data: FieldRef<"userOrder", 'String'>
  }
    

  // Custom InputTypes

  /**
   * userOrder findUnique
   */
  export type userOrderFindUniqueArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userOrder
     */
    select?: userOrderSelect<ExtArgs> | null
    /**
     * Filter, which userOrder to fetch.
     */
    where: userOrderWhereUniqueInput
  }


  /**
   * userOrder findUniqueOrThrow
   */
  export type userOrderFindUniqueOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userOrder
     */
    select?: userOrderSelect<ExtArgs> | null
    /**
     * Filter, which userOrder to fetch.
     */
    where: userOrderWhereUniqueInput
  }


  /**
   * userOrder findFirst
   */
  export type userOrderFindFirstArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userOrder
     */
    select?: userOrderSelect<ExtArgs> | null
    /**
     * Filter, which userOrder to fetch.
     */
    where?: userOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userOrders to fetch.
     */
    orderBy?: userOrderOrderByWithRelationInput | userOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userOrders.
     */
    cursor?: userOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userOrders.
     */
    distinct?: UserOrderScalarFieldEnum | UserOrderScalarFieldEnum[]
  }


  /**
   * userOrder findFirstOrThrow
   */
  export type userOrderFindFirstOrThrowArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userOrder
     */
    select?: userOrderSelect<ExtArgs> | null
    /**
     * Filter, which userOrder to fetch.
     */
    where?: userOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userOrders to fetch.
     */
    orderBy?: userOrderOrderByWithRelationInput | userOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for userOrders.
     */
    cursor?: userOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userOrders.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of userOrders.
     */
    distinct?: UserOrderScalarFieldEnum | UserOrderScalarFieldEnum[]
  }


  /**
   * userOrder findMany
   */
  export type userOrderFindManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userOrder
     */
    select?: userOrderSelect<ExtArgs> | null
    /**
     * Filter, which userOrders to fetch.
     */
    where?: userOrderWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of userOrders to fetch.
     */
    orderBy?: userOrderOrderByWithRelationInput | userOrderOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing userOrders.
     */
    cursor?: userOrderWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` userOrders from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` userOrders.
     */
    skip?: number
    distinct?: UserOrderScalarFieldEnum | UserOrderScalarFieldEnum[]
  }


  /**
   * userOrder create
   */
  export type userOrderCreateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userOrder
     */
    select?: userOrderSelect<ExtArgs> | null
    /**
     * The data needed to create a userOrder.
     */
    data: XOR<userOrderCreateInput, userOrderUncheckedCreateInput>
  }


  /**
   * userOrder createMany
   */
  export type userOrderCreateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many userOrders.
     */
    data: userOrderCreateManyInput | userOrderCreateManyInput[]
  }


  /**
   * userOrder update
   */
  export type userOrderUpdateArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userOrder
     */
    select?: userOrderSelect<ExtArgs> | null
    /**
     * The data needed to update a userOrder.
     */
    data: XOR<userOrderUpdateInput, userOrderUncheckedUpdateInput>
    /**
     * Choose, which userOrder to update.
     */
    where: userOrderWhereUniqueInput
  }


  /**
   * userOrder updateMany
   */
  export type userOrderUpdateManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The data used to update userOrders.
     */
    data: XOR<userOrderUpdateManyMutationInput, userOrderUncheckedUpdateManyInput>
    /**
     * Filter which userOrders to update
     */
    where?: userOrderWhereInput
  }


  /**
   * userOrder upsert
   */
  export type userOrderUpsertArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userOrder
     */
    select?: userOrderSelect<ExtArgs> | null
    /**
     * The filter to search for the userOrder to update in case it exists.
     */
    where: userOrderWhereUniqueInput
    /**
     * In case the userOrder found by the `where` argument doesn't exist, create a new userOrder with this data.
     */
    create: XOR<userOrderCreateInput, userOrderUncheckedCreateInput>
    /**
     * In case the userOrder was found with the provided `where` argument, update it with this data.
     */
    update: XOR<userOrderUpdateInput, userOrderUncheckedUpdateInput>
  }


  /**
   * userOrder delete
   */
  export type userOrderDeleteArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userOrder
     */
    select?: userOrderSelect<ExtArgs> | null
    /**
     * Filter which userOrder to delete.
     */
    where: userOrderWhereUniqueInput
  }


  /**
   * userOrder deleteMany
   */
  export type userOrderDeleteManyArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Filter which userOrders to delete
     */
    where?: userOrderWhereInput
  }


  /**
   * userOrder findRaw
   */
  export type userOrderFindRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * The query predicate filter. If unspecified, then all documents in the collection will match the predicate. ${@link https://docs.mongodb.com/manual/reference/operator/query MongoDB Docs}.
     */
    filter?: InputJsonValue
    /**
     * Additional options to pass to the `find` command ${@link https://docs.mongodb.com/manual/reference/command/find/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * userOrder aggregateRaw
   */
  export type userOrderAggregateRawArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * An array of aggregation stages to process and transform the document stream via the aggregation pipeline. ${@link https://docs.mongodb.com/manual/reference/operator/aggregation-pipeline MongoDB Docs}.
     */
    pipeline?: InputJsonValue[]
    /**
     * Additional options to pass to the `aggregate` command ${@link https://docs.mongodb.com/manual/reference/command/aggregate/#command-fields MongoDB Docs}.
     */
    options?: InputJsonValue
  }


  /**
   * userOrder without action
   */
  export type userOrderDefaultArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the userOrder
     */
    select?: userOrderSelect<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const UsersScalarFieldEnum: {
    id: 'id',
    email: 'email',
    emailConfirm: 'emailConfirm',
    userName: 'userName',
    password: 'password',
    firstName: 'firstName',
    lastName: 'lastName',
    avatar: 'avatar',
    isActive: 'isActive',
    createAt: 'createAt',
    updateAt: 'updateAt',
    isAdmin: 'isAdmin'
  };

  export type UsersScalarFieldEnum = (typeof UsersScalarFieldEnum)[keyof typeof UsersScalarFieldEnum]


  export const CategoriesScalarFieldEnum: {
    id: 'id',
    title: 'title',
    active: 'active',
    avatar: 'avatar'
  };

  export type CategoriesScalarFieldEnum = (typeof CategoriesScalarFieldEnum)[keyof typeof CategoriesScalarFieldEnum]


  export const ProductsScalarFieldEnum: {
    id: 'id',
    name: 'name',
    avatar: 'avatar',
    price: 'price',
    des: 'des',
    categoryId: 'categoryId'
  };

  export type ProductsScalarFieldEnum = (typeof ProductsScalarFieldEnum)[keyof typeof ProductsScalarFieldEnum]


  export const ProductPicturesScalarFieldEnum: {
    id: 'id',
    path: 'path',
    productId: 'productId'
  };

  export type ProductPicturesScalarFieldEnum = (typeof ProductPicturesScalarFieldEnum)[keyof typeof ProductPicturesScalarFieldEnum]


  export const UserReceiptsScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    state: 'state',
    createAt: 'createAt',
    acceptTime: 'acceptTime',
    shippingTime: 'shippingTime',
    doneTime: 'doneTime',
    total: 'total',
    payMode: 'payMode',
    paid: 'paid'
  };

  export type UserReceiptsScalarFieldEnum = (typeof UserReceiptsScalarFieldEnum)[keyof typeof UserReceiptsScalarFieldEnum]


  export const GuestReceiptsScalarFieldEnum: {
    id: 'id',
    email: 'email',
    phoneNumber: 'phoneNumber',
    state: 'state',
    createAt: 'createAt',
    acceptTime: 'acceptTime',
    shippingTime: 'shippingTime',
    doneTime: 'doneTime',
    total: 'total',
    payMode: 'payMode',
    paid: 'paid'
  };

  export type GuestReceiptsScalarFieldEnum = (typeof GuestReceiptsScalarFieldEnum)[keyof typeof GuestReceiptsScalarFieldEnum]


  export const GuestReceiptDetailScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    quantity: 'quantity',
    guestReceiptId: 'guestReceiptId'
  };

  export type GuestReceiptDetailScalarFieldEnum = (typeof GuestReceiptDetailScalarFieldEnum)[keyof typeof GuestReceiptDetailScalarFieldEnum]


  export const UserReceiptDetailScalarFieldEnum: {
    id: 'id',
    productId: 'productId',
    quantity: 'quantity',
    userReceiptId: 'userReceiptId'
  };

  export type UserReceiptDetailScalarFieldEnum = (typeof UserReceiptDetailScalarFieldEnum)[keyof typeof UserReceiptDetailScalarFieldEnum]


  export const UserOrderScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    data: 'data'
  };

  export type UserOrderScalarFieldEnum = (typeof UserOrderScalarFieldEnum)[keyof typeof UserOrderScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'ReceiptState'
   */
  export type EnumReceiptStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReceiptState'>
    


  /**
   * Reference to a field of type 'ReceiptState[]'
   */
  export type ListEnumReceiptStateFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReceiptState[]'>
    


  /**
   * Reference to a field of type 'ReceiptPayMode'
   */
  export type EnumReceiptPayModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReceiptPayMode'>
    


  /**
   * Reference to a field of type 'ReceiptPayMode[]'
   */
  export type ListEnumReceiptPayModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'ReceiptPayMode[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    
  /**
   * Deep Input Types
   */


  export type usersWhereInput = {
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    id?: StringFilter<"users"> | string
    email?: StringFilter<"users"> | string
    emailConfirm?: BoolFilter<"users"> | boolean
    userName?: StringFilter<"users"> | string
    password?: StringFilter<"users"> | string
    firstName?: StringFilter<"users"> | string
    lastName?: StringFilter<"users"> | string
    avatar?: StringFilter<"users"> | string
    isActive?: BoolFilter<"users"> | boolean
    createAt?: DateTimeFilter<"users"> | Date | string
    updateAt?: DateTimeFilter<"users"> | Date | string
    address?: AddressCompositeListFilter | AddressObjectEqualityInput[]
    isAdmin?: BoolFilter<"users"> | boolean
    userReceipts?: UserReceiptsListRelationFilter
  }

  export type usersOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    emailConfirm?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    isActive?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    address?: AddressOrderByCompositeAggregateInput
    isAdmin?: SortOrder
    userReceipts?: userReceiptsOrderByRelationAggregateInput
  }

  export type usersWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    userName?: string
    AND?: usersWhereInput | usersWhereInput[]
    OR?: usersWhereInput[]
    NOT?: usersWhereInput | usersWhereInput[]
    emailConfirm?: BoolFilter<"users"> | boolean
    password?: StringFilter<"users"> | string
    firstName?: StringFilter<"users"> | string
    lastName?: StringFilter<"users"> | string
    avatar?: StringFilter<"users"> | string
    isActive?: BoolFilter<"users"> | boolean
    createAt?: DateTimeFilter<"users"> | Date | string
    updateAt?: DateTimeFilter<"users"> | Date | string
    address?: AddressCompositeListFilter | AddressObjectEqualityInput[]
    isAdmin?: BoolFilter<"users"> | boolean
    userReceipts?: UserReceiptsListRelationFilter
  }, "id" | "email" | "userName">

  export type usersOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    emailConfirm?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    isActive?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    isAdmin?: SortOrder
    _count?: usersCountOrderByAggregateInput
    _max?: usersMaxOrderByAggregateInput
    _min?: usersMinOrderByAggregateInput
  }

  export type usersScalarWhereWithAggregatesInput = {
    AND?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    OR?: usersScalarWhereWithAggregatesInput[]
    NOT?: usersScalarWhereWithAggregatesInput | usersScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"users"> | string
    email?: StringWithAggregatesFilter<"users"> | string
    emailConfirm?: BoolWithAggregatesFilter<"users"> | boolean
    userName?: StringWithAggregatesFilter<"users"> | string
    password?: StringWithAggregatesFilter<"users"> | string
    firstName?: StringWithAggregatesFilter<"users"> | string
    lastName?: StringWithAggregatesFilter<"users"> | string
    avatar?: StringWithAggregatesFilter<"users"> | string
    isActive?: BoolWithAggregatesFilter<"users"> | boolean
    createAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    updateAt?: DateTimeWithAggregatesFilter<"users"> | Date | string
    isAdmin?: BoolWithAggregatesFilter<"users"> | boolean
  }

  export type categoriesWhereInput = {
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    id?: StringFilter<"categories"> | string
    title?: StringFilter<"categories"> | string
    active?: BoolFilter<"categories"> | boolean
    avatar?: StringFilter<"categories"> | string
    products?: ProductsListRelationFilter
  }

  export type categoriesOrderByWithRelationInput = {
    id?: SortOrder
    title?: SortOrder
    active?: SortOrder
    avatar?: SortOrder
    products?: productsOrderByRelationAggregateInput
  }

  export type categoriesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    title?: string
    AND?: categoriesWhereInput | categoriesWhereInput[]
    OR?: categoriesWhereInput[]
    NOT?: categoriesWhereInput | categoriesWhereInput[]
    active?: BoolFilter<"categories"> | boolean
    avatar?: StringFilter<"categories"> | string
    products?: ProductsListRelationFilter
  }, "id" | "title">

  export type categoriesOrderByWithAggregationInput = {
    id?: SortOrder
    title?: SortOrder
    active?: SortOrder
    avatar?: SortOrder
    _count?: categoriesCountOrderByAggregateInput
    _max?: categoriesMaxOrderByAggregateInput
    _min?: categoriesMinOrderByAggregateInput
  }

  export type categoriesScalarWhereWithAggregatesInput = {
    AND?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    OR?: categoriesScalarWhereWithAggregatesInput[]
    NOT?: categoriesScalarWhereWithAggregatesInput | categoriesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"categories"> | string
    title?: StringWithAggregatesFilter<"categories"> | string
    active?: BoolWithAggregatesFilter<"categories"> | boolean
    avatar?: StringWithAggregatesFilter<"categories"> | string
  }

  export type productsWhereInput = {
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    id?: StringFilter<"products"> | string
    name?: StringFilter<"products"> | string
    avatar?: StringFilter<"products"> | string
    price?: FloatFilter<"products"> | number
    des?: StringFilter<"products"> | string
    categoryId?: StringFilter<"products"> | string
    category?: XOR<CategoriesRelationFilter, categoriesWhereInput>
    productPictures?: ProductPicturesListRelationFilter
    guestReceiptDetail?: GuestReceiptDetailListRelationFilter
    userReceiptDetail?: UserReceiptDetailListRelationFilter
  }

  export type productsOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    price?: SortOrder
    des?: SortOrder
    categoryId?: SortOrder
    category?: categoriesOrderByWithRelationInput
    productPictures?: productPicturesOrderByRelationAggregateInput
    guestReceiptDetail?: guestReceiptDetailOrderByRelationAggregateInput
    userReceiptDetail?: userReceiptDetailOrderByRelationAggregateInput
  }

  export type productsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: productsWhereInput | productsWhereInput[]
    OR?: productsWhereInput[]
    NOT?: productsWhereInput | productsWhereInput[]
    name?: StringFilter<"products"> | string
    avatar?: StringFilter<"products"> | string
    price?: FloatFilter<"products"> | number
    des?: StringFilter<"products"> | string
    categoryId?: StringFilter<"products"> | string
    category?: XOR<CategoriesRelationFilter, categoriesWhereInput>
    productPictures?: ProductPicturesListRelationFilter
    guestReceiptDetail?: GuestReceiptDetailListRelationFilter
    userReceiptDetail?: UserReceiptDetailListRelationFilter
  }, "id">

  export type productsOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    price?: SortOrder
    des?: SortOrder
    categoryId?: SortOrder
    _count?: productsCountOrderByAggregateInput
    _avg?: productsAvgOrderByAggregateInput
    _max?: productsMaxOrderByAggregateInput
    _min?: productsMinOrderByAggregateInput
    _sum?: productsSumOrderByAggregateInput
  }

  export type productsScalarWhereWithAggregatesInput = {
    AND?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    OR?: productsScalarWhereWithAggregatesInput[]
    NOT?: productsScalarWhereWithAggregatesInput | productsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"products"> | string
    name?: StringWithAggregatesFilter<"products"> | string
    avatar?: StringWithAggregatesFilter<"products"> | string
    price?: FloatWithAggregatesFilter<"products"> | number
    des?: StringWithAggregatesFilter<"products"> | string
    categoryId?: StringWithAggregatesFilter<"products"> | string
  }

  export type productPicturesWhereInput = {
    AND?: productPicturesWhereInput | productPicturesWhereInput[]
    OR?: productPicturesWhereInput[]
    NOT?: productPicturesWhereInput | productPicturesWhereInput[]
    id?: StringFilter<"productPictures"> | string
    path?: StringFilter<"productPictures"> | string
    productId?: StringFilter<"productPictures"> | string
    product?: XOR<ProductsRelationFilter, productsWhereInput>
  }

  export type productPicturesOrderByWithRelationInput = {
    id?: SortOrder
    path?: SortOrder
    productId?: SortOrder
    product?: productsOrderByWithRelationInput
  }

  export type productPicturesWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: productPicturesWhereInput | productPicturesWhereInput[]
    OR?: productPicturesWhereInput[]
    NOT?: productPicturesWhereInput | productPicturesWhereInput[]
    path?: StringFilter<"productPictures"> | string
    productId?: StringFilter<"productPictures"> | string
    product?: XOR<ProductsRelationFilter, productsWhereInput>
  }, "id">

  export type productPicturesOrderByWithAggregationInput = {
    id?: SortOrder
    path?: SortOrder
    productId?: SortOrder
    _count?: productPicturesCountOrderByAggregateInput
    _max?: productPicturesMaxOrderByAggregateInput
    _min?: productPicturesMinOrderByAggregateInput
  }

  export type productPicturesScalarWhereWithAggregatesInput = {
    AND?: productPicturesScalarWhereWithAggregatesInput | productPicturesScalarWhereWithAggregatesInput[]
    OR?: productPicturesScalarWhereWithAggregatesInput[]
    NOT?: productPicturesScalarWhereWithAggregatesInput | productPicturesScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"productPictures"> | string
    path?: StringWithAggregatesFilter<"productPictures"> | string
    productId?: StringWithAggregatesFilter<"productPictures"> | string
  }

  export type userReceiptsWhereInput = {
    AND?: userReceiptsWhereInput | userReceiptsWhereInput[]
    OR?: userReceiptsWhereInput[]
    NOT?: userReceiptsWhereInput | userReceiptsWhereInput[]
    id?: StringFilter<"userReceipts"> | string
    userId?: StringFilter<"userReceipts"> | string
    state?: EnumReceiptStateFilter<"userReceipts"> | $Enums.ReceiptState
    createAt?: DateTimeFilter<"userReceipts"> | Date | string
    acceptTime?: DateTimeNullableFilter<"userReceipts"> | Date | string | null
    shippingTime?: DateTimeNullableFilter<"userReceipts"> | Date | string | null
    doneTime?: DateTimeNullableFilter<"userReceipts"> | Date | string | null
    total?: FloatFilter<"userReceipts"> | number
    payMode?: EnumReceiptPayModeFilter<"userReceipts"> | $Enums.ReceiptPayMode
    paid?: BoolFilter<"userReceipts"> | boolean
    user?: XOR<UsersRelationFilter, usersWhereInput>
    userReceiptDetail?: UserReceiptDetailListRelationFilter
  }

  export type userReceiptsOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    state?: SortOrder
    createAt?: SortOrder
    acceptTime?: SortOrder
    shippingTime?: SortOrder
    doneTime?: SortOrder
    total?: SortOrder
    payMode?: SortOrder
    paid?: SortOrder
    user?: usersOrderByWithRelationInput
    userReceiptDetail?: userReceiptDetailOrderByRelationAggregateInput
  }

  export type userReceiptsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: userReceiptsWhereInput | userReceiptsWhereInput[]
    OR?: userReceiptsWhereInput[]
    NOT?: userReceiptsWhereInput | userReceiptsWhereInput[]
    userId?: StringFilter<"userReceipts"> | string
    state?: EnumReceiptStateFilter<"userReceipts"> | $Enums.ReceiptState
    createAt?: DateTimeFilter<"userReceipts"> | Date | string
    acceptTime?: DateTimeNullableFilter<"userReceipts"> | Date | string | null
    shippingTime?: DateTimeNullableFilter<"userReceipts"> | Date | string | null
    doneTime?: DateTimeNullableFilter<"userReceipts"> | Date | string | null
    total?: FloatFilter<"userReceipts"> | number
    payMode?: EnumReceiptPayModeFilter<"userReceipts"> | $Enums.ReceiptPayMode
    paid?: BoolFilter<"userReceipts"> | boolean
    user?: XOR<UsersRelationFilter, usersWhereInput>
    userReceiptDetail?: UserReceiptDetailListRelationFilter
  }, "id">

  export type userReceiptsOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    state?: SortOrder
    createAt?: SortOrder
    acceptTime?: SortOrder
    shippingTime?: SortOrder
    doneTime?: SortOrder
    total?: SortOrder
    payMode?: SortOrder
    paid?: SortOrder
    _count?: userReceiptsCountOrderByAggregateInput
    _avg?: userReceiptsAvgOrderByAggregateInput
    _max?: userReceiptsMaxOrderByAggregateInput
    _min?: userReceiptsMinOrderByAggregateInput
    _sum?: userReceiptsSumOrderByAggregateInput
  }

  export type userReceiptsScalarWhereWithAggregatesInput = {
    AND?: userReceiptsScalarWhereWithAggregatesInput | userReceiptsScalarWhereWithAggregatesInput[]
    OR?: userReceiptsScalarWhereWithAggregatesInput[]
    NOT?: userReceiptsScalarWhereWithAggregatesInput | userReceiptsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"userReceipts"> | string
    userId?: StringWithAggregatesFilter<"userReceipts"> | string
    state?: EnumReceiptStateWithAggregatesFilter<"userReceipts"> | $Enums.ReceiptState
    createAt?: DateTimeWithAggregatesFilter<"userReceipts"> | Date | string
    acceptTime?: DateTimeNullableWithAggregatesFilter<"userReceipts"> | Date | string | null
    shippingTime?: DateTimeNullableWithAggregatesFilter<"userReceipts"> | Date | string | null
    doneTime?: DateTimeNullableWithAggregatesFilter<"userReceipts"> | Date | string | null
    total?: FloatWithAggregatesFilter<"userReceipts"> | number
    payMode?: EnumReceiptPayModeWithAggregatesFilter<"userReceipts"> | $Enums.ReceiptPayMode
    paid?: BoolWithAggregatesFilter<"userReceipts"> | boolean
  }

  export type guestReceiptsWhereInput = {
    AND?: guestReceiptsWhereInput | guestReceiptsWhereInput[]
    OR?: guestReceiptsWhereInput[]
    NOT?: guestReceiptsWhereInput | guestReceiptsWhereInput[]
    id?: StringFilter<"guestReceipts"> | string
    email?: StringFilter<"guestReceipts"> | string
    phoneNumber?: StringFilter<"guestReceipts"> | string
    state?: EnumReceiptStateFilter<"guestReceipts"> | $Enums.ReceiptState
    createAt?: DateTimeFilter<"guestReceipts"> | Date | string
    acceptTime?: DateTimeNullableFilter<"guestReceipts"> | Date | string | null
    shippingTime?: DateTimeNullableFilter<"guestReceipts"> | Date | string | null
    doneTime?: DateTimeNullableFilter<"guestReceipts"> | Date | string | null
    total?: FloatFilter<"guestReceipts"> | number
    payMode?: EnumReceiptPayModeFilter<"guestReceipts"> | $Enums.ReceiptPayMode
    paid?: BoolFilter<"guestReceipts"> | boolean
    guestReceiptDetail?: GuestReceiptDetailListRelationFilter
  }

  export type guestReceiptsOrderByWithRelationInput = {
    id?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    state?: SortOrder
    createAt?: SortOrder
    acceptTime?: SortOrder
    shippingTime?: SortOrder
    doneTime?: SortOrder
    total?: SortOrder
    payMode?: SortOrder
    paid?: SortOrder
    guestReceiptDetail?: guestReceiptDetailOrderByRelationAggregateInput
  }

  export type guestReceiptsWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: guestReceiptsWhereInput | guestReceiptsWhereInput[]
    OR?: guestReceiptsWhereInput[]
    NOT?: guestReceiptsWhereInput | guestReceiptsWhereInput[]
    email?: StringFilter<"guestReceipts"> | string
    phoneNumber?: StringFilter<"guestReceipts"> | string
    state?: EnumReceiptStateFilter<"guestReceipts"> | $Enums.ReceiptState
    createAt?: DateTimeFilter<"guestReceipts"> | Date | string
    acceptTime?: DateTimeNullableFilter<"guestReceipts"> | Date | string | null
    shippingTime?: DateTimeNullableFilter<"guestReceipts"> | Date | string | null
    doneTime?: DateTimeNullableFilter<"guestReceipts"> | Date | string | null
    total?: FloatFilter<"guestReceipts"> | number
    payMode?: EnumReceiptPayModeFilter<"guestReceipts"> | $Enums.ReceiptPayMode
    paid?: BoolFilter<"guestReceipts"> | boolean
    guestReceiptDetail?: GuestReceiptDetailListRelationFilter
  }, "id">

  export type guestReceiptsOrderByWithAggregationInput = {
    id?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    state?: SortOrder
    createAt?: SortOrder
    acceptTime?: SortOrder
    shippingTime?: SortOrder
    doneTime?: SortOrder
    total?: SortOrder
    payMode?: SortOrder
    paid?: SortOrder
    _count?: guestReceiptsCountOrderByAggregateInput
    _avg?: guestReceiptsAvgOrderByAggregateInput
    _max?: guestReceiptsMaxOrderByAggregateInput
    _min?: guestReceiptsMinOrderByAggregateInput
    _sum?: guestReceiptsSumOrderByAggregateInput
  }

  export type guestReceiptsScalarWhereWithAggregatesInput = {
    AND?: guestReceiptsScalarWhereWithAggregatesInput | guestReceiptsScalarWhereWithAggregatesInput[]
    OR?: guestReceiptsScalarWhereWithAggregatesInput[]
    NOT?: guestReceiptsScalarWhereWithAggregatesInput | guestReceiptsScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"guestReceipts"> | string
    email?: StringWithAggregatesFilter<"guestReceipts"> | string
    phoneNumber?: StringWithAggregatesFilter<"guestReceipts"> | string
    state?: EnumReceiptStateWithAggregatesFilter<"guestReceipts"> | $Enums.ReceiptState
    createAt?: DateTimeWithAggregatesFilter<"guestReceipts"> | Date | string
    acceptTime?: DateTimeNullableWithAggregatesFilter<"guestReceipts"> | Date | string | null
    shippingTime?: DateTimeNullableWithAggregatesFilter<"guestReceipts"> | Date | string | null
    doneTime?: DateTimeNullableWithAggregatesFilter<"guestReceipts"> | Date | string | null
    total?: FloatWithAggregatesFilter<"guestReceipts"> | number
    payMode?: EnumReceiptPayModeWithAggregatesFilter<"guestReceipts"> | $Enums.ReceiptPayMode
    paid?: BoolWithAggregatesFilter<"guestReceipts"> | boolean
  }

  export type guestReceiptDetailWhereInput = {
    AND?: guestReceiptDetailWhereInput | guestReceiptDetailWhereInput[]
    OR?: guestReceiptDetailWhereInput[]
    NOT?: guestReceiptDetailWhereInput | guestReceiptDetailWhereInput[]
    id?: StringFilter<"guestReceiptDetail"> | string
    productId?: StringFilter<"guestReceiptDetail"> | string
    quantity?: IntFilter<"guestReceiptDetail"> | number
    guestReceiptId?: StringFilter<"guestReceiptDetail"> | string
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    guestReceipt?: XOR<GuestReceiptsRelationFilter, guestReceiptsWhereInput>
  }

  export type guestReceiptDetailOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    guestReceiptId?: SortOrder
    product?: productsOrderByWithRelationInput
    guestReceipt?: guestReceiptsOrderByWithRelationInput
  }

  export type guestReceiptDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: guestReceiptDetailWhereInput | guestReceiptDetailWhereInput[]
    OR?: guestReceiptDetailWhereInput[]
    NOT?: guestReceiptDetailWhereInput | guestReceiptDetailWhereInput[]
    productId?: StringFilter<"guestReceiptDetail"> | string
    quantity?: IntFilter<"guestReceiptDetail"> | number
    guestReceiptId?: StringFilter<"guestReceiptDetail"> | string
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    guestReceipt?: XOR<GuestReceiptsRelationFilter, guestReceiptsWhereInput>
  }, "id">

  export type guestReceiptDetailOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    guestReceiptId?: SortOrder
    _count?: guestReceiptDetailCountOrderByAggregateInput
    _avg?: guestReceiptDetailAvgOrderByAggregateInput
    _max?: guestReceiptDetailMaxOrderByAggregateInput
    _min?: guestReceiptDetailMinOrderByAggregateInput
    _sum?: guestReceiptDetailSumOrderByAggregateInput
  }

  export type guestReceiptDetailScalarWhereWithAggregatesInput = {
    AND?: guestReceiptDetailScalarWhereWithAggregatesInput | guestReceiptDetailScalarWhereWithAggregatesInput[]
    OR?: guestReceiptDetailScalarWhereWithAggregatesInput[]
    NOT?: guestReceiptDetailScalarWhereWithAggregatesInput | guestReceiptDetailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"guestReceiptDetail"> | string
    productId?: StringWithAggregatesFilter<"guestReceiptDetail"> | string
    quantity?: IntWithAggregatesFilter<"guestReceiptDetail"> | number
    guestReceiptId?: StringWithAggregatesFilter<"guestReceiptDetail"> | string
  }

  export type userReceiptDetailWhereInput = {
    AND?: userReceiptDetailWhereInput | userReceiptDetailWhereInput[]
    OR?: userReceiptDetailWhereInput[]
    NOT?: userReceiptDetailWhereInput | userReceiptDetailWhereInput[]
    id?: StringFilter<"userReceiptDetail"> | string
    productId?: StringFilter<"userReceiptDetail"> | string
    quantity?: IntFilter<"userReceiptDetail"> | number
    userReceiptId?: StringFilter<"userReceiptDetail"> | string
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    userReceipt?: XOR<UserReceiptsRelationFilter, userReceiptsWhereInput>
  }

  export type userReceiptDetailOrderByWithRelationInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    userReceiptId?: SortOrder
    product?: productsOrderByWithRelationInput
    userReceipt?: userReceiptsOrderByWithRelationInput
  }

  export type userReceiptDetailWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: userReceiptDetailWhereInput | userReceiptDetailWhereInput[]
    OR?: userReceiptDetailWhereInput[]
    NOT?: userReceiptDetailWhereInput | userReceiptDetailWhereInput[]
    productId?: StringFilter<"userReceiptDetail"> | string
    quantity?: IntFilter<"userReceiptDetail"> | number
    userReceiptId?: StringFilter<"userReceiptDetail"> | string
    product?: XOR<ProductsRelationFilter, productsWhereInput>
    userReceipt?: XOR<UserReceiptsRelationFilter, userReceiptsWhereInput>
  }, "id">

  export type userReceiptDetailOrderByWithAggregationInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    userReceiptId?: SortOrder
    _count?: userReceiptDetailCountOrderByAggregateInput
    _avg?: userReceiptDetailAvgOrderByAggregateInput
    _max?: userReceiptDetailMaxOrderByAggregateInput
    _min?: userReceiptDetailMinOrderByAggregateInput
    _sum?: userReceiptDetailSumOrderByAggregateInput
  }

  export type userReceiptDetailScalarWhereWithAggregatesInput = {
    AND?: userReceiptDetailScalarWhereWithAggregatesInput | userReceiptDetailScalarWhereWithAggregatesInput[]
    OR?: userReceiptDetailScalarWhereWithAggregatesInput[]
    NOT?: userReceiptDetailScalarWhereWithAggregatesInput | userReceiptDetailScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"userReceiptDetail"> | string
    productId?: StringWithAggregatesFilter<"userReceiptDetail"> | string
    quantity?: IntWithAggregatesFilter<"userReceiptDetail"> | number
    userReceiptId?: StringWithAggregatesFilter<"userReceiptDetail"> | string
  }

  export type userOrderWhereInput = {
    AND?: userOrderWhereInput | userOrderWhereInput[]
    OR?: userOrderWhereInput[]
    NOT?: userOrderWhereInput | userOrderWhereInput[]
    id?: StringFilter<"userOrder"> | string
    userId?: StringFilter<"userOrder"> | string
    data?: StringFilter<"userOrder"> | string
  }

  export type userOrderOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    data?: SortOrder
  }

  export type userOrderWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: userOrderWhereInput | userOrderWhereInput[]
    OR?: userOrderWhereInput[]
    NOT?: userOrderWhereInput | userOrderWhereInput[]
    userId?: StringFilter<"userOrder"> | string
    data?: StringFilter<"userOrder"> | string
  }, "id">

  export type userOrderOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    data?: SortOrder
    _count?: userOrderCountOrderByAggregateInput
    _max?: userOrderMaxOrderByAggregateInput
    _min?: userOrderMinOrderByAggregateInput
  }

  export type userOrderScalarWhereWithAggregatesInput = {
    AND?: userOrderScalarWhereWithAggregatesInput | userOrderScalarWhereWithAggregatesInput[]
    OR?: userOrderScalarWhereWithAggregatesInput[]
    NOT?: userOrderScalarWhereWithAggregatesInput | userOrderScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"userOrder"> | string
    userId?: StringWithAggregatesFilter<"userOrder"> | string
    data?: StringWithAggregatesFilter<"userOrder"> | string
  }

  export type usersCreateInput = {
    id?: string
    email: string
    emailConfirm?: boolean
    userName: string
    password: string
    firstName: string
    lastName: string
    avatar?: string
    isActive?: boolean
    createAt?: Date | string
    updateAt?: Date | string
    address?: XOR<AddressListCreateEnvelopeInput, AddressCreateInput> | AddressCreateInput[]
    isAdmin?: boolean
    userReceipts?: userReceiptsCreateNestedManyWithoutUserInput
  }

  export type usersUncheckedCreateInput = {
    id?: string
    email: string
    emailConfirm?: boolean
    userName: string
    password: string
    firstName: string
    lastName: string
    avatar?: string
    isActive?: boolean
    createAt?: Date | string
    updateAt?: Date | string
    address?: XOR<AddressListCreateEnvelopeInput, AddressCreateInput> | AddressCreateInput[]
    isAdmin?: boolean
    userReceipts?: userReceiptsUncheckedCreateNestedManyWithoutUserInput
  }

  export type usersUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    emailConfirm?: BoolFieldUpdateOperationsInput | boolean
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: XOR<AddressListUpdateEnvelopeInput, AddressCreateInput> | AddressCreateInput[]
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    userReceipts?: userReceiptsUpdateManyWithoutUserNestedInput
  }

  export type usersUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    emailConfirm?: BoolFieldUpdateOperationsInput | boolean
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: XOR<AddressListUpdateEnvelopeInput, AddressCreateInput> | AddressCreateInput[]
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
    userReceipts?: userReceiptsUncheckedUpdateManyWithoutUserNestedInput
  }

  export type usersCreateManyInput = {
    id?: string
    email: string
    emailConfirm?: boolean
    userName: string
    password: string
    firstName: string
    lastName: string
    avatar?: string
    isActive?: boolean
    createAt?: Date | string
    updateAt?: Date | string
    address?: XOR<AddressListCreateEnvelopeInput, AddressCreateInput> | AddressCreateInput[]
    isAdmin?: boolean
  }

  export type usersUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    emailConfirm?: BoolFieldUpdateOperationsInput | boolean
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: XOR<AddressListUpdateEnvelopeInput, AddressCreateInput> | AddressCreateInput[]
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usersUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    emailConfirm?: BoolFieldUpdateOperationsInput | boolean
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: XOR<AddressListUpdateEnvelopeInput, AddressCreateInput> | AddressCreateInput[]
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type categoriesCreateInput = {
    id?: string
    title: string
    active?: boolean
    avatar?: string
    products?: productsCreateNestedManyWithoutCategoryInput
  }

  export type categoriesUncheckedCreateInput = {
    id?: string
    title: string
    active?: boolean
    avatar?: string
    products?: productsUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type categoriesUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
    products?: productsUpdateManyWithoutCategoryNestedInput
  }

  export type categoriesUncheckedUpdateInput = {
    title?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
    products?: productsUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type categoriesCreateManyInput = {
    id?: string
    title: string
    active?: boolean
    avatar?: string
  }

  export type categoriesUpdateManyMutationInput = {
    title?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesUncheckedUpdateManyInput = {
    title?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type productsCreateInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
    category: categoriesCreateNestedOneWithoutProductsInput
    productPictures?: productPicturesCreateNestedManyWithoutProductInput
    guestReceiptDetail?: guestReceiptDetailCreateNestedManyWithoutProductInput
    userReceiptDetail?: userReceiptDetailCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
    categoryId: string
    productPictures?: productPicturesUncheckedCreateNestedManyWithoutProductInput
    guestReceiptDetail?: guestReceiptDetailUncheckedCreateNestedManyWithoutProductInput
    userReceiptDetail?: userReceiptDetailUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
    category?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    productPictures?: productPicturesUpdateManyWithoutProductNestedInput
    guestReceiptDetail?: guestReceiptDetailUpdateManyWithoutProductNestedInput
    userReceiptDetail?: userReceiptDetailUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    productPictures?: productPicturesUncheckedUpdateManyWithoutProductNestedInput
    guestReceiptDetail?: guestReceiptDetailUncheckedUpdateManyWithoutProductNestedInput
    userReceiptDetail?: userReceiptDetailUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsCreateManyInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
    categoryId: string
  }

  export type productsUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
  }

  export type productsUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type productPicturesCreateInput = {
    id?: string
    path: string
    product: productsCreateNestedOneWithoutProductPicturesInput
  }

  export type productPicturesUncheckedCreateInput = {
    id?: string
    path: string
    productId: string
  }

  export type productPicturesUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    product?: productsUpdateOneRequiredWithoutProductPicturesNestedInput
  }

  export type productPicturesUncheckedUpdateInput = {
    path?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type productPicturesCreateManyInput = {
    id?: string
    path: string
    productId: string
  }

  export type productPicturesUpdateManyMutationInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type productPicturesUncheckedUpdateManyInput = {
    path?: StringFieldUpdateOperationsInput | string
    productId?: StringFieldUpdateOperationsInput | string
  }

  export type userReceiptsCreateInput = {
    id?: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
    user: usersCreateNestedOneWithoutUserReceiptsInput
    userReceiptDetail?: userReceiptDetailCreateNestedManyWithoutUserReceiptInput
  }

  export type userReceiptsUncheckedCreateInput = {
    id?: string
    userId: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
    userReceiptDetail?: userReceiptDetailUncheckedCreateNestedManyWithoutUserReceiptInput
  }

  export type userReceiptsUpdateInput = {
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
    user?: usersUpdateOneRequiredWithoutUserReceiptsNestedInput
    userReceiptDetail?: userReceiptDetailUpdateManyWithoutUserReceiptNestedInput
  }

  export type userReceiptsUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
    userReceiptDetail?: userReceiptDetailUncheckedUpdateManyWithoutUserReceiptNestedInput
  }

  export type userReceiptsCreateManyInput = {
    id?: string
    userId: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
  }

  export type userReceiptsUpdateManyMutationInput = {
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userReceiptsUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type guestReceiptsCreateInput = {
    id?: string
    email: string
    phoneNumber: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
    guestReceiptDetail?: guestReceiptDetailCreateNestedManyWithoutGuestReceiptInput
  }

  export type guestReceiptsUncheckedCreateInput = {
    id?: string
    email: string
    phoneNumber: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
    guestReceiptDetail?: guestReceiptDetailUncheckedCreateNestedManyWithoutGuestReceiptInput
  }

  export type guestReceiptsUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
    guestReceiptDetail?: guestReceiptDetailUpdateManyWithoutGuestReceiptNestedInput
  }

  export type guestReceiptsUncheckedUpdateInput = {
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
    guestReceiptDetail?: guestReceiptDetailUncheckedUpdateManyWithoutGuestReceiptNestedInput
  }

  export type guestReceiptsCreateManyInput = {
    id?: string
    email: string
    phoneNumber: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
  }

  export type guestReceiptsUpdateManyMutationInput = {
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type guestReceiptsUncheckedUpdateManyInput = {
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type guestReceiptDetailCreateInput = {
    id?: string
    quantity: number
    product: productsCreateNestedOneWithoutGuestReceiptDetailInput
    guestReceipt: guestReceiptsCreateNestedOneWithoutGuestReceiptDetailInput
  }

  export type guestReceiptDetailUncheckedCreateInput = {
    id?: string
    productId: string
    quantity: number
    guestReceiptId: string
  }

  export type guestReceiptDetailUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    product?: productsUpdateOneRequiredWithoutGuestReceiptDetailNestedInput
    guestReceipt?: guestReceiptsUpdateOneRequiredWithoutGuestReceiptDetailNestedInput
  }

  export type guestReceiptDetailUncheckedUpdateInput = {
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    guestReceiptId?: StringFieldUpdateOperationsInput | string
  }

  export type guestReceiptDetailCreateManyInput = {
    id?: string
    productId: string
    quantity: number
    guestReceiptId: string
  }

  export type guestReceiptDetailUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type guestReceiptDetailUncheckedUpdateManyInput = {
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    guestReceiptId?: StringFieldUpdateOperationsInput | string
  }

  export type userReceiptDetailCreateInput = {
    id?: string
    quantity: number
    product: productsCreateNestedOneWithoutUserReceiptDetailInput
    userReceipt: userReceiptsCreateNestedOneWithoutUserReceiptDetailInput
  }

  export type userReceiptDetailUncheckedCreateInput = {
    id?: string
    productId: string
    quantity: number
    userReceiptId: string
  }

  export type userReceiptDetailUpdateInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    product?: productsUpdateOneRequiredWithoutUserReceiptDetailNestedInput
    userReceipt?: userReceiptsUpdateOneRequiredWithoutUserReceiptDetailNestedInput
  }

  export type userReceiptDetailUncheckedUpdateInput = {
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    userReceiptId?: StringFieldUpdateOperationsInput | string
  }

  export type userReceiptDetailCreateManyInput = {
    id?: string
    productId: string
    quantity: number
    userReceiptId: string
  }

  export type userReceiptDetailUpdateManyMutationInput = {
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type userReceiptDetailUncheckedUpdateManyInput = {
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
    userReceiptId?: StringFieldUpdateOperationsInput | string
  }

  export type userOrderCreateInput = {
    id?: string
    userId: string
    data: string
  }

  export type userOrderUncheckedCreateInput = {
    id?: string
    userId: string
    data: string
  }

  export type userOrderUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type userOrderUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type userOrderCreateManyInput = {
    id?: string
    userId: string
    data: string
  }

  export type userOrderUpdateManyMutationInput = {
    userId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type userOrderUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    data?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AddressCompositeListFilter = {
    equals?: AddressObjectEqualityInput[]
    every?: AddressWhereInput
    some?: AddressWhereInput
    none?: AddressWhereInput
    isEmpty?: boolean
    isSet?: boolean
  }

  export type AddressObjectEqualityInput = {
    provinceId: number
    provinceName: string
    districtId: number
    districtName: string
    wardCode: string
    wardName: string
    title: string
    id: string
  }

  export type UserReceiptsListRelationFilter = {
    every?: userReceiptsWhereInput
    some?: userReceiptsWhereInput
    none?: userReceiptsWhereInput
  }

  export type AddressOrderByCompositeAggregateInput = {
    _count?: SortOrder
  }

  export type userReceiptsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type usersCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    emailConfirm?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    isActive?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    isAdmin?: SortOrder
  }

  export type usersMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    emailConfirm?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    isActive?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    isAdmin?: SortOrder
  }

  export type usersMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    emailConfirm?: SortOrder
    userName?: SortOrder
    password?: SortOrder
    firstName?: SortOrder
    lastName?: SortOrder
    avatar?: SortOrder
    isActive?: SortOrder
    createAt?: SortOrder
    updateAt?: SortOrder
    isAdmin?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type ProductsListRelationFilter = {
    every?: productsWhereInput
    some?: productsWhereInput
    none?: productsWhereInput
  }

  export type productsOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type categoriesCountOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    active?: SortOrder
    avatar?: SortOrder
  }

  export type categoriesMaxOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    active?: SortOrder
    avatar?: SortOrder
  }

  export type categoriesMinOrderByAggregateInput = {
    id?: SortOrder
    title?: SortOrder
    active?: SortOrder
    avatar?: SortOrder
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type CategoriesRelationFilter = {
    is?: categoriesWhereInput
    isNot?: categoriesWhereInput
  }

  export type ProductPicturesListRelationFilter = {
    every?: productPicturesWhereInput
    some?: productPicturesWhereInput
    none?: productPicturesWhereInput
  }

  export type GuestReceiptDetailListRelationFilter = {
    every?: guestReceiptDetailWhereInput
    some?: guestReceiptDetailWhereInput
    none?: guestReceiptDetailWhereInput
  }

  export type UserReceiptDetailListRelationFilter = {
    every?: userReceiptDetailWhereInput
    some?: userReceiptDetailWhereInput
    none?: userReceiptDetailWhereInput
  }

  export type productPicturesOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type guestReceiptDetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type userReceiptDetailOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type productsCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    price?: SortOrder
    des?: SortOrder
    categoryId?: SortOrder
  }

  export type productsAvgOrderByAggregateInput = {
    price?: SortOrder
  }

  export type productsMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    price?: SortOrder
    des?: SortOrder
    categoryId?: SortOrder
  }

  export type productsMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    avatar?: SortOrder
    price?: SortOrder
    des?: SortOrder
    categoryId?: SortOrder
  }

  export type productsSumOrderByAggregateInput = {
    price?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ProductsRelationFilter = {
    is?: productsWhereInput
    isNot?: productsWhereInput
  }

  export type productPicturesCountOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    productId?: SortOrder
  }

  export type productPicturesMaxOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    productId?: SortOrder
  }

  export type productPicturesMinOrderByAggregateInput = {
    id?: SortOrder
    path?: SortOrder
    productId?: SortOrder
  }

  export type EnumReceiptStateFilter<$PrismaModel = never> = {
    equals?: $Enums.ReceiptState | EnumReceiptStateFieldRefInput<$PrismaModel>
    in?: $Enums.ReceiptState[] | ListEnumReceiptStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReceiptState[] | ListEnumReceiptStateFieldRefInput<$PrismaModel>
    not?: NestedEnumReceiptStateFilter<$PrismaModel> | $Enums.ReceiptState
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type EnumReceiptPayModeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReceiptPayMode | EnumReceiptPayModeFieldRefInput<$PrismaModel>
    in?: $Enums.ReceiptPayMode[] | ListEnumReceiptPayModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReceiptPayMode[] | ListEnumReceiptPayModeFieldRefInput<$PrismaModel>
    not?: NestedEnumReceiptPayModeFilter<$PrismaModel> | $Enums.ReceiptPayMode
  }

  export type UsersRelationFilter = {
    is?: usersWhereInput
    isNot?: usersWhereInput
  }

  export type userReceiptsCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    state?: SortOrder
    createAt?: SortOrder
    acceptTime?: SortOrder
    shippingTime?: SortOrder
    doneTime?: SortOrder
    total?: SortOrder
    payMode?: SortOrder
    paid?: SortOrder
  }

  export type userReceiptsAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type userReceiptsMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    state?: SortOrder
    createAt?: SortOrder
    acceptTime?: SortOrder
    shippingTime?: SortOrder
    doneTime?: SortOrder
    total?: SortOrder
    payMode?: SortOrder
    paid?: SortOrder
  }

  export type userReceiptsMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    state?: SortOrder
    createAt?: SortOrder
    acceptTime?: SortOrder
    shippingTime?: SortOrder
    doneTime?: SortOrder
    total?: SortOrder
    payMode?: SortOrder
    paid?: SortOrder
  }

  export type userReceiptsSumOrderByAggregateInput = {
    total?: SortOrder
  }

  export type EnumReceiptStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReceiptState | EnumReceiptStateFieldRefInput<$PrismaModel>
    in?: $Enums.ReceiptState[] | ListEnumReceiptStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReceiptState[] | ListEnumReceiptStateFieldRefInput<$PrismaModel>
    not?: NestedEnumReceiptStateWithAggregatesFilter<$PrismaModel> | $Enums.ReceiptState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReceiptStateFilter<$PrismaModel>
    _max?: NestedEnumReceiptStateFilter<$PrismaModel>
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type EnumReceiptPayModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReceiptPayMode | EnumReceiptPayModeFieldRefInput<$PrismaModel>
    in?: $Enums.ReceiptPayMode[] | ListEnumReceiptPayModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReceiptPayMode[] | ListEnumReceiptPayModeFieldRefInput<$PrismaModel>
    not?: NestedEnumReceiptPayModeWithAggregatesFilter<$PrismaModel> | $Enums.ReceiptPayMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReceiptPayModeFilter<$PrismaModel>
    _max?: NestedEnumReceiptPayModeFilter<$PrismaModel>
  }

  export type guestReceiptsCountOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    state?: SortOrder
    createAt?: SortOrder
    acceptTime?: SortOrder
    shippingTime?: SortOrder
    doneTime?: SortOrder
    total?: SortOrder
    payMode?: SortOrder
    paid?: SortOrder
  }

  export type guestReceiptsAvgOrderByAggregateInput = {
    total?: SortOrder
  }

  export type guestReceiptsMaxOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    state?: SortOrder
    createAt?: SortOrder
    acceptTime?: SortOrder
    shippingTime?: SortOrder
    doneTime?: SortOrder
    total?: SortOrder
    payMode?: SortOrder
    paid?: SortOrder
  }

  export type guestReceiptsMinOrderByAggregateInput = {
    id?: SortOrder
    email?: SortOrder
    phoneNumber?: SortOrder
    state?: SortOrder
    createAt?: SortOrder
    acceptTime?: SortOrder
    shippingTime?: SortOrder
    doneTime?: SortOrder
    total?: SortOrder
    payMode?: SortOrder
    paid?: SortOrder
  }

  export type guestReceiptsSumOrderByAggregateInput = {
    total?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type GuestReceiptsRelationFilter = {
    is?: guestReceiptsWhereInput
    isNot?: guestReceiptsWhereInput
  }

  export type guestReceiptDetailCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    guestReceiptId?: SortOrder
  }

  export type guestReceiptDetailAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type guestReceiptDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    guestReceiptId?: SortOrder
  }

  export type guestReceiptDetailMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    guestReceiptId?: SortOrder
  }

  export type guestReceiptDetailSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type UserReceiptsRelationFilter = {
    is?: userReceiptsWhereInput
    isNot?: userReceiptsWhereInput
  }

  export type userReceiptDetailCountOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    userReceiptId?: SortOrder
  }

  export type userReceiptDetailAvgOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type userReceiptDetailMaxOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    userReceiptId?: SortOrder
  }

  export type userReceiptDetailMinOrderByAggregateInput = {
    id?: SortOrder
    productId?: SortOrder
    quantity?: SortOrder
    userReceiptId?: SortOrder
  }

  export type userReceiptDetailSumOrderByAggregateInput = {
    quantity?: SortOrder
  }

  export type userOrderCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    data?: SortOrder
  }

  export type userOrderMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    data?: SortOrder
  }

  export type userOrderMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    data?: SortOrder
  }

  export type AddressListCreateEnvelopeInput = {
    set?: AddressCreateInput | AddressCreateInput[]
  }

  export type AddressCreateInput = {
    provinceId: number
    provinceName: string
    districtId: number
    districtName: string
    wardCode: string
    wardName: string
    title: string
    id: string
  }

  export type userReceiptsCreateNestedManyWithoutUserInput = {
    create?: XOR<userReceiptsCreateWithoutUserInput, userReceiptsUncheckedCreateWithoutUserInput> | userReceiptsCreateWithoutUserInput[] | userReceiptsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userReceiptsCreateOrConnectWithoutUserInput | userReceiptsCreateOrConnectWithoutUserInput[]
    createMany?: userReceiptsCreateManyUserInputEnvelope
    connect?: userReceiptsWhereUniqueInput | userReceiptsWhereUniqueInput[]
  }

  export type userReceiptsUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<userReceiptsCreateWithoutUserInput, userReceiptsUncheckedCreateWithoutUserInput> | userReceiptsCreateWithoutUserInput[] | userReceiptsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userReceiptsCreateOrConnectWithoutUserInput | userReceiptsCreateOrConnectWithoutUserInput[]
    createMany?: userReceiptsCreateManyUserInputEnvelope
    connect?: userReceiptsWhereUniqueInput | userReceiptsWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AddressListUpdateEnvelopeInput = {
    set?: AddressCreateInput | AddressCreateInput[]
    push?: AddressCreateInput | AddressCreateInput[]
    updateMany?: AddressUpdateManyInput
    deleteMany?: AddressDeleteManyInput
  }

  export type userReceiptsUpdateManyWithoutUserNestedInput = {
    create?: XOR<userReceiptsCreateWithoutUserInput, userReceiptsUncheckedCreateWithoutUserInput> | userReceiptsCreateWithoutUserInput[] | userReceiptsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userReceiptsCreateOrConnectWithoutUserInput | userReceiptsCreateOrConnectWithoutUserInput[]
    upsert?: userReceiptsUpsertWithWhereUniqueWithoutUserInput | userReceiptsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: userReceiptsCreateManyUserInputEnvelope
    set?: userReceiptsWhereUniqueInput | userReceiptsWhereUniqueInput[]
    disconnect?: userReceiptsWhereUniqueInput | userReceiptsWhereUniqueInput[]
    delete?: userReceiptsWhereUniqueInput | userReceiptsWhereUniqueInput[]
    connect?: userReceiptsWhereUniqueInput | userReceiptsWhereUniqueInput[]
    update?: userReceiptsUpdateWithWhereUniqueWithoutUserInput | userReceiptsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: userReceiptsUpdateManyWithWhereWithoutUserInput | userReceiptsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: userReceiptsScalarWhereInput | userReceiptsScalarWhereInput[]
  }

  export type userReceiptsUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<userReceiptsCreateWithoutUserInput, userReceiptsUncheckedCreateWithoutUserInput> | userReceiptsCreateWithoutUserInput[] | userReceiptsUncheckedCreateWithoutUserInput[]
    connectOrCreate?: userReceiptsCreateOrConnectWithoutUserInput | userReceiptsCreateOrConnectWithoutUserInput[]
    upsert?: userReceiptsUpsertWithWhereUniqueWithoutUserInput | userReceiptsUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: userReceiptsCreateManyUserInputEnvelope
    set?: userReceiptsWhereUniqueInput | userReceiptsWhereUniqueInput[]
    disconnect?: userReceiptsWhereUniqueInput | userReceiptsWhereUniqueInput[]
    delete?: userReceiptsWhereUniqueInput | userReceiptsWhereUniqueInput[]
    connect?: userReceiptsWhereUniqueInput | userReceiptsWhereUniqueInput[]
    update?: userReceiptsUpdateWithWhereUniqueWithoutUserInput | userReceiptsUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: userReceiptsUpdateManyWithWhereWithoutUserInput | userReceiptsUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: userReceiptsScalarWhereInput | userReceiptsScalarWhereInput[]
  }

  export type productsCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
  }

  export type productsUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutCategoryInput | productsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutCategoryInput | productsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutCategoryInput | productsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type productsUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput> | productsCreateWithoutCategoryInput[] | productsUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: productsCreateOrConnectWithoutCategoryInput | productsCreateOrConnectWithoutCategoryInput[]
    upsert?: productsUpsertWithWhereUniqueWithoutCategoryInput | productsUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: productsCreateManyCategoryInputEnvelope
    set?: productsWhereUniqueInput | productsWhereUniqueInput[]
    disconnect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    delete?: productsWhereUniqueInput | productsWhereUniqueInput[]
    connect?: productsWhereUniqueInput | productsWhereUniqueInput[]
    update?: productsUpdateWithWhereUniqueWithoutCategoryInput | productsUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: productsUpdateManyWithWhereWithoutCategoryInput | productsUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: productsScalarWhereInput | productsScalarWhereInput[]
  }

  export type categoriesCreateNestedOneWithoutProductsInput = {
    create?: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutProductsInput
    connect?: categoriesWhereUniqueInput
  }

  export type productPicturesCreateNestedManyWithoutProductInput = {
    create?: XOR<productPicturesCreateWithoutProductInput, productPicturesUncheckedCreateWithoutProductInput> | productPicturesCreateWithoutProductInput[] | productPicturesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productPicturesCreateOrConnectWithoutProductInput | productPicturesCreateOrConnectWithoutProductInput[]
    createMany?: productPicturesCreateManyProductInputEnvelope
    connect?: productPicturesWhereUniqueInput | productPicturesWhereUniqueInput[]
  }

  export type guestReceiptDetailCreateNestedManyWithoutProductInput = {
    create?: XOR<guestReceiptDetailCreateWithoutProductInput, guestReceiptDetailUncheckedCreateWithoutProductInput> | guestReceiptDetailCreateWithoutProductInput[] | guestReceiptDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: guestReceiptDetailCreateOrConnectWithoutProductInput | guestReceiptDetailCreateOrConnectWithoutProductInput[]
    createMany?: guestReceiptDetailCreateManyProductInputEnvelope
    connect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
  }

  export type userReceiptDetailCreateNestedManyWithoutProductInput = {
    create?: XOR<userReceiptDetailCreateWithoutProductInput, userReceiptDetailUncheckedCreateWithoutProductInput> | userReceiptDetailCreateWithoutProductInput[] | userReceiptDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: userReceiptDetailCreateOrConnectWithoutProductInput | userReceiptDetailCreateOrConnectWithoutProductInput[]
    createMany?: userReceiptDetailCreateManyProductInputEnvelope
    connect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
  }

  export type productPicturesUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<productPicturesCreateWithoutProductInput, productPicturesUncheckedCreateWithoutProductInput> | productPicturesCreateWithoutProductInput[] | productPicturesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productPicturesCreateOrConnectWithoutProductInput | productPicturesCreateOrConnectWithoutProductInput[]
    createMany?: productPicturesCreateManyProductInputEnvelope
    connect?: productPicturesWhereUniqueInput | productPicturesWhereUniqueInput[]
  }

  export type guestReceiptDetailUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<guestReceiptDetailCreateWithoutProductInput, guestReceiptDetailUncheckedCreateWithoutProductInput> | guestReceiptDetailCreateWithoutProductInput[] | guestReceiptDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: guestReceiptDetailCreateOrConnectWithoutProductInput | guestReceiptDetailCreateOrConnectWithoutProductInput[]
    createMany?: guestReceiptDetailCreateManyProductInputEnvelope
    connect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
  }

  export type userReceiptDetailUncheckedCreateNestedManyWithoutProductInput = {
    create?: XOR<userReceiptDetailCreateWithoutProductInput, userReceiptDetailUncheckedCreateWithoutProductInput> | userReceiptDetailCreateWithoutProductInput[] | userReceiptDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: userReceiptDetailCreateOrConnectWithoutProductInput | userReceiptDetailCreateOrConnectWithoutProductInput[]
    createMany?: userReceiptDetailCreateManyProductInputEnvelope
    connect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type categoriesUpdateOneRequiredWithoutProductsNestedInput = {
    create?: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
    connectOrCreate?: categoriesCreateOrConnectWithoutProductsInput
    upsert?: categoriesUpsertWithoutProductsInput
    connect?: categoriesWhereUniqueInput
    update?: XOR<XOR<categoriesUpdateToOneWithWhereWithoutProductsInput, categoriesUpdateWithoutProductsInput>, categoriesUncheckedUpdateWithoutProductsInput>
  }

  export type productPicturesUpdateManyWithoutProductNestedInput = {
    create?: XOR<productPicturesCreateWithoutProductInput, productPicturesUncheckedCreateWithoutProductInput> | productPicturesCreateWithoutProductInput[] | productPicturesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productPicturesCreateOrConnectWithoutProductInput | productPicturesCreateOrConnectWithoutProductInput[]
    upsert?: productPicturesUpsertWithWhereUniqueWithoutProductInput | productPicturesUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: productPicturesCreateManyProductInputEnvelope
    set?: productPicturesWhereUniqueInput | productPicturesWhereUniqueInput[]
    disconnect?: productPicturesWhereUniqueInput | productPicturesWhereUniqueInput[]
    delete?: productPicturesWhereUniqueInput | productPicturesWhereUniqueInput[]
    connect?: productPicturesWhereUniqueInput | productPicturesWhereUniqueInput[]
    update?: productPicturesUpdateWithWhereUniqueWithoutProductInput | productPicturesUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: productPicturesUpdateManyWithWhereWithoutProductInput | productPicturesUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: productPicturesScalarWhereInput | productPicturesScalarWhereInput[]
  }

  export type guestReceiptDetailUpdateManyWithoutProductNestedInput = {
    create?: XOR<guestReceiptDetailCreateWithoutProductInput, guestReceiptDetailUncheckedCreateWithoutProductInput> | guestReceiptDetailCreateWithoutProductInput[] | guestReceiptDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: guestReceiptDetailCreateOrConnectWithoutProductInput | guestReceiptDetailCreateOrConnectWithoutProductInput[]
    upsert?: guestReceiptDetailUpsertWithWhereUniqueWithoutProductInput | guestReceiptDetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: guestReceiptDetailCreateManyProductInputEnvelope
    set?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    disconnect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    delete?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    connect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    update?: guestReceiptDetailUpdateWithWhereUniqueWithoutProductInput | guestReceiptDetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: guestReceiptDetailUpdateManyWithWhereWithoutProductInput | guestReceiptDetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: guestReceiptDetailScalarWhereInput | guestReceiptDetailScalarWhereInput[]
  }

  export type userReceiptDetailUpdateManyWithoutProductNestedInput = {
    create?: XOR<userReceiptDetailCreateWithoutProductInput, userReceiptDetailUncheckedCreateWithoutProductInput> | userReceiptDetailCreateWithoutProductInput[] | userReceiptDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: userReceiptDetailCreateOrConnectWithoutProductInput | userReceiptDetailCreateOrConnectWithoutProductInput[]
    upsert?: userReceiptDetailUpsertWithWhereUniqueWithoutProductInput | userReceiptDetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: userReceiptDetailCreateManyProductInputEnvelope
    set?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    disconnect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    delete?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    connect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    update?: userReceiptDetailUpdateWithWhereUniqueWithoutProductInput | userReceiptDetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: userReceiptDetailUpdateManyWithWhereWithoutProductInput | userReceiptDetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: userReceiptDetailScalarWhereInput | userReceiptDetailScalarWhereInput[]
  }

  export type productPicturesUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<productPicturesCreateWithoutProductInput, productPicturesUncheckedCreateWithoutProductInput> | productPicturesCreateWithoutProductInput[] | productPicturesUncheckedCreateWithoutProductInput[]
    connectOrCreate?: productPicturesCreateOrConnectWithoutProductInput | productPicturesCreateOrConnectWithoutProductInput[]
    upsert?: productPicturesUpsertWithWhereUniqueWithoutProductInput | productPicturesUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: productPicturesCreateManyProductInputEnvelope
    set?: productPicturesWhereUniqueInput | productPicturesWhereUniqueInput[]
    disconnect?: productPicturesWhereUniqueInput | productPicturesWhereUniqueInput[]
    delete?: productPicturesWhereUniqueInput | productPicturesWhereUniqueInput[]
    connect?: productPicturesWhereUniqueInput | productPicturesWhereUniqueInput[]
    update?: productPicturesUpdateWithWhereUniqueWithoutProductInput | productPicturesUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: productPicturesUpdateManyWithWhereWithoutProductInput | productPicturesUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: productPicturesScalarWhereInput | productPicturesScalarWhereInput[]
  }

  export type guestReceiptDetailUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<guestReceiptDetailCreateWithoutProductInput, guestReceiptDetailUncheckedCreateWithoutProductInput> | guestReceiptDetailCreateWithoutProductInput[] | guestReceiptDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: guestReceiptDetailCreateOrConnectWithoutProductInput | guestReceiptDetailCreateOrConnectWithoutProductInput[]
    upsert?: guestReceiptDetailUpsertWithWhereUniqueWithoutProductInput | guestReceiptDetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: guestReceiptDetailCreateManyProductInputEnvelope
    set?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    disconnect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    delete?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    connect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    update?: guestReceiptDetailUpdateWithWhereUniqueWithoutProductInput | guestReceiptDetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: guestReceiptDetailUpdateManyWithWhereWithoutProductInput | guestReceiptDetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: guestReceiptDetailScalarWhereInput | guestReceiptDetailScalarWhereInput[]
  }

  export type userReceiptDetailUncheckedUpdateManyWithoutProductNestedInput = {
    create?: XOR<userReceiptDetailCreateWithoutProductInput, userReceiptDetailUncheckedCreateWithoutProductInput> | userReceiptDetailCreateWithoutProductInput[] | userReceiptDetailUncheckedCreateWithoutProductInput[]
    connectOrCreate?: userReceiptDetailCreateOrConnectWithoutProductInput | userReceiptDetailCreateOrConnectWithoutProductInput[]
    upsert?: userReceiptDetailUpsertWithWhereUniqueWithoutProductInput | userReceiptDetailUpsertWithWhereUniqueWithoutProductInput[]
    createMany?: userReceiptDetailCreateManyProductInputEnvelope
    set?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    disconnect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    delete?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    connect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    update?: userReceiptDetailUpdateWithWhereUniqueWithoutProductInput | userReceiptDetailUpdateWithWhereUniqueWithoutProductInput[]
    updateMany?: userReceiptDetailUpdateManyWithWhereWithoutProductInput | userReceiptDetailUpdateManyWithWhereWithoutProductInput[]
    deleteMany?: userReceiptDetailScalarWhereInput | userReceiptDetailScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutProductPicturesInput = {
    create?: XOR<productsCreateWithoutProductPicturesInput, productsUncheckedCreateWithoutProductPicturesInput>
    connectOrCreate?: productsCreateOrConnectWithoutProductPicturesInput
    connect?: productsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutProductPicturesNestedInput = {
    create?: XOR<productsCreateWithoutProductPicturesInput, productsUncheckedCreateWithoutProductPicturesInput>
    connectOrCreate?: productsCreateOrConnectWithoutProductPicturesInput
    upsert?: productsUpsertWithoutProductPicturesInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutProductPicturesInput, productsUpdateWithoutProductPicturesInput>, productsUncheckedUpdateWithoutProductPicturesInput>
  }

  export type usersCreateNestedOneWithoutUserReceiptsInput = {
    create?: XOR<usersCreateWithoutUserReceiptsInput, usersUncheckedCreateWithoutUserReceiptsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUserReceiptsInput
    connect?: usersWhereUniqueInput
  }

  export type userReceiptDetailCreateNestedManyWithoutUserReceiptInput = {
    create?: XOR<userReceiptDetailCreateWithoutUserReceiptInput, userReceiptDetailUncheckedCreateWithoutUserReceiptInput> | userReceiptDetailCreateWithoutUserReceiptInput[] | userReceiptDetailUncheckedCreateWithoutUserReceiptInput[]
    connectOrCreate?: userReceiptDetailCreateOrConnectWithoutUserReceiptInput | userReceiptDetailCreateOrConnectWithoutUserReceiptInput[]
    createMany?: userReceiptDetailCreateManyUserReceiptInputEnvelope
    connect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
  }

  export type userReceiptDetailUncheckedCreateNestedManyWithoutUserReceiptInput = {
    create?: XOR<userReceiptDetailCreateWithoutUserReceiptInput, userReceiptDetailUncheckedCreateWithoutUserReceiptInput> | userReceiptDetailCreateWithoutUserReceiptInput[] | userReceiptDetailUncheckedCreateWithoutUserReceiptInput[]
    connectOrCreate?: userReceiptDetailCreateOrConnectWithoutUserReceiptInput | userReceiptDetailCreateOrConnectWithoutUserReceiptInput[]
    createMany?: userReceiptDetailCreateManyUserReceiptInputEnvelope
    connect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
  }

  export type EnumReceiptStateFieldUpdateOperationsInput = {
    set?: $Enums.ReceiptState
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
    unset?: boolean
  }

  export type EnumReceiptPayModeFieldUpdateOperationsInput = {
    set?: $Enums.ReceiptPayMode
  }

  export type usersUpdateOneRequiredWithoutUserReceiptsNestedInput = {
    create?: XOR<usersCreateWithoutUserReceiptsInput, usersUncheckedCreateWithoutUserReceiptsInput>
    connectOrCreate?: usersCreateOrConnectWithoutUserReceiptsInput
    upsert?: usersUpsertWithoutUserReceiptsInput
    connect?: usersWhereUniqueInput
    update?: XOR<XOR<usersUpdateToOneWithWhereWithoutUserReceiptsInput, usersUpdateWithoutUserReceiptsInput>, usersUncheckedUpdateWithoutUserReceiptsInput>
  }

  export type userReceiptDetailUpdateManyWithoutUserReceiptNestedInput = {
    create?: XOR<userReceiptDetailCreateWithoutUserReceiptInput, userReceiptDetailUncheckedCreateWithoutUserReceiptInput> | userReceiptDetailCreateWithoutUserReceiptInput[] | userReceiptDetailUncheckedCreateWithoutUserReceiptInput[]
    connectOrCreate?: userReceiptDetailCreateOrConnectWithoutUserReceiptInput | userReceiptDetailCreateOrConnectWithoutUserReceiptInput[]
    upsert?: userReceiptDetailUpsertWithWhereUniqueWithoutUserReceiptInput | userReceiptDetailUpsertWithWhereUniqueWithoutUserReceiptInput[]
    createMany?: userReceiptDetailCreateManyUserReceiptInputEnvelope
    set?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    disconnect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    delete?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    connect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    update?: userReceiptDetailUpdateWithWhereUniqueWithoutUserReceiptInput | userReceiptDetailUpdateWithWhereUniqueWithoutUserReceiptInput[]
    updateMany?: userReceiptDetailUpdateManyWithWhereWithoutUserReceiptInput | userReceiptDetailUpdateManyWithWhereWithoutUserReceiptInput[]
    deleteMany?: userReceiptDetailScalarWhereInput | userReceiptDetailScalarWhereInput[]
  }

  export type userReceiptDetailUncheckedUpdateManyWithoutUserReceiptNestedInput = {
    create?: XOR<userReceiptDetailCreateWithoutUserReceiptInput, userReceiptDetailUncheckedCreateWithoutUserReceiptInput> | userReceiptDetailCreateWithoutUserReceiptInput[] | userReceiptDetailUncheckedCreateWithoutUserReceiptInput[]
    connectOrCreate?: userReceiptDetailCreateOrConnectWithoutUserReceiptInput | userReceiptDetailCreateOrConnectWithoutUserReceiptInput[]
    upsert?: userReceiptDetailUpsertWithWhereUniqueWithoutUserReceiptInput | userReceiptDetailUpsertWithWhereUniqueWithoutUserReceiptInput[]
    createMany?: userReceiptDetailCreateManyUserReceiptInputEnvelope
    set?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    disconnect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    delete?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    connect?: userReceiptDetailWhereUniqueInput | userReceiptDetailWhereUniqueInput[]
    update?: userReceiptDetailUpdateWithWhereUniqueWithoutUserReceiptInput | userReceiptDetailUpdateWithWhereUniqueWithoutUserReceiptInput[]
    updateMany?: userReceiptDetailUpdateManyWithWhereWithoutUserReceiptInput | userReceiptDetailUpdateManyWithWhereWithoutUserReceiptInput[]
    deleteMany?: userReceiptDetailScalarWhereInput | userReceiptDetailScalarWhereInput[]
  }

  export type guestReceiptDetailCreateNestedManyWithoutGuestReceiptInput = {
    create?: XOR<guestReceiptDetailCreateWithoutGuestReceiptInput, guestReceiptDetailUncheckedCreateWithoutGuestReceiptInput> | guestReceiptDetailCreateWithoutGuestReceiptInput[] | guestReceiptDetailUncheckedCreateWithoutGuestReceiptInput[]
    connectOrCreate?: guestReceiptDetailCreateOrConnectWithoutGuestReceiptInput | guestReceiptDetailCreateOrConnectWithoutGuestReceiptInput[]
    createMany?: guestReceiptDetailCreateManyGuestReceiptInputEnvelope
    connect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
  }

  export type guestReceiptDetailUncheckedCreateNestedManyWithoutGuestReceiptInput = {
    create?: XOR<guestReceiptDetailCreateWithoutGuestReceiptInput, guestReceiptDetailUncheckedCreateWithoutGuestReceiptInput> | guestReceiptDetailCreateWithoutGuestReceiptInput[] | guestReceiptDetailUncheckedCreateWithoutGuestReceiptInput[]
    connectOrCreate?: guestReceiptDetailCreateOrConnectWithoutGuestReceiptInput | guestReceiptDetailCreateOrConnectWithoutGuestReceiptInput[]
    createMany?: guestReceiptDetailCreateManyGuestReceiptInputEnvelope
    connect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
  }

  export type guestReceiptDetailUpdateManyWithoutGuestReceiptNestedInput = {
    create?: XOR<guestReceiptDetailCreateWithoutGuestReceiptInput, guestReceiptDetailUncheckedCreateWithoutGuestReceiptInput> | guestReceiptDetailCreateWithoutGuestReceiptInput[] | guestReceiptDetailUncheckedCreateWithoutGuestReceiptInput[]
    connectOrCreate?: guestReceiptDetailCreateOrConnectWithoutGuestReceiptInput | guestReceiptDetailCreateOrConnectWithoutGuestReceiptInput[]
    upsert?: guestReceiptDetailUpsertWithWhereUniqueWithoutGuestReceiptInput | guestReceiptDetailUpsertWithWhereUniqueWithoutGuestReceiptInput[]
    createMany?: guestReceiptDetailCreateManyGuestReceiptInputEnvelope
    set?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    disconnect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    delete?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    connect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    update?: guestReceiptDetailUpdateWithWhereUniqueWithoutGuestReceiptInput | guestReceiptDetailUpdateWithWhereUniqueWithoutGuestReceiptInput[]
    updateMany?: guestReceiptDetailUpdateManyWithWhereWithoutGuestReceiptInput | guestReceiptDetailUpdateManyWithWhereWithoutGuestReceiptInput[]
    deleteMany?: guestReceiptDetailScalarWhereInput | guestReceiptDetailScalarWhereInput[]
  }

  export type guestReceiptDetailUncheckedUpdateManyWithoutGuestReceiptNestedInput = {
    create?: XOR<guestReceiptDetailCreateWithoutGuestReceiptInput, guestReceiptDetailUncheckedCreateWithoutGuestReceiptInput> | guestReceiptDetailCreateWithoutGuestReceiptInput[] | guestReceiptDetailUncheckedCreateWithoutGuestReceiptInput[]
    connectOrCreate?: guestReceiptDetailCreateOrConnectWithoutGuestReceiptInput | guestReceiptDetailCreateOrConnectWithoutGuestReceiptInput[]
    upsert?: guestReceiptDetailUpsertWithWhereUniqueWithoutGuestReceiptInput | guestReceiptDetailUpsertWithWhereUniqueWithoutGuestReceiptInput[]
    createMany?: guestReceiptDetailCreateManyGuestReceiptInputEnvelope
    set?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    disconnect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    delete?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    connect?: guestReceiptDetailWhereUniqueInput | guestReceiptDetailWhereUniqueInput[]
    update?: guestReceiptDetailUpdateWithWhereUniqueWithoutGuestReceiptInput | guestReceiptDetailUpdateWithWhereUniqueWithoutGuestReceiptInput[]
    updateMany?: guestReceiptDetailUpdateManyWithWhereWithoutGuestReceiptInput | guestReceiptDetailUpdateManyWithWhereWithoutGuestReceiptInput[]
    deleteMany?: guestReceiptDetailScalarWhereInput | guestReceiptDetailScalarWhereInput[]
  }

  export type productsCreateNestedOneWithoutGuestReceiptDetailInput = {
    create?: XOR<productsCreateWithoutGuestReceiptDetailInput, productsUncheckedCreateWithoutGuestReceiptDetailInput>
    connectOrCreate?: productsCreateOrConnectWithoutGuestReceiptDetailInput
    connect?: productsWhereUniqueInput
  }

  export type guestReceiptsCreateNestedOneWithoutGuestReceiptDetailInput = {
    create?: XOR<guestReceiptsCreateWithoutGuestReceiptDetailInput, guestReceiptsUncheckedCreateWithoutGuestReceiptDetailInput>
    connectOrCreate?: guestReceiptsCreateOrConnectWithoutGuestReceiptDetailInput
    connect?: guestReceiptsWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type productsUpdateOneRequiredWithoutGuestReceiptDetailNestedInput = {
    create?: XOR<productsCreateWithoutGuestReceiptDetailInput, productsUncheckedCreateWithoutGuestReceiptDetailInput>
    connectOrCreate?: productsCreateOrConnectWithoutGuestReceiptDetailInput
    upsert?: productsUpsertWithoutGuestReceiptDetailInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutGuestReceiptDetailInput, productsUpdateWithoutGuestReceiptDetailInput>, productsUncheckedUpdateWithoutGuestReceiptDetailInput>
  }

  export type guestReceiptsUpdateOneRequiredWithoutGuestReceiptDetailNestedInput = {
    create?: XOR<guestReceiptsCreateWithoutGuestReceiptDetailInput, guestReceiptsUncheckedCreateWithoutGuestReceiptDetailInput>
    connectOrCreate?: guestReceiptsCreateOrConnectWithoutGuestReceiptDetailInput
    upsert?: guestReceiptsUpsertWithoutGuestReceiptDetailInput
    connect?: guestReceiptsWhereUniqueInput
    update?: XOR<XOR<guestReceiptsUpdateToOneWithWhereWithoutGuestReceiptDetailInput, guestReceiptsUpdateWithoutGuestReceiptDetailInput>, guestReceiptsUncheckedUpdateWithoutGuestReceiptDetailInput>
  }

  export type productsCreateNestedOneWithoutUserReceiptDetailInput = {
    create?: XOR<productsCreateWithoutUserReceiptDetailInput, productsUncheckedCreateWithoutUserReceiptDetailInput>
    connectOrCreate?: productsCreateOrConnectWithoutUserReceiptDetailInput
    connect?: productsWhereUniqueInput
  }

  export type userReceiptsCreateNestedOneWithoutUserReceiptDetailInput = {
    create?: XOR<userReceiptsCreateWithoutUserReceiptDetailInput, userReceiptsUncheckedCreateWithoutUserReceiptDetailInput>
    connectOrCreate?: userReceiptsCreateOrConnectWithoutUserReceiptDetailInput
    connect?: userReceiptsWhereUniqueInput
  }

  export type productsUpdateOneRequiredWithoutUserReceiptDetailNestedInput = {
    create?: XOR<productsCreateWithoutUserReceiptDetailInput, productsUncheckedCreateWithoutUserReceiptDetailInput>
    connectOrCreate?: productsCreateOrConnectWithoutUserReceiptDetailInput
    upsert?: productsUpsertWithoutUserReceiptDetailInput
    connect?: productsWhereUniqueInput
    update?: XOR<XOR<productsUpdateToOneWithWhereWithoutUserReceiptDetailInput, productsUpdateWithoutUserReceiptDetailInput>, productsUncheckedUpdateWithoutUserReceiptDetailInput>
  }

  export type userReceiptsUpdateOneRequiredWithoutUserReceiptDetailNestedInput = {
    create?: XOR<userReceiptsCreateWithoutUserReceiptDetailInput, userReceiptsUncheckedCreateWithoutUserReceiptDetailInput>
    connectOrCreate?: userReceiptsCreateOrConnectWithoutUserReceiptDetailInput
    upsert?: userReceiptsUpsertWithoutUserReceiptDetailInput
    connect?: userReceiptsWhereUniqueInput
    update?: XOR<XOR<userReceiptsUpdateToOneWithWhereWithoutUserReceiptDetailInput, userReceiptsUpdateWithoutUserReceiptDetailInput>, userReceiptsUncheckedUpdateWithoutUserReceiptDetailInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AddressWhereInput = {
    AND?: AddressWhereInput | AddressWhereInput[]
    OR?: AddressWhereInput[]
    NOT?: AddressWhereInput | AddressWhereInput[]
    provinceId?: IntFilter<"Address"> | number
    provinceName?: StringFilter<"Address"> | string
    districtId?: IntFilter<"Address"> | number
    districtName?: StringFilter<"Address"> | string
    wardCode?: StringFilter<"Address"> | string
    wardName?: StringFilter<"Address"> | string
    title?: StringFilter<"Address"> | string
    id?: StringFilter<"Address"> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumReceiptStateFilter<$PrismaModel = never> = {
    equals?: $Enums.ReceiptState | EnumReceiptStateFieldRefInput<$PrismaModel>
    in?: $Enums.ReceiptState[] | ListEnumReceiptStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReceiptState[] | ListEnumReceiptStateFieldRefInput<$PrismaModel>
    not?: NestedEnumReceiptStateFilter<$PrismaModel> | $Enums.ReceiptState
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
    isSet?: boolean
  }

  export type NestedEnumReceiptPayModeFilter<$PrismaModel = never> = {
    equals?: $Enums.ReceiptPayMode | EnumReceiptPayModeFieldRefInput<$PrismaModel>
    in?: $Enums.ReceiptPayMode[] | ListEnumReceiptPayModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReceiptPayMode[] | ListEnumReceiptPayModeFieldRefInput<$PrismaModel>
    not?: NestedEnumReceiptPayModeFilter<$PrismaModel> | $Enums.ReceiptPayMode
  }

  export type NestedEnumReceiptStateWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReceiptState | EnumReceiptStateFieldRefInput<$PrismaModel>
    in?: $Enums.ReceiptState[] | ListEnumReceiptStateFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReceiptState[] | ListEnumReceiptStateFieldRefInput<$PrismaModel>
    not?: NestedEnumReceiptStateWithAggregatesFilter<$PrismaModel> | $Enums.ReceiptState
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReceiptStateFilter<$PrismaModel>
    _max?: NestedEnumReceiptStateFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
    isSet?: boolean
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
    isSet?: boolean
  }

  export type NestedEnumReceiptPayModeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.ReceiptPayMode | EnumReceiptPayModeFieldRefInput<$PrismaModel>
    in?: $Enums.ReceiptPayMode[] | ListEnumReceiptPayModeFieldRefInput<$PrismaModel>
    notIn?: $Enums.ReceiptPayMode[] | ListEnumReceiptPayModeFieldRefInput<$PrismaModel>
    not?: NestedEnumReceiptPayModeWithAggregatesFilter<$PrismaModel> | $Enums.ReceiptPayMode
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumReceiptPayModeFilter<$PrismaModel>
    _max?: NestedEnumReceiptPayModeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type userReceiptsCreateWithoutUserInput = {
    id?: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
    userReceiptDetail?: userReceiptDetailCreateNestedManyWithoutUserReceiptInput
  }

  export type userReceiptsUncheckedCreateWithoutUserInput = {
    id?: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
    userReceiptDetail?: userReceiptDetailUncheckedCreateNestedManyWithoutUserReceiptInput
  }

  export type userReceiptsCreateOrConnectWithoutUserInput = {
    where: userReceiptsWhereUniqueInput
    create: XOR<userReceiptsCreateWithoutUserInput, userReceiptsUncheckedCreateWithoutUserInput>
  }

  export type userReceiptsCreateManyUserInputEnvelope = {
    data: userReceiptsCreateManyUserInput | userReceiptsCreateManyUserInput[]
  }

  export type AddressUpdateManyInput = {
    where: AddressWhereInput
    data: AddressUpdateInput
  }

  export type AddressDeleteManyInput = {
    where: AddressWhereInput
  }

  export type userReceiptsUpsertWithWhereUniqueWithoutUserInput = {
    where: userReceiptsWhereUniqueInput
    update: XOR<userReceiptsUpdateWithoutUserInput, userReceiptsUncheckedUpdateWithoutUserInput>
    create: XOR<userReceiptsCreateWithoutUserInput, userReceiptsUncheckedCreateWithoutUserInput>
  }

  export type userReceiptsUpdateWithWhereUniqueWithoutUserInput = {
    where: userReceiptsWhereUniqueInput
    data: XOR<userReceiptsUpdateWithoutUserInput, userReceiptsUncheckedUpdateWithoutUserInput>
  }

  export type userReceiptsUpdateManyWithWhereWithoutUserInput = {
    where: userReceiptsScalarWhereInput
    data: XOR<userReceiptsUpdateManyMutationInput, userReceiptsUncheckedUpdateManyWithoutUserInput>
  }

  export type userReceiptsScalarWhereInput = {
    AND?: userReceiptsScalarWhereInput | userReceiptsScalarWhereInput[]
    OR?: userReceiptsScalarWhereInput[]
    NOT?: userReceiptsScalarWhereInput | userReceiptsScalarWhereInput[]
    id?: StringFilter<"userReceipts"> | string
    userId?: StringFilter<"userReceipts"> | string
    state?: EnumReceiptStateFilter<"userReceipts"> | $Enums.ReceiptState
    createAt?: DateTimeFilter<"userReceipts"> | Date | string
    acceptTime?: DateTimeNullableFilter<"userReceipts"> | Date | string | null
    shippingTime?: DateTimeNullableFilter<"userReceipts"> | Date | string | null
    doneTime?: DateTimeNullableFilter<"userReceipts"> | Date | string | null
    total?: FloatFilter<"userReceipts"> | number
    payMode?: EnumReceiptPayModeFilter<"userReceipts"> | $Enums.ReceiptPayMode
    paid?: BoolFilter<"userReceipts"> | boolean
  }

  export type productsCreateWithoutCategoryInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
    productPictures?: productPicturesCreateNestedManyWithoutProductInput
    guestReceiptDetail?: guestReceiptDetailCreateNestedManyWithoutProductInput
    userReceiptDetail?: userReceiptDetailCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
    productPictures?: productPicturesUncheckedCreateNestedManyWithoutProductInput
    guestReceiptDetail?: guestReceiptDetailUncheckedCreateNestedManyWithoutProductInput
    userReceiptDetail?: userReceiptDetailUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutCategoryInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput>
  }

  export type productsCreateManyCategoryInputEnvelope = {
    data: productsCreateManyCategoryInput | productsCreateManyCategoryInput[]
  }

  export type productsUpsertWithWhereUniqueWithoutCategoryInput = {
    where: productsWhereUniqueInput
    update: XOR<productsUpdateWithoutCategoryInput, productsUncheckedUpdateWithoutCategoryInput>
    create: XOR<productsCreateWithoutCategoryInput, productsUncheckedCreateWithoutCategoryInput>
  }

  export type productsUpdateWithWhereUniqueWithoutCategoryInput = {
    where: productsWhereUniqueInput
    data: XOR<productsUpdateWithoutCategoryInput, productsUncheckedUpdateWithoutCategoryInput>
  }

  export type productsUpdateManyWithWhereWithoutCategoryInput = {
    where: productsScalarWhereInput
    data: XOR<productsUpdateManyMutationInput, productsUncheckedUpdateManyWithoutCategoryInput>
  }

  export type productsScalarWhereInput = {
    AND?: productsScalarWhereInput | productsScalarWhereInput[]
    OR?: productsScalarWhereInput[]
    NOT?: productsScalarWhereInput | productsScalarWhereInput[]
    id?: StringFilter<"products"> | string
    name?: StringFilter<"products"> | string
    avatar?: StringFilter<"products"> | string
    price?: FloatFilter<"products"> | number
    des?: StringFilter<"products"> | string
    categoryId?: StringFilter<"products"> | string
  }

  export type categoriesCreateWithoutProductsInput = {
    id?: string
    title: string
    active?: boolean
    avatar?: string
  }

  export type categoriesUncheckedCreateWithoutProductsInput = {
    id?: string
    title: string
    active?: boolean
    avatar?: string
  }

  export type categoriesCreateOrConnectWithoutProductsInput = {
    where: categoriesWhereUniqueInput
    create: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
  }

  export type productPicturesCreateWithoutProductInput = {
    id?: string
    path: string
  }

  export type productPicturesUncheckedCreateWithoutProductInput = {
    id?: string
    path: string
  }

  export type productPicturesCreateOrConnectWithoutProductInput = {
    where: productPicturesWhereUniqueInput
    create: XOR<productPicturesCreateWithoutProductInput, productPicturesUncheckedCreateWithoutProductInput>
  }

  export type productPicturesCreateManyProductInputEnvelope = {
    data: productPicturesCreateManyProductInput | productPicturesCreateManyProductInput[]
  }

  export type guestReceiptDetailCreateWithoutProductInput = {
    id?: string
    quantity: number
    guestReceipt: guestReceiptsCreateNestedOneWithoutGuestReceiptDetailInput
  }

  export type guestReceiptDetailUncheckedCreateWithoutProductInput = {
    id?: string
    quantity: number
    guestReceiptId: string
  }

  export type guestReceiptDetailCreateOrConnectWithoutProductInput = {
    where: guestReceiptDetailWhereUniqueInput
    create: XOR<guestReceiptDetailCreateWithoutProductInput, guestReceiptDetailUncheckedCreateWithoutProductInput>
  }

  export type guestReceiptDetailCreateManyProductInputEnvelope = {
    data: guestReceiptDetailCreateManyProductInput | guestReceiptDetailCreateManyProductInput[]
  }

  export type userReceiptDetailCreateWithoutProductInput = {
    id?: string
    quantity: number
    userReceipt: userReceiptsCreateNestedOneWithoutUserReceiptDetailInput
  }

  export type userReceiptDetailUncheckedCreateWithoutProductInput = {
    id?: string
    quantity: number
    userReceiptId: string
  }

  export type userReceiptDetailCreateOrConnectWithoutProductInput = {
    where: userReceiptDetailWhereUniqueInput
    create: XOR<userReceiptDetailCreateWithoutProductInput, userReceiptDetailUncheckedCreateWithoutProductInput>
  }

  export type userReceiptDetailCreateManyProductInputEnvelope = {
    data: userReceiptDetailCreateManyProductInput | userReceiptDetailCreateManyProductInput[]
  }

  export type categoriesUpsertWithoutProductsInput = {
    update: XOR<categoriesUpdateWithoutProductsInput, categoriesUncheckedUpdateWithoutProductsInput>
    create: XOR<categoriesCreateWithoutProductsInput, categoriesUncheckedCreateWithoutProductsInput>
    where?: categoriesWhereInput
  }

  export type categoriesUpdateToOneWithWhereWithoutProductsInput = {
    where?: categoriesWhereInput
    data: XOR<categoriesUpdateWithoutProductsInput, categoriesUncheckedUpdateWithoutProductsInput>
  }

  export type categoriesUpdateWithoutProductsInput = {
    title?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type categoriesUncheckedUpdateWithoutProductsInput = {
    title?: StringFieldUpdateOperationsInput | string
    active?: BoolFieldUpdateOperationsInput | boolean
    avatar?: StringFieldUpdateOperationsInput | string
  }

  export type productPicturesUpsertWithWhereUniqueWithoutProductInput = {
    where: productPicturesWhereUniqueInput
    update: XOR<productPicturesUpdateWithoutProductInput, productPicturesUncheckedUpdateWithoutProductInput>
    create: XOR<productPicturesCreateWithoutProductInput, productPicturesUncheckedCreateWithoutProductInput>
  }

  export type productPicturesUpdateWithWhereUniqueWithoutProductInput = {
    where: productPicturesWhereUniqueInput
    data: XOR<productPicturesUpdateWithoutProductInput, productPicturesUncheckedUpdateWithoutProductInput>
  }

  export type productPicturesUpdateManyWithWhereWithoutProductInput = {
    where: productPicturesScalarWhereInput
    data: XOR<productPicturesUpdateManyMutationInput, productPicturesUncheckedUpdateManyWithoutProductInput>
  }

  export type productPicturesScalarWhereInput = {
    AND?: productPicturesScalarWhereInput | productPicturesScalarWhereInput[]
    OR?: productPicturesScalarWhereInput[]
    NOT?: productPicturesScalarWhereInput | productPicturesScalarWhereInput[]
    id?: StringFilter<"productPictures"> | string
    path?: StringFilter<"productPictures"> | string
    productId?: StringFilter<"productPictures"> | string
  }

  export type guestReceiptDetailUpsertWithWhereUniqueWithoutProductInput = {
    where: guestReceiptDetailWhereUniqueInput
    update: XOR<guestReceiptDetailUpdateWithoutProductInput, guestReceiptDetailUncheckedUpdateWithoutProductInput>
    create: XOR<guestReceiptDetailCreateWithoutProductInput, guestReceiptDetailUncheckedCreateWithoutProductInput>
  }

  export type guestReceiptDetailUpdateWithWhereUniqueWithoutProductInput = {
    where: guestReceiptDetailWhereUniqueInput
    data: XOR<guestReceiptDetailUpdateWithoutProductInput, guestReceiptDetailUncheckedUpdateWithoutProductInput>
  }

  export type guestReceiptDetailUpdateManyWithWhereWithoutProductInput = {
    where: guestReceiptDetailScalarWhereInput
    data: XOR<guestReceiptDetailUpdateManyMutationInput, guestReceiptDetailUncheckedUpdateManyWithoutProductInput>
  }

  export type guestReceiptDetailScalarWhereInput = {
    AND?: guestReceiptDetailScalarWhereInput | guestReceiptDetailScalarWhereInput[]
    OR?: guestReceiptDetailScalarWhereInput[]
    NOT?: guestReceiptDetailScalarWhereInput | guestReceiptDetailScalarWhereInput[]
    id?: StringFilter<"guestReceiptDetail"> | string
    productId?: StringFilter<"guestReceiptDetail"> | string
    quantity?: IntFilter<"guestReceiptDetail"> | number
    guestReceiptId?: StringFilter<"guestReceiptDetail"> | string
  }

  export type userReceiptDetailUpsertWithWhereUniqueWithoutProductInput = {
    where: userReceiptDetailWhereUniqueInput
    update: XOR<userReceiptDetailUpdateWithoutProductInput, userReceiptDetailUncheckedUpdateWithoutProductInput>
    create: XOR<userReceiptDetailCreateWithoutProductInput, userReceiptDetailUncheckedCreateWithoutProductInput>
  }

  export type userReceiptDetailUpdateWithWhereUniqueWithoutProductInput = {
    where: userReceiptDetailWhereUniqueInput
    data: XOR<userReceiptDetailUpdateWithoutProductInput, userReceiptDetailUncheckedUpdateWithoutProductInput>
  }

  export type userReceiptDetailUpdateManyWithWhereWithoutProductInput = {
    where: userReceiptDetailScalarWhereInput
    data: XOR<userReceiptDetailUpdateManyMutationInput, userReceiptDetailUncheckedUpdateManyWithoutProductInput>
  }

  export type userReceiptDetailScalarWhereInput = {
    AND?: userReceiptDetailScalarWhereInput | userReceiptDetailScalarWhereInput[]
    OR?: userReceiptDetailScalarWhereInput[]
    NOT?: userReceiptDetailScalarWhereInput | userReceiptDetailScalarWhereInput[]
    id?: StringFilter<"userReceiptDetail"> | string
    productId?: StringFilter<"userReceiptDetail"> | string
    quantity?: IntFilter<"userReceiptDetail"> | number
    userReceiptId?: StringFilter<"userReceiptDetail"> | string
  }

  export type productsCreateWithoutProductPicturesInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
    category: categoriesCreateNestedOneWithoutProductsInput
    guestReceiptDetail?: guestReceiptDetailCreateNestedManyWithoutProductInput
    userReceiptDetail?: userReceiptDetailCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutProductPicturesInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
    categoryId: string
    guestReceiptDetail?: guestReceiptDetailUncheckedCreateNestedManyWithoutProductInput
    userReceiptDetail?: userReceiptDetailUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutProductPicturesInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutProductPicturesInput, productsUncheckedCreateWithoutProductPicturesInput>
  }

  export type productsUpsertWithoutProductPicturesInput = {
    update: XOR<productsUpdateWithoutProductPicturesInput, productsUncheckedUpdateWithoutProductPicturesInput>
    create: XOR<productsCreateWithoutProductPicturesInput, productsUncheckedCreateWithoutProductPicturesInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutProductPicturesInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutProductPicturesInput, productsUncheckedUpdateWithoutProductPicturesInput>
  }

  export type productsUpdateWithoutProductPicturesInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
    category?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    guestReceiptDetail?: guestReceiptDetailUpdateManyWithoutProductNestedInput
    userReceiptDetail?: userReceiptDetailUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutProductPicturesInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    guestReceiptDetail?: guestReceiptDetailUncheckedUpdateManyWithoutProductNestedInput
    userReceiptDetail?: userReceiptDetailUncheckedUpdateManyWithoutProductNestedInput
  }

  export type usersCreateWithoutUserReceiptsInput = {
    id?: string
    email: string
    emailConfirm?: boolean
    userName: string
    password: string
    firstName: string
    lastName: string
    avatar?: string
    isActive?: boolean
    createAt?: Date | string
    updateAt?: Date | string
    address?: XOR<AddressListCreateEnvelopeInput, AddressCreateInput> | AddressCreateInput[]
    isAdmin?: boolean
  }

  export type usersUncheckedCreateWithoutUserReceiptsInput = {
    id?: string
    email: string
    emailConfirm?: boolean
    userName: string
    password: string
    firstName: string
    lastName: string
    avatar?: string
    isActive?: boolean
    createAt?: Date | string
    updateAt?: Date | string
    address?: XOR<AddressListCreateEnvelopeInput, AddressCreateInput> | AddressCreateInput[]
    isAdmin?: boolean
  }

  export type usersCreateOrConnectWithoutUserReceiptsInput = {
    where: usersWhereUniqueInput
    create: XOR<usersCreateWithoutUserReceiptsInput, usersUncheckedCreateWithoutUserReceiptsInput>
  }

  export type userReceiptDetailCreateWithoutUserReceiptInput = {
    id?: string
    quantity: number
    product: productsCreateNestedOneWithoutUserReceiptDetailInput
  }

  export type userReceiptDetailUncheckedCreateWithoutUserReceiptInput = {
    id?: string
    productId: string
    quantity: number
  }

  export type userReceiptDetailCreateOrConnectWithoutUserReceiptInput = {
    where: userReceiptDetailWhereUniqueInput
    create: XOR<userReceiptDetailCreateWithoutUserReceiptInput, userReceiptDetailUncheckedCreateWithoutUserReceiptInput>
  }

  export type userReceiptDetailCreateManyUserReceiptInputEnvelope = {
    data: userReceiptDetailCreateManyUserReceiptInput | userReceiptDetailCreateManyUserReceiptInput[]
  }

  export type usersUpsertWithoutUserReceiptsInput = {
    update: XOR<usersUpdateWithoutUserReceiptsInput, usersUncheckedUpdateWithoutUserReceiptsInput>
    create: XOR<usersCreateWithoutUserReceiptsInput, usersUncheckedCreateWithoutUserReceiptsInput>
    where?: usersWhereInput
  }

  export type usersUpdateToOneWithWhereWithoutUserReceiptsInput = {
    where?: usersWhereInput
    data: XOR<usersUpdateWithoutUserReceiptsInput, usersUncheckedUpdateWithoutUserReceiptsInput>
  }

  export type usersUpdateWithoutUserReceiptsInput = {
    email?: StringFieldUpdateOperationsInput | string
    emailConfirm?: BoolFieldUpdateOperationsInput | boolean
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: XOR<AddressListUpdateEnvelopeInput, AddressCreateInput> | AddressCreateInput[]
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type usersUncheckedUpdateWithoutUserReceiptsInput = {
    email?: StringFieldUpdateOperationsInput | string
    emailConfirm?: BoolFieldUpdateOperationsInput | boolean
    userName?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    firstName?: StringFieldUpdateOperationsInput | string
    lastName?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    isActive?: BoolFieldUpdateOperationsInput | boolean
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updateAt?: DateTimeFieldUpdateOperationsInput | Date | string
    address?: XOR<AddressListUpdateEnvelopeInput, AddressCreateInput> | AddressCreateInput[]
    isAdmin?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userReceiptDetailUpsertWithWhereUniqueWithoutUserReceiptInput = {
    where: userReceiptDetailWhereUniqueInput
    update: XOR<userReceiptDetailUpdateWithoutUserReceiptInput, userReceiptDetailUncheckedUpdateWithoutUserReceiptInput>
    create: XOR<userReceiptDetailCreateWithoutUserReceiptInput, userReceiptDetailUncheckedCreateWithoutUserReceiptInput>
  }

  export type userReceiptDetailUpdateWithWhereUniqueWithoutUserReceiptInput = {
    where: userReceiptDetailWhereUniqueInput
    data: XOR<userReceiptDetailUpdateWithoutUserReceiptInput, userReceiptDetailUncheckedUpdateWithoutUserReceiptInput>
  }

  export type userReceiptDetailUpdateManyWithWhereWithoutUserReceiptInput = {
    where: userReceiptDetailScalarWhereInput
    data: XOR<userReceiptDetailUpdateManyMutationInput, userReceiptDetailUncheckedUpdateManyWithoutUserReceiptInput>
  }

  export type guestReceiptDetailCreateWithoutGuestReceiptInput = {
    id?: string
    quantity: number
    product: productsCreateNestedOneWithoutGuestReceiptDetailInput
  }

  export type guestReceiptDetailUncheckedCreateWithoutGuestReceiptInput = {
    id?: string
    productId: string
    quantity: number
  }

  export type guestReceiptDetailCreateOrConnectWithoutGuestReceiptInput = {
    where: guestReceiptDetailWhereUniqueInput
    create: XOR<guestReceiptDetailCreateWithoutGuestReceiptInput, guestReceiptDetailUncheckedCreateWithoutGuestReceiptInput>
  }

  export type guestReceiptDetailCreateManyGuestReceiptInputEnvelope = {
    data: guestReceiptDetailCreateManyGuestReceiptInput | guestReceiptDetailCreateManyGuestReceiptInput[]
  }

  export type guestReceiptDetailUpsertWithWhereUniqueWithoutGuestReceiptInput = {
    where: guestReceiptDetailWhereUniqueInput
    update: XOR<guestReceiptDetailUpdateWithoutGuestReceiptInput, guestReceiptDetailUncheckedUpdateWithoutGuestReceiptInput>
    create: XOR<guestReceiptDetailCreateWithoutGuestReceiptInput, guestReceiptDetailUncheckedCreateWithoutGuestReceiptInput>
  }

  export type guestReceiptDetailUpdateWithWhereUniqueWithoutGuestReceiptInput = {
    where: guestReceiptDetailWhereUniqueInput
    data: XOR<guestReceiptDetailUpdateWithoutGuestReceiptInput, guestReceiptDetailUncheckedUpdateWithoutGuestReceiptInput>
  }

  export type guestReceiptDetailUpdateManyWithWhereWithoutGuestReceiptInput = {
    where: guestReceiptDetailScalarWhereInput
    data: XOR<guestReceiptDetailUpdateManyMutationInput, guestReceiptDetailUncheckedUpdateManyWithoutGuestReceiptInput>
  }

  export type productsCreateWithoutGuestReceiptDetailInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
    category: categoriesCreateNestedOneWithoutProductsInput
    productPictures?: productPicturesCreateNestedManyWithoutProductInput
    userReceiptDetail?: userReceiptDetailCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutGuestReceiptDetailInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
    categoryId: string
    productPictures?: productPicturesUncheckedCreateNestedManyWithoutProductInput
    userReceiptDetail?: userReceiptDetailUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutGuestReceiptDetailInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutGuestReceiptDetailInput, productsUncheckedCreateWithoutGuestReceiptDetailInput>
  }

  export type guestReceiptsCreateWithoutGuestReceiptDetailInput = {
    id?: string
    email: string
    phoneNumber: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
  }

  export type guestReceiptsUncheckedCreateWithoutGuestReceiptDetailInput = {
    id?: string
    email: string
    phoneNumber: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
  }

  export type guestReceiptsCreateOrConnectWithoutGuestReceiptDetailInput = {
    where: guestReceiptsWhereUniqueInput
    create: XOR<guestReceiptsCreateWithoutGuestReceiptDetailInput, guestReceiptsUncheckedCreateWithoutGuestReceiptDetailInput>
  }

  export type productsUpsertWithoutGuestReceiptDetailInput = {
    update: XOR<productsUpdateWithoutGuestReceiptDetailInput, productsUncheckedUpdateWithoutGuestReceiptDetailInput>
    create: XOR<productsCreateWithoutGuestReceiptDetailInput, productsUncheckedCreateWithoutGuestReceiptDetailInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutGuestReceiptDetailInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutGuestReceiptDetailInput, productsUncheckedUpdateWithoutGuestReceiptDetailInput>
  }

  export type productsUpdateWithoutGuestReceiptDetailInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
    category?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    productPictures?: productPicturesUpdateManyWithoutProductNestedInput
    userReceiptDetail?: userReceiptDetailUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutGuestReceiptDetailInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    productPictures?: productPicturesUncheckedUpdateManyWithoutProductNestedInput
    userReceiptDetail?: userReceiptDetailUncheckedUpdateManyWithoutProductNestedInput
  }

  export type guestReceiptsUpsertWithoutGuestReceiptDetailInput = {
    update: XOR<guestReceiptsUpdateWithoutGuestReceiptDetailInput, guestReceiptsUncheckedUpdateWithoutGuestReceiptDetailInput>
    create: XOR<guestReceiptsCreateWithoutGuestReceiptDetailInput, guestReceiptsUncheckedCreateWithoutGuestReceiptDetailInput>
    where?: guestReceiptsWhereInput
  }

  export type guestReceiptsUpdateToOneWithWhereWithoutGuestReceiptDetailInput = {
    where?: guestReceiptsWhereInput
    data: XOR<guestReceiptsUpdateWithoutGuestReceiptDetailInput, guestReceiptsUncheckedUpdateWithoutGuestReceiptDetailInput>
  }

  export type guestReceiptsUpdateWithoutGuestReceiptDetailInput = {
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type guestReceiptsUncheckedUpdateWithoutGuestReceiptDetailInput = {
    email?: StringFieldUpdateOperationsInput | string
    phoneNumber?: StringFieldUpdateOperationsInput | string
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type productsCreateWithoutUserReceiptDetailInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
    category: categoriesCreateNestedOneWithoutProductsInput
    productPictures?: productPicturesCreateNestedManyWithoutProductInput
    guestReceiptDetail?: guestReceiptDetailCreateNestedManyWithoutProductInput
  }

  export type productsUncheckedCreateWithoutUserReceiptDetailInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
    categoryId: string
    productPictures?: productPicturesUncheckedCreateNestedManyWithoutProductInput
    guestReceiptDetail?: guestReceiptDetailUncheckedCreateNestedManyWithoutProductInput
  }

  export type productsCreateOrConnectWithoutUserReceiptDetailInput = {
    where: productsWhereUniqueInput
    create: XOR<productsCreateWithoutUserReceiptDetailInput, productsUncheckedCreateWithoutUserReceiptDetailInput>
  }

  export type userReceiptsCreateWithoutUserReceiptDetailInput = {
    id?: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
    user: usersCreateNestedOneWithoutUserReceiptsInput
  }

  export type userReceiptsUncheckedCreateWithoutUserReceiptDetailInput = {
    id?: string
    userId: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
  }

  export type userReceiptsCreateOrConnectWithoutUserReceiptDetailInput = {
    where: userReceiptsWhereUniqueInput
    create: XOR<userReceiptsCreateWithoutUserReceiptDetailInput, userReceiptsUncheckedCreateWithoutUserReceiptDetailInput>
  }

  export type productsUpsertWithoutUserReceiptDetailInput = {
    update: XOR<productsUpdateWithoutUserReceiptDetailInput, productsUncheckedUpdateWithoutUserReceiptDetailInput>
    create: XOR<productsCreateWithoutUserReceiptDetailInput, productsUncheckedCreateWithoutUserReceiptDetailInput>
    where?: productsWhereInput
  }

  export type productsUpdateToOneWithWhereWithoutUserReceiptDetailInput = {
    where?: productsWhereInput
    data: XOR<productsUpdateWithoutUserReceiptDetailInput, productsUncheckedUpdateWithoutUserReceiptDetailInput>
  }

  export type productsUpdateWithoutUserReceiptDetailInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
    category?: categoriesUpdateOneRequiredWithoutProductsNestedInput
    productPictures?: productPicturesUpdateManyWithoutProductNestedInput
    guestReceiptDetail?: guestReceiptDetailUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutUserReceiptDetailInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    productPictures?: productPicturesUncheckedUpdateManyWithoutProductNestedInput
    guestReceiptDetail?: guestReceiptDetailUncheckedUpdateManyWithoutProductNestedInput
  }

  export type userReceiptsUpsertWithoutUserReceiptDetailInput = {
    update: XOR<userReceiptsUpdateWithoutUserReceiptDetailInput, userReceiptsUncheckedUpdateWithoutUserReceiptDetailInput>
    create: XOR<userReceiptsCreateWithoutUserReceiptDetailInput, userReceiptsUncheckedCreateWithoutUserReceiptDetailInput>
    where?: userReceiptsWhereInput
  }

  export type userReceiptsUpdateToOneWithWhereWithoutUserReceiptDetailInput = {
    where?: userReceiptsWhereInput
    data: XOR<userReceiptsUpdateWithoutUserReceiptDetailInput, userReceiptsUncheckedUpdateWithoutUserReceiptDetailInput>
  }

  export type userReceiptsUpdateWithoutUserReceiptDetailInput = {
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
    user?: usersUpdateOneRequiredWithoutUserReceiptsNestedInput
  }

  export type userReceiptsUncheckedUpdateWithoutUserReceiptDetailInput = {
    userId?: StringFieldUpdateOperationsInput | string
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type userReceiptsCreateManyUserInput = {
    id?: string
    state?: $Enums.ReceiptState
    createAt?: Date | string
    acceptTime?: Date | string | null
    shippingTime?: Date | string | null
    doneTime?: Date | string | null
    total: number
    payMode: $Enums.ReceiptPayMode
    paid?: boolean
  }

  export type AddressUpdateInput = {
    provinceId?: IntFieldUpdateOperationsInput | number
    provinceName?: StringFieldUpdateOperationsInput | string
    districtId?: IntFieldUpdateOperationsInput | number
    districtName?: StringFieldUpdateOperationsInput | string
    wardCode?: StringFieldUpdateOperationsInput | string
    wardName?: StringFieldUpdateOperationsInput | string
    title?: StringFieldUpdateOperationsInput | string
    id?: StringFieldUpdateOperationsInput | string
  }

  export type userReceiptsUpdateWithoutUserInput = {
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
    userReceiptDetail?: userReceiptDetailUpdateManyWithoutUserReceiptNestedInput
  }

  export type userReceiptsUncheckedUpdateWithoutUserInput = {
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
    userReceiptDetail?: userReceiptDetailUncheckedUpdateManyWithoutUserReceiptNestedInput
  }

  export type userReceiptsUncheckedUpdateManyWithoutUserInput = {
    state?: EnumReceiptStateFieldUpdateOperationsInput | $Enums.ReceiptState
    createAt?: DateTimeFieldUpdateOperationsInput | Date | string
    acceptTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    shippingTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    doneTime?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    total?: FloatFieldUpdateOperationsInput | number
    payMode?: EnumReceiptPayModeFieldUpdateOperationsInput | $Enums.ReceiptPayMode
    paid?: BoolFieldUpdateOperationsInput | boolean
  }

  export type productsCreateManyCategoryInput = {
    id?: string
    name: string
    avatar?: string
    price: number
    des: string
  }

  export type productsUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
    productPictures?: productPicturesUpdateManyWithoutProductNestedInput
    guestReceiptDetail?: guestReceiptDetailUpdateManyWithoutProductNestedInput
    userReceiptDetail?: userReceiptDetailUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
    productPictures?: productPicturesUncheckedUpdateManyWithoutProductNestedInput
    guestReceiptDetail?: guestReceiptDetailUncheckedUpdateManyWithoutProductNestedInput
    userReceiptDetail?: userReceiptDetailUncheckedUpdateManyWithoutProductNestedInput
  }

  export type productsUncheckedUpdateManyWithoutCategoryInput = {
    name?: StringFieldUpdateOperationsInput | string
    avatar?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    des?: StringFieldUpdateOperationsInput | string
  }

  export type productPicturesCreateManyProductInput = {
    id?: string
    path: string
  }

  export type guestReceiptDetailCreateManyProductInput = {
    id?: string
    quantity: number
    guestReceiptId: string
  }

  export type userReceiptDetailCreateManyProductInput = {
    id?: string
    quantity: number
    userReceiptId: string
  }

  export type productPicturesUpdateWithoutProductInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type productPicturesUncheckedUpdateWithoutProductInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type productPicturesUncheckedUpdateManyWithoutProductInput = {
    path?: StringFieldUpdateOperationsInput | string
  }

  export type guestReceiptDetailUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    guestReceipt?: guestReceiptsUpdateOneRequiredWithoutGuestReceiptDetailNestedInput
  }

  export type guestReceiptDetailUncheckedUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    guestReceiptId?: StringFieldUpdateOperationsInput | string
  }

  export type guestReceiptDetailUncheckedUpdateManyWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    guestReceiptId?: StringFieldUpdateOperationsInput | string
  }

  export type userReceiptDetailUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    userReceipt?: userReceiptsUpdateOneRequiredWithoutUserReceiptDetailNestedInput
  }

  export type userReceiptDetailUncheckedUpdateWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    userReceiptId?: StringFieldUpdateOperationsInput | string
  }

  export type userReceiptDetailUncheckedUpdateManyWithoutProductInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    userReceiptId?: StringFieldUpdateOperationsInput | string
  }

  export type userReceiptDetailCreateManyUserReceiptInput = {
    id?: string
    productId: string
    quantity: number
  }

  export type userReceiptDetailUpdateWithoutUserReceiptInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    product?: productsUpdateOneRequiredWithoutUserReceiptDetailNestedInput
  }

  export type userReceiptDetailUncheckedUpdateWithoutUserReceiptInput = {
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type userReceiptDetailUncheckedUpdateManyWithoutUserReceiptInput = {
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type guestReceiptDetailCreateManyGuestReceiptInput = {
    id?: string
    productId: string
    quantity: number
  }

  export type guestReceiptDetailUpdateWithoutGuestReceiptInput = {
    quantity?: IntFieldUpdateOperationsInput | number
    product?: productsUpdateOneRequiredWithoutGuestReceiptDetailNestedInput
  }

  export type guestReceiptDetailUncheckedUpdateWithoutGuestReceiptInput = {
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }

  export type guestReceiptDetailUncheckedUpdateManyWithoutGuestReceiptInput = {
    productId?: StringFieldUpdateOperationsInput | string
    quantity?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UsersCountOutputTypeDefaultArgs instead
     */
    export type UsersCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UsersCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriesCountOutputTypeDefaultArgs instead
     */
    export type CategoriesCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = CategoriesCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProductsCountOutputTypeDefaultArgs instead
     */
    export type ProductsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = ProductsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserReceiptsCountOutputTypeDefaultArgs instead
     */
    export type UserReceiptsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = UserReceiptsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use GuestReceiptsCountOutputTypeDefaultArgs instead
     */
    export type GuestReceiptsCountOutputTypeArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = GuestReceiptsCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AddressDefaultArgs instead
     */
    export type AddressArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = AddressDefaultArgs<ExtArgs>
    /**
     * @deprecated Use usersDefaultArgs instead
     */
    export type usersArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = usersDefaultArgs<ExtArgs>
    /**
     * @deprecated Use categoriesDefaultArgs instead
     */
    export type categoriesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = categoriesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productsDefaultArgs instead
     */
    export type productsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = productsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use productPicturesDefaultArgs instead
     */
    export type productPicturesArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = productPicturesDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userReceiptsDefaultArgs instead
     */
    export type userReceiptsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = userReceiptsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use guestReceiptsDefaultArgs instead
     */
    export type guestReceiptsArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = guestReceiptsDefaultArgs<ExtArgs>
    /**
     * @deprecated Use guestReceiptDetailDefaultArgs instead
     */
    export type guestReceiptDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = guestReceiptDetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userReceiptDetailDefaultArgs instead
     */
    export type userReceiptDetailArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = userReceiptDetailDefaultArgs<ExtArgs>
    /**
     * @deprecated Use userOrderDefaultArgs instead
     */
    export type userOrderArgs<ExtArgs extends $Extensions.Args = $Extensions.DefaultArgs> = userOrderDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}